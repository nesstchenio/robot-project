
Projet_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c914  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800caa8  0800caa8  0001caa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf80  0800cf80  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf80  0800cf80  0001cf80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf88  0800cf88  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf88  0800cf88  0001cf88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf8c  0800cf8c  0001cf8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800cf90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  200001d4  0800d164  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  0800d164  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014e98  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026c2  00000000  00000000  000350df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001350  00000000  00000000  000377a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f33  00000000  00000000  00038af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002965b  00000000  00000000  00039a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000155d9  00000000  00000000  00063086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010768e  00000000  00000000  0007865f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006874  00000000  00000000  0017fcf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00186564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ca8c 	.word	0x0800ca8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800ca8c 	.word	0x0800ca8c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	const float quantum = 8.0/256.0;
 8000ff6:	f04f 5374 	mov.w	r3, #1023410176	; 0x3d000000
 8000ffa:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffc:	f001 f9ce 	bl	800239c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001000:	f000 f8f8 	bl	80011f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001004:	f000 fc62 	bl	80018cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001008:	f000 fc30 	bl	800186c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800100c:	f000 f944 	bl	8001298 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001010:	f000 f9b8 	bl	8001384 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001014:	f000 fab0 	bl	8001578 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001018:	f000 fb30 	bl	800167c <MX_TIM3_Init>
  MX_TIM4_Init();
 800101c:	f000 fb8e 	bl	800173c <MX_TIM4_Init>
  MX_TIM6_Init();
 8001020:	f000 fbec 	bl	80017fc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 8001024:	4860      	ldr	r0, [pc, #384]	; (80011a8 <main+0x1b8>)
 8001026:	f004 fcc9 	bl	80059bc <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // Capture front montant
 800102a:	2100      	movs	r1, #0
 800102c:	485f      	ldr	r0, [pc, #380]	; (80011ac <main+0x1bc>)
 800102e:	f004 fef5 	bl	8005e1c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2); // Capture front descendant
 8001032:	2104      	movs	r1, #4
 8001034:	485d      	ldr	r0, [pc, #372]	; (80011ac <main+0x1bc>)
 8001036:	f004 fef1 	bl	8005e1c <HAL_TIM_IC_Start_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // PWM pour MOT2 (gauche)
 800103a:	2100      	movs	r1, #0
 800103c:	485c      	ldr	r0, [pc, #368]	; (80011b0 <main+0x1c0>)
 800103e:	f004 fd8f 	bl	8005b60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); // PWM pour MOT1 (droit)
 8001042:	210c      	movs	r1, #12
 8001044:	485a      	ldr	r0, [pc, #360]	; (80011b0 <main+0x1c0>)
 8001046:	f004 fd8b 	bl	8005b60 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); // DIR2
 800104a:	2201      	movs	r2, #1
 800104c:	2104      	movs	r1, #4
 800104e:	4859      	ldr	r0, [pc, #356]	; (80011b4 <main+0x1c4>)
 8001050:	f003 f90c 	bl	800426c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // DIR1
 8001054:	2201      	movs	r2, #1
 8001056:	f44f 7180 	mov.w	r1, #256	; 0x100
 800105a:	4857      	ldr	r0, [pc, #348]	; (80011b8 <main+0x1c8>)
 800105c:	f003 f906 	bl	800426c <HAL_GPIO_WritePin>

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0); // Stop MOT2 (gauche)
 8001060:	4b53      	ldr	r3, [pc, #332]	; (80011b0 <main+0x1c0>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2200      	movs	r2, #0
 8001066:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0); // Stop MOT1 (droit)
 8001068:	4b51      	ldr	r3, [pc, #324]	; (80011b0 <main+0x1c0>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2200      	movs	r2, #0
 800106e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
	  switch (currentState)
 8001070:	4b52      	ldr	r3, [pc, #328]	; (80011bc <main+0x1cc>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b01      	cmp	r3, #1
 8001078:	d002      	beq.n	8001080 <main+0x90>
 800107a:	2b02      	cmp	r3, #2
 800107c:	d01e      	beq.n	80010bc <main+0xcc>
	              break;

	          case STATE_IDLE:
	          default:
	              // Do nothing
	              break;
 800107e:	e042      	b.n	8001106 <main+0x116>
	              if (sonar_read_flag)
 8001080:	4b4f      	ldr	r3, [pc, #316]	; (80011c0 <main+0x1d0>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d03a      	beq.n	8001100 <main+0x110>
	                  sonar_read_flag = 0;
 800108a:	4b4d      	ldr	r3, [pc, #308]	; (80011c0 <main+0x1d0>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
	                  float distance = Read_Sonar_Distance();
 8001090:	f000 fdae 	bl	8001bf0 <Read_Sonar_Distance>
 8001094:	ed87 0a01 	vstr	s0, [r7, #4]
	                  if (distance <= 300.0)
 8001098:	edd7 7a01 	vldr	s15, [r7, #4]
 800109c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80011c4 <main+0x1d4>
 80010a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a8:	d900      	bls.n	80010ac <main+0xbc>
	              break;
 80010aa:	e029      	b.n	8001100 <main+0x110>
	                      StopMotors();
 80010ac:	f000 fcce 	bl	8001a4c <StopMotors>
	                      AlignWithObstacle();
 80010b0:	f000 fcea 	bl	8001a88 <AlignWithObstacle>
	                      currentState = STATE_MOVING_TOWARDS_OBSTACLE;
 80010b4:	4b41      	ldr	r3, [pc, #260]	; (80011bc <main+0x1cc>)
 80010b6:	2202      	movs	r2, #2
 80010b8:	701a      	strb	r2, [r3, #0]
	              break;
 80010ba:	e021      	b.n	8001100 <main+0x110>
	              if (sonar_read_flag)
 80010bc:	4b40      	ldr	r3, [pc, #256]	; (80011c0 <main+0x1d0>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d01e      	beq.n	8001104 <main+0x114>
	                  sonar_read_flag = 0;
 80010c6:	4b3e      	ldr	r3, [pc, #248]	; (80011c0 <main+0x1d0>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
	                  float distance = Read_Sonar_Distance();
 80010cc:	f000 fd90 	bl	8001bf0 <Read_Sonar_Distance>
 80010d0:	ed87 0a02 	vstr	s0, [r7, #8]
	                  if (distance <= 40.0)
 80010d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80010d8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80011c8 <main+0x1d8>
 80010dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	d900      	bls.n	80010e8 <main+0xf8>
	              break;
 80010e6:	e00d      	b.n	8001104 <main+0x114>
	                      StopMotors();
 80010e8:	f000 fcb0 	bl	8001a4c <StopMotors>
	                      printf("Arrêt à 20 cm de l'obstacle\n");
 80010ec:	4837      	ldr	r0, [pc, #220]	; (80011cc <main+0x1dc>)
 80010ee:	f008 f82b 	bl	8009148 <puts>
	                      commut = 0; // Arrêter le robot
 80010f2:	4b37      	ldr	r3, [pc, #220]	; (80011d0 <main+0x1e0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
	                      currentState = STATE_IDLE;
 80010f8:	4b30      	ldr	r3, [pc, #192]	; (80011bc <main+0x1cc>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
	              break;
 80010fe:	e001      	b.n	8001104 <main+0x114>
	              break;
 8001100:	bf00      	nop
 8001102:	e000      	b.n	8001106 <main+0x116>
	              break;
 8001104:	bf00      	nop
	      }

	      // Surveillance de la batterie
	      if (battery_check_flag)
 8001106:	4b33      	ldr	r3, [pc, #204]	; (80011d4 <main+0x1e4>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d005      	beq.n	800111c <main+0x12c>
	      {
	          battery_check_flag = 0;
 8001110:	4b30      	ldr	r3, [pc, #192]	; (80011d4 <main+0x1e4>)
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
	          HAL_ADC_Start_IT(&hadc1);
 8001116:	4830      	ldr	r0, [pc, #192]	; (80011d8 <main+0x1e8>)
 8001118:	f001 fd02 	bl	8002b20 <HAL_ADC_Start_IT>
	      }

	      if (ADC_on == 1)
 800111c:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <main+0x1ec>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b01      	cmp	r3, #1
 8001124:	d1a4      	bne.n	8001070 <main+0x80>
	      {
	          ADC_on = 0;
 8001126:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <main+0x1ec>)
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
	          ADCValue = HAL_ADC_GetValue(&hadc1);
 800112c:	482a      	ldr	r0, [pc, #168]	; (80011d8 <main+0x1e8>)
 800112e:	f001 fe25 	bl	8002d7c <HAL_ADC_GetValue>
 8001132:	4603      	mov	r3, r0
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <main+0x1f0>)
 8001138:	701a      	strb	r2, [r3, #0]
	          Vbatt = (float)ADCValue * quantum;
 800113a:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <main+0x1f0>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	ee07 3a90 	vmov	s15, r3
 8001144:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001148:	edd7 7a03 	vldr	s15, [r7, #12]
 800114c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001150:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <main+0x1f4>)
 8001152:	edc3 7a00 	vstr	s15, [r3]

	          #ifdef DEBUG
	          sprintf(msg, "Vbatt : %f V\r\n", Vbatt);
 8001156:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <main+0x1f4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f9f4 	bl	8000548 <__aeabi_f2d>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4920      	ldr	r1, [pc, #128]	; (80011e8 <main+0x1f8>)
 8001166:	4821      	ldr	r0, [pc, #132]	; (80011ec <main+0x1fc>)
 8001168:	f007 fff6 	bl	8009158 <siprintf>
	          HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800116c:	481f      	ldr	r0, [pc, #124]	; (80011ec <main+0x1fc>)
 800116e:	f7ff f87f 	bl	8000270 <strlen>
 8001172:	4603      	mov	r3, r0
 8001174:	b29a      	uxth	r2, r3
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
 800117a:	491c      	ldr	r1, [pc, #112]	; (80011ec <main+0x1fc>)
 800117c:	481c      	ldr	r0, [pc, #112]	; (80011f0 <main+0x200>)
 800117e:	f006 fb11 	bl	80077a4 <HAL_UART_Transmit>
	          #endif

	          if (ADCValue > 231)
 8001182:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <main+0x1f0>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2be7      	cmp	r3, #231	; 0xe7
 800118a:	d906      	bls.n	800119a <main+0x1aa>
	          {
	              HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	2120      	movs	r1, #32
 8001190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001194:	f003 f86a 	bl	800426c <HAL_GPIO_WritePin>
 8001198:	e76a      	b.n	8001070 <main+0x80>
	          }
	          else
	          {
	              HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800119a:	2201      	movs	r2, #1
 800119c:	2120      	movs	r1, #32
 800119e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a2:	f003 f863 	bl	800426c <HAL_GPIO_WritePin>
	  switch (currentState)
 80011a6:	e763      	b.n	8001070 <main+0x80>
 80011a8:	20000384 	.word	0x20000384
 80011ac:	20000254 	.word	0x20000254
 80011b0:	200002a0 	.word	0x200002a0
 80011b4:	48000400 	.word	0x48000400
 80011b8:	48000800 	.word	0x48000800
 80011bc:	2000048a 	.word	0x2000048a
 80011c0:	20000488 	.word	0x20000488
 80011c4:	43960000 	.word	0x43960000
 80011c8:	42200000 	.word	0x42200000
 80011cc:	0800caa8 	.word	0x0800caa8
 80011d0:	20000489 	.word	0x20000489
 80011d4:	2000047e 	.word	0x2000047e
 80011d8:	200001f0 	.word	0x200001f0
 80011dc:	2000045a 	.word	0x2000045a
 80011e0:	20000459 	.word	0x20000459
 80011e4:	2000045c 	.word	0x2000045c
 80011e8:	0800cac8 	.word	0x0800cac8
 80011ec:	20000460 	.word	0x20000460
 80011f0:	200003d0 	.word	0x200003d0

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b096      	sub	sp, #88	; 0x58
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	2244      	movs	r2, #68	; 0x44
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f008 f8a0 	bl	8009348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	463b      	mov	r3, r7
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001216:	f44f 7000 	mov.w	r0, #512	; 0x200
 800121a:	f003 f865 	bl	80042e8 <HAL_PWREx_ControlVoltageScaling>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001224:	f000 fd08 	bl	8001c38 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001228:	2302      	movs	r3, #2
 800122a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800122c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001230:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001232:	2310      	movs	r3, #16
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001236:	2302      	movs	r3, #2
 8001238:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800123a:	2302      	movs	r3, #2
 800123c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800123e:	2301      	movs	r3, #1
 8001240:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001242:	230a      	movs	r3, #10
 8001244:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001246:	2307      	movs	r3, #7
 8001248:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800124a:	2302      	movs	r3, #2
 800124c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800124e:	2302      	movs	r3, #2
 8001250:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4618      	mov	r0, r3
 8001258:	f003 f89c 	bl	8004394 <HAL_RCC_OscConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001262:	f000 fce9 	bl	8001c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001266:	230f      	movs	r3, #15
 8001268:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126a:	2303      	movs	r3, #3
 800126c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800127a:	463b      	mov	r3, r7
 800127c:	2104      	movs	r1, #4
 800127e:	4618      	mov	r0, r3
 8001280:	f003 fc64 	bl	8004b4c <HAL_RCC_ClockConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800128a:	f000 fcd5 	bl	8001c38 <Error_Handler>
  }
}
 800128e:	bf00      	nop
 8001290:	3758      	adds	r7, #88	; 0x58
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
 80012b8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012ba:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <MX_ADC1_Init+0xe0>)
 80012bc:	4a2f      	ldr	r2, [pc, #188]	; (800137c <MX_ADC1_Init+0xe4>)
 80012be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012c0:	4b2d      	ldr	r3, [pc, #180]	; (8001378 <MX_ADC1_Init+0xe0>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012c6:	4b2c      	ldr	r3, [pc, #176]	; (8001378 <MX_ADC1_Init+0xe0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012cc:	4b2a      	ldr	r3, [pc, #168]	; (8001378 <MX_ADC1_Init+0xe0>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012d2:	4b29      	ldr	r3, [pc, #164]	; (8001378 <MX_ADC1_Init+0xe0>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012d8:	4b27      	ldr	r3, [pc, #156]	; (8001378 <MX_ADC1_Init+0xe0>)
 80012da:	2204      	movs	r2, #4
 80012dc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012de:	4b26      	ldr	r3, [pc, #152]	; (8001378 <MX_ADC1_Init+0xe0>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012e4:	4b24      	ldr	r3, [pc, #144]	; (8001378 <MX_ADC1_Init+0xe0>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80012ea:	4b23      	ldr	r3, [pc, #140]	; (8001378 <MX_ADC1_Init+0xe0>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012f0:	4b21      	ldr	r3, [pc, #132]	; (8001378 <MX_ADC1_Init+0xe0>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012f8:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <MX_ADC1_Init+0xe0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012fe:	4b1e      	ldr	r3, [pc, #120]	; (8001378 <MX_ADC1_Init+0xe0>)
 8001300:	2200      	movs	r2, #0
 8001302:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001304:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <MX_ADC1_Init+0xe0>)
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <MX_ADC1_Init+0xe0>)
 800130e:	2200      	movs	r2, #0
 8001310:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001312:	4b19      	ldr	r3, [pc, #100]	; (8001378 <MX_ADC1_Init+0xe0>)
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800131a:	4817      	ldr	r0, [pc, #92]	; (8001378 <MX_ADC1_Init+0xe0>)
 800131c:	f001 fab0 	bl	8002880 <HAL_ADC_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001326:	f000 fc87 	bl	8001c38 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	4619      	mov	r1, r3
 8001334:	4810      	ldr	r0, [pc, #64]	; (8001378 <MX_ADC1_Init+0xe0>)
 8001336:	f002 fc2d 	bl	8003b94 <HAL_ADCEx_MultiModeConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001340:	f000 fc7a 	bl	8001c38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <MX_ADC1_Init+0xe8>)
 8001346:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001348:	2306      	movs	r3, #6
 800134a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001350:	237f      	movs	r3, #127	; 0x7f
 8001352:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001354:	2304      	movs	r3, #4
 8001356:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	4619      	mov	r1, r3
 8001360:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_ADC1_Init+0xe0>)
 8001362:	f001 ff47 	bl	80031f4 <HAL_ADC_ConfigChannel>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800136c:	f000 fc64 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	3728      	adds	r7, #40	; 0x28
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200001f0 	.word	0x200001f0
 800137c:	50040000 	.word	0x50040000
 8001380:	3ac04000 	.word	0x3ac04000

08001384 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b0a2      	sub	sp, #136	; 0x88
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800138a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001398:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]
 80013d2:	615a      	str	r2, [r3, #20]
 80013d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013d6:	463b      	mov	r3, r7
 80013d8:	222c      	movs	r2, #44	; 0x2c
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f007 ffb3 	bl	8009348 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013e2:	4b63      	ldr	r3, [pc, #396]	; (8001570 <MX_TIM1_Init+0x1ec>)
 80013e4:	4a63      	ldr	r2, [pc, #396]	; (8001574 <MX_TIM1_Init+0x1f0>)
 80013e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 46-1;
 80013e8:	4b61      	ldr	r3, [pc, #388]	; (8001570 <MX_TIM1_Init+0x1ec>)
 80013ea:	222d      	movs	r2, #45	; 0x2d
 80013ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ee:	4b60      	ldr	r3, [pc, #384]	; (8001570 <MX_TIM1_Init+0x1ec>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013f4:	4b5e      	ldr	r3, [pc, #376]	; (8001570 <MX_TIM1_Init+0x1ec>)
 80013f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fc:	4b5c      	ldr	r3, [pc, #368]	; (8001570 <MX_TIM1_Init+0x1ec>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001402:	4b5b      	ldr	r3, [pc, #364]	; (8001570 <MX_TIM1_Init+0x1ec>)
 8001404:	2200      	movs	r2, #0
 8001406:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001408:	4b59      	ldr	r3, [pc, #356]	; (8001570 <MX_TIM1_Init+0x1ec>)
 800140a:	2200      	movs	r2, #0
 800140c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800140e:	4858      	ldr	r0, [pc, #352]	; (8001570 <MX_TIM1_Init+0x1ec>)
 8001410:	f004 fa7c 	bl	800590c <HAL_TIM_Base_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800141a:	f000 fc0d 	bl	8001c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800141e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001422:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001424:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001428:	4619      	mov	r1, r3
 800142a:	4851      	ldr	r0, [pc, #324]	; (8001570 <MX_TIM1_Init+0x1ec>)
 800142c:	f005 f8f2 	bl	8006614 <HAL_TIM_ConfigClockSource>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001436:	f000 fbff 	bl	8001c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800143a:	484d      	ldr	r0, [pc, #308]	; (8001570 <MX_TIM1_Init+0x1ec>)
 800143c:	f004 fb2e 	bl	8005a9c <HAL_TIM_PWM_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001446:	f000 fbf7 	bl	8001c38 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800144a:	4849      	ldr	r0, [pc, #292]	; (8001570 <MX_TIM1_Init+0x1ec>)
 800144c:	f004 fc8e 	bl	8005d6c <HAL_TIM_IC_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001456:	f000 fbef 	bl	8001c38 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800145a:	2304      	movs	r3, #4
 800145c:	667b      	str	r3, [r7, #100]	; 0x64
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800145e:	2350      	movs	r3, #80	; 0x50
 8001460:	66bb      	str	r3, [r7, #104]	; 0x68
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001462:	2300      	movs	r3, #0
 8001464:	66fb      	str	r3, [r7, #108]	; 0x6c
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001466:	2300      	movs	r3, #0
 8001468:	673b      	str	r3, [r7, #112]	; 0x70
  sSlaveConfig.TriggerFilter = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800146e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001472:	4619      	mov	r1, r3
 8001474:	483e      	ldr	r0, [pc, #248]	; (8001570 <MX_TIM1_Init+0x1ec>)
 8001476:	f005 f996 	bl	80067a6 <HAL_TIM_SlaveConfigSynchro>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001480:	f000 fbda 	bl	8001c38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001484:	2300      	movs	r3, #0
 8001486:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001488:	2301      	movs	r3, #1
 800148a:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfigIC.ICFilter = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001494:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001498:	2200      	movs	r2, #0
 800149a:	4619      	mov	r1, r3
 800149c:	4834      	ldr	r0, [pc, #208]	; (8001570 <MX_TIM1_Init+0x1ec>)
 800149e:	f004 ff09 	bl	80062b4 <HAL_TIM_IC_ConfigChannel>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80014a8:	f000 fbc6 	bl	8001c38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80014ac:	2302      	movs	r3, #2
 80014ae:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80014b0:	2302      	movs	r3, #2
 80014b2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80014b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014b8:	2204      	movs	r2, #4
 80014ba:	4619      	mov	r1, r3
 80014bc:	482c      	ldr	r0, [pc, #176]	; (8001570 <MX_TIM1_Init+0x1ec>)
 80014be:	f004 fef9 	bl	80062b4 <HAL_TIM_IC_ConfigChannel>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80014c8:	f000 fbb6 	bl	8001c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014cc:	2300      	movs	r3, #0
 80014ce:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014d0:	2300      	movs	r3, #0
 80014d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014dc:	4619      	mov	r1, r3
 80014de:	4824      	ldr	r0, [pc, #144]	; (8001570 <MX_TIM1_Init+0x1ec>)
 80014e0:	f005 ffee 	bl	80074c0 <HAL_TIMEx_MasterConfigSynchronization>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 80014ea:	f000 fba5 	bl	8001c38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ee:	2360      	movs	r3, #96	; 0x60
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f6:	2300      	movs	r3, #0
 80014f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001502:	2300      	movs	r3, #0
 8001504:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001506:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800150a:	220c      	movs	r2, #12
 800150c:	4619      	mov	r1, r3
 800150e:	4818      	ldr	r0, [pc, #96]	; (8001570 <MX_TIM1_Init+0x1ec>)
 8001510:	f004 ff6c 	bl	80063ec <HAL_TIM_PWM_ConfigChannel>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM1_Init+0x19a>
  {
    Error_Handler();
 800151a:	f000 fb8d 	bl	8001c38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001532:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001536:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001540:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001544:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800154e:	463b      	mov	r3, r7
 8001550:	4619      	mov	r1, r3
 8001552:	4807      	ldr	r0, [pc, #28]	; (8001570 <MX_TIM1_Init+0x1ec>)
 8001554:	f006 f83c 	bl	80075d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM1_Init+0x1de>
  {
    Error_Handler();
 800155e:	f000 fb6b 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001562:	4803      	ldr	r0, [pc, #12]	; (8001570 <MX_TIM1_Init+0x1ec>)
 8001564:	f000 fcf2 	bl	8001f4c <HAL_TIM_MspPostInit>

}
 8001568:	bf00      	nop
 800156a:	3788      	adds	r7, #136	; 0x88
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000254 	.word	0x20000254
 8001574:	40012c00 	.word	0x40012c00

08001578 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08e      	sub	sp, #56	; 0x38
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158c:	f107 031c 	add.w	r3, r7, #28
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001598:	463b      	mov	r3, r7
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]
 80015a6:	615a      	str	r2, [r3, #20]
 80015a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015aa:	4b33      	ldr	r3, [pc, #204]	; (8001678 <MX_TIM2_Init+0x100>)
 80015ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80015b2:	4b31      	ldr	r3, [pc, #196]	; (8001678 <MX_TIM2_Init+0x100>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b8:	4b2f      	ldr	r3, [pc, #188]	; (8001678 <MX_TIM2_Init+0x100>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999;
 80015be:	4b2e      	ldr	r3, [pc, #184]	; (8001678 <MX_TIM2_Init+0x100>)
 80015c0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80015c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c6:	4b2c      	ldr	r3, [pc, #176]	; (8001678 <MX_TIM2_Init+0x100>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015cc:	4b2a      	ldr	r3, [pc, #168]	; (8001678 <MX_TIM2_Init+0x100>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015d2:	4829      	ldr	r0, [pc, #164]	; (8001678 <MX_TIM2_Init+0x100>)
 80015d4:	f004 f99a 	bl	800590c <HAL_TIM_Base_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80015de:	f000 fb2b 	bl	8001c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ec:	4619      	mov	r1, r3
 80015ee:	4822      	ldr	r0, [pc, #136]	; (8001678 <MX_TIM2_Init+0x100>)
 80015f0:	f005 f810 	bl	8006614 <HAL_TIM_ConfigClockSource>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80015fa:	f000 fb1d 	bl	8001c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015fe:	481e      	ldr	r0, [pc, #120]	; (8001678 <MX_TIM2_Init+0x100>)
 8001600:	f004 fa4c 	bl	8005a9c <HAL_TIM_PWM_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800160a:	f000 fb15 	bl	8001c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001616:	f107 031c 	add.w	r3, r7, #28
 800161a:	4619      	mov	r1, r3
 800161c:	4816      	ldr	r0, [pc, #88]	; (8001678 <MX_TIM2_Init+0x100>)
 800161e:	f005 ff4f 	bl	80074c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001628:	f000 fb06 	bl	8001c38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800162c:	2360      	movs	r3, #96	; 0x60
 800162e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800163c:	463b      	mov	r3, r7
 800163e:	2200      	movs	r2, #0
 8001640:	4619      	mov	r1, r3
 8001642:	480d      	ldr	r0, [pc, #52]	; (8001678 <MX_TIM2_Init+0x100>)
 8001644:	f004 fed2 	bl	80063ec <HAL_TIM_PWM_ConfigChannel>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800164e:	f000 faf3 	bl	8001c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001652:	463b      	mov	r3, r7
 8001654:	220c      	movs	r2, #12
 8001656:	4619      	mov	r1, r3
 8001658:	4807      	ldr	r0, [pc, #28]	; (8001678 <MX_TIM2_Init+0x100>)
 800165a:	f004 fec7 	bl	80063ec <HAL_TIM_PWM_ConfigChannel>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001664:	f000 fae8 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001668:	4803      	ldr	r0, [pc, #12]	; (8001678 <MX_TIM2_Init+0x100>)
 800166a:	f000 fc6f 	bl	8001f4c <HAL_TIM_MspPostInit>

}
 800166e:	bf00      	nop
 8001670:	3738      	adds	r7, #56	; 0x38
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200002a0 	.word	0x200002a0

0800167c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800169a:	4b26      	ldr	r3, [pc, #152]	; (8001734 <MX_TIM3_Init+0xb8>)
 800169c:	4a26      	ldr	r2, [pc, #152]	; (8001738 <MX_TIM3_Init+0xbc>)
 800169e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <MX_TIM3_Init+0xb8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a6:	4b23      	ldr	r3, [pc, #140]	; (8001734 <MX_TIM3_Init+0xb8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016ac:	4b21      	ldr	r3, [pc, #132]	; (8001734 <MX_TIM3_Init+0xb8>)
 80016ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b4:	4b1f      	ldr	r3, [pc, #124]	; (8001734 <MX_TIM3_Init+0xb8>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ba:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <MX_TIM3_Init+0xb8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80016c0:	481c      	ldr	r0, [pc, #112]	; (8001734 <MX_TIM3_Init+0xb8>)
 80016c2:	f004 fb53 	bl	8005d6c <HAL_TIM_IC_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80016cc:	f000 fab4 	bl	8001c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4619      	mov	r1, r3
 80016de:	4815      	ldr	r0, [pc, #84]	; (8001734 <MX_TIM3_Init+0xb8>)
 80016e0:	f005 feee 	bl	80074c0 <HAL_TIMEx_MasterConfigSynchronization>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80016ea:	f000 faa5 	bl	8001c38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016ee:	2300      	movs	r3, #0
 80016f0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016f2:	2301      	movs	r3, #1
 80016f4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	2200      	movs	r2, #0
 8001702:	4619      	mov	r1, r3
 8001704:	480b      	ldr	r0, [pc, #44]	; (8001734 <MX_TIM3_Init+0xb8>)
 8001706:	f004 fdd5 	bl	80062b4 <HAL_TIM_IC_ConfigChannel>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001710:	f000 fa92 	bl	8001c38 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2204      	movs	r2, #4
 8001718:	4619      	mov	r1, r3
 800171a:	4806      	ldr	r0, [pc, #24]	; (8001734 <MX_TIM3_Init+0xb8>)
 800171c:	f004 fdca 	bl	80062b4 <HAL_TIM_IC_ConfigChannel>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001726:	f000 fa87 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	3720      	adds	r7, #32
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200002ec 	.word	0x200002ec
 8001738:	40000400 	.word	0x40000400

0800173c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800175a:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <MX_TIM4_Init+0xb8>)
 800175c:	4a26      	ldr	r2, [pc, #152]	; (80017f8 <MX_TIM4_Init+0xbc>)
 800175e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001760:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <MX_TIM4_Init+0xb8>)
 8001762:	2200      	movs	r2, #0
 8001764:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001766:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <MX_TIM4_Init+0xb8>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800176c:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <MX_TIM4_Init+0xb8>)
 800176e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001772:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001774:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <MX_TIM4_Init+0xb8>)
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177a:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <MX_TIM4_Init+0xb8>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001780:	481c      	ldr	r0, [pc, #112]	; (80017f4 <MX_TIM4_Init+0xb8>)
 8001782:	f004 faf3 	bl	8005d6c <HAL_TIM_IC_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800178c:	f000 fa54 	bl	8001c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	4815      	ldr	r0, [pc, #84]	; (80017f4 <MX_TIM4_Init+0xb8>)
 80017a0:	f005 fe8e 	bl	80074c0 <HAL_TIMEx_MasterConfigSynchronization>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80017aa:	f000 fa45 	bl	8001c38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017ae:	2300      	movs	r3, #0
 80017b0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017b2:	2301      	movs	r3, #1
 80017b4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	2200      	movs	r2, #0
 80017c2:	4619      	mov	r1, r3
 80017c4:	480b      	ldr	r0, [pc, #44]	; (80017f4 <MX_TIM4_Init+0xb8>)
 80017c6:	f004 fd75 	bl	80062b4 <HAL_TIM_IC_ConfigChannel>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80017d0:	f000 fa32 	bl	8001c38 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	2204      	movs	r2, #4
 80017d8:	4619      	mov	r1, r3
 80017da:	4806      	ldr	r0, [pc, #24]	; (80017f4 <MX_TIM4_Init+0xb8>)
 80017dc:	f004 fd6a 	bl	80062b4 <HAL_TIM_IC_ConfigChannel>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80017e6:	f000 fa27 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017ea:	bf00      	nop
 80017ec:	3720      	adds	r7, #32
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000338 	.word	0x20000338
 80017f8:	40000800 	.word	0x40000800

080017fc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800180c:	4b15      	ldr	r3, [pc, #84]	; (8001864 <MX_TIM6_Init+0x68>)
 800180e:	4a16      	ldr	r2, [pc, #88]	; (8001868 <MX_TIM6_Init+0x6c>)
 8001810:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8001812:	4b14      	ldr	r3, [pc, #80]	; (8001864 <MX_TIM6_Init+0x68>)
 8001814:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001818:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <MX_TIM6_Init+0x68>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001820:	4b10      	ldr	r3, [pc, #64]	; (8001864 <MX_TIM6_Init+0x68>)
 8001822:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001826:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001828:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <MX_TIM6_Init+0x68>)
 800182a:	2200      	movs	r2, #0
 800182c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800182e:	480d      	ldr	r0, [pc, #52]	; (8001864 <MX_TIM6_Init+0x68>)
 8001830:	f004 f86c 	bl	800590c <HAL_TIM_Base_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800183a:	f000 f9fd 	bl	8001c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	4619      	mov	r1, r3
 800184a:	4806      	ldr	r0, [pc, #24]	; (8001864 <MX_TIM6_Init+0x68>)
 800184c:	f005 fe38 	bl	80074c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001856:	f000 f9ef 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000384 	.word	0x20000384
 8001868:	40001000 	.word	0x40001000

0800186c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001870:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <MX_USART2_UART_Init+0x58>)
 8001872:	4a15      	ldr	r2, [pc, #84]	; (80018c8 <MX_USART2_UART_Init+0x5c>)
 8001874:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001876:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <MX_USART2_UART_Init+0x58>)
 8001878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800187c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <MX_USART2_UART_Init+0x58>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <MX_USART2_UART_Init+0x58>)
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <MX_USART2_UART_Init+0x58>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <MX_USART2_UART_Init+0x58>)
 8001892:	220c      	movs	r2, #12
 8001894:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <MX_USART2_UART_Init+0x58>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800189c:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <MX_USART2_UART_Init+0x58>)
 800189e:	2200      	movs	r2, #0
 80018a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <MX_USART2_UART_Init+0x58>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <MX_USART2_UART_Init+0x58>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018ae:	4805      	ldr	r0, [pc, #20]	; (80018c4 <MX_USART2_UART_Init+0x58>)
 80018b0:	f005 ff2a 	bl	8007708 <HAL_UART_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018ba:	f000 f9bd 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200003d0 	.word	0x200003d0
 80018c8:	40004400 	.word	0x40004400

080018cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e2:	4b47      	ldr	r3, [pc, #284]	; (8001a00 <MX_GPIO_Init+0x134>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	4a46      	ldr	r2, [pc, #280]	; (8001a00 <MX_GPIO_Init+0x134>)
 80018e8:	f043 0304 	orr.w	r3, r3, #4
 80018ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ee:	4b44      	ldr	r3, [pc, #272]	; (8001a00 <MX_GPIO_Init+0x134>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	f003 0304 	and.w	r3, r3, #4
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018fa:	4b41      	ldr	r3, [pc, #260]	; (8001a00 <MX_GPIO_Init+0x134>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fe:	4a40      	ldr	r2, [pc, #256]	; (8001a00 <MX_GPIO_Init+0x134>)
 8001900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001906:	4b3e      	ldr	r3, [pc, #248]	; (8001a00 <MX_GPIO_Init+0x134>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	4b3b      	ldr	r3, [pc, #236]	; (8001a00 <MX_GPIO_Init+0x134>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001916:	4a3a      	ldr	r2, [pc, #232]	; (8001a00 <MX_GPIO_Init+0x134>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800191e:	4b38      	ldr	r3, [pc, #224]	; (8001a00 <MX_GPIO_Init+0x134>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	4b35      	ldr	r3, [pc, #212]	; (8001a00 <MX_GPIO_Init+0x134>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	4a34      	ldr	r2, [pc, #208]	; (8001a00 <MX_GPIO_Init+0x134>)
 8001930:	f043 0302 	orr.w	r3, r3, #2
 8001934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001936:	4b32      	ldr	r3, [pc, #200]	; (8001a00 <MX_GPIO_Init+0x134>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	2120      	movs	r1, #32
 8001946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800194a:	f002 fc8f 	bl	800426c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	2104      	movs	r1, #4
 8001952:	482c      	ldr	r0, [pc, #176]	; (8001a04 <MX_GPIO_Init+0x138>)
 8001954:	f002 fc8a 	bl	800426c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trig_sonar_GPIO_Port, Trig_sonar_Pin, GPIO_PIN_SET);
 8001958:	2201      	movs	r2, #1
 800195a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800195e:	4829      	ldr	r0, [pc, #164]	; (8001a04 <MX_GPIO_Init+0x138>)
 8001960:	f002 fc84 	bl	800426c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 8001964:	2200      	movs	r2, #0
 8001966:	f44f 7180 	mov.w	r1, #256	; 0x100
 800196a:	4827      	ldr	r0, [pc, #156]	; (8001a08 <MX_GPIO_Init+0x13c>)
 800196c:	f002 fc7e 	bl	800426c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001976:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800197a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	4619      	mov	r1, r3
 8001986:	4820      	ldr	r0, [pc, #128]	; (8001a08 <MX_GPIO_Init+0x13c>)
 8001988:	f002 fac6 	bl	8003f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800198c:	2320      	movs	r3, #32
 800198e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001990:	2301      	movs	r3, #1
 8001992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	4619      	mov	r1, r3
 80019a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a6:	f002 fab7 	bl	8003f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR2_Pin Trig_sonar_Pin */
  GPIO_InitStruct.Pin = DIR2_Pin|Trig_sonar_Pin;
 80019aa:	f240 4304 	movw	r3, #1028	; 0x404
 80019ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b0:	2301      	movs	r3, #1
 80019b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	4619      	mov	r1, r3
 80019c2:	4810      	ldr	r0, [pc, #64]	; (8001a04 <MX_GPIO_Init+0x138>)
 80019c4:	f002 faa8 	bl	8003f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR1_Pin */
  GPIO_InitStruct.Pin = DIR1_Pin;
 80019c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ce:	2301      	movs	r3, #1
 80019d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d6:	2300      	movs	r3, #0
 80019d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR1_GPIO_Port, &GPIO_InitStruct);
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	4619      	mov	r1, r3
 80019e0:	4809      	ldr	r0, [pc, #36]	; (8001a08 <MX_GPIO_Init+0x13c>)
 80019e2:	f002 fa99 	bl	8003f18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2100      	movs	r1, #0
 80019ea:	2028      	movs	r0, #40	; 0x28
 80019ec:	f002 fa5d 	bl	8003eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019f0:	2028      	movs	r0, #40	; 0x28
 80019f2:	f002 fa76 	bl	8003ee2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019f6:	bf00      	nop
 80019f8:	3728      	adds	r7, #40	; 0x28
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40021000 	.word	0x40021000
 8001a04:	48000400 	.word	0x48000400
 8001a08:	48000800 	.word	0x48000800

08001a0c <StartTurning>:

/* USER CODE BEGIN 4 */

void StartTurning(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
    // Code pour faire tourner le robot sur place
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); // DIR2 dans un sens
 8001a10:	2201      	movs	r2, #1
 8001a12:	2104      	movs	r1, #4
 8001a14:	480a      	ldr	r0, [pc, #40]	; (8001a40 <StartTurning+0x34>)
 8001a16:	f002 fc29 	bl	800426c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET); // DIR1 dans l'autre sens
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a20:	4808      	ldr	r0, [pc, #32]	; (8001a44 <StartTurning+0x38>)
 8001a22:	f002 fc23 	bl	800426c <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 3000); // PWM pour MOT2 (gauche)
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <StartTurning+0x3c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001a2e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 3000); // PWM pour MOT1 (droit)
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <StartTurning+0x3c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001a38:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	48000400 	.word	0x48000400
 8001a44:	48000800 	.word	0x48000800
 8001a48:	200002a0 	.word	0x200002a0

08001a4c <StopMotors>:


void StopMotors(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0); // Stop MOT2 (gauche)
 8001a50:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <StopMotors+0x30>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2200      	movs	r2, #0
 8001a56:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0); // Stop MOT1 (droit)
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <StopMotors+0x30>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // DIR2
 8001a60:	2200      	movs	r2, #0
 8001a62:	2104      	movs	r1, #4
 8001a64:	4806      	ldr	r0, [pc, #24]	; (8001a80 <StopMotors+0x34>)
 8001a66:	f002 fc01 	bl	800426c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET); // DIR1
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <StopMotors+0x38>)
 8001a72:	f002 fbfb 	bl	800426c <HAL_GPIO_WritePin>
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200002a0 	.word	0x200002a0
 8001a80:	48000400 	.word	0x48000400
 8001a84:	48000800 	.word	0x48000800

08001a88 <AlignWithObstacle>:

void AlignWithObstacle(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
    // Code pour aligner le robot avec l'obstacle et avancer
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); // DIR2 en avant
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	2104      	movs	r1, #4
 8001a90:	480a      	ldr	r0, [pc, #40]	; (8001abc <AlignWithObstacle+0x34>)
 8001a92:	f002 fbeb 	bl	800426c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // DIR1 en avant
 8001a96:	2201      	movs	r2, #1
 8001a98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a9c:	4808      	ldr	r0, [pc, #32]	; (8001ac0 <AlignWithObstacle+0x38>)
 8001a9e:	f002 fbe5 	bl	800426c <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 5279); // PWM pour MOT2 (gauche)
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <AlignWithObstacle+0x3c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f241 429f 	movw	r2, #5279	; 0x149f
 8001aaa:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 5279); // PWM pour MOT1 (droit)
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <AlignWithObstacle+0x3c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f241 429f 	movw	r2, #5279	; 0x149f
 8001ab4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	48000400 	.word	0x48000400
 8001ac0:	48000800 	.word	0x48000800
 8001ac4:	200002a0 	.word	0x200002a0

08001ac8 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13)
 8001ad2:	88fb      	ldrh	r3, [r7, #6]
 8001ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ad8:	d123      	bne.n	8001b22 <HAL_GPIO_EXTI_Callback+0x5a>
    {
        printf("Bouton poussoir appuyé\n");
 8001ada:	4814      	ldr	r0, [pc, #80]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x64>)
 8001adc:	f007 fb34 	bl	8009148 <puts>
        commut = !commut;
 8001ae0:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <HAL_GPIO_EXTI_Callback+0x68>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	bf0c      	ite	eq
 8001aea:	2301      	moveq	r3, #1
 8001aec:	2300      	movne	r3, #0
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <HAL_GPIO_EXTI_Callback+0x68>)
 8001af4:	701a      	strb	r2, [r3, #0]
        if (commut)
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <HAL_GPIO_EXTI_Callback+0x68>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d008      	beq.n	8001b12 <HAL_GPIO_EXTI_Callback+0x4a>
        {
            printf("Robot démarré\n");
 8001b00:	480c      	ldr	r0, [pc, #48]	; (8001b34 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001b02:	f007 fb21 	bl	8009148 <puts>
            currentState = STATE_TURNING;
 8001b06:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <HAL_GPIO_EXTI_Callback+0x70>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	701a      	strb	r2, [r3, #0]
            StartTurning();
 8001b0c:	f7ff ff7e 	bl	8001a0c <StartTurning>
            printf("Robot arrêté\n");
            StopMotors();
            currentState = STATE_IDLE;
        }
    }
}
 8001b10:	e007      	b.n	8001b22 <HAL_GPIO_EXTI_Callback+0x5a>
            printf("Robot arrêté\n");
 8001b12:	480a      	ldr	r0, [pc, #40]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x74>)
 8001b14:	f007 fb18 	bl	8009148 <puts>
            StopMotors();
 8001b18:	f7ff ff98 	bl	8001a4c <StopMotors>
            currentState = STATE_IDLE;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_GPIO_EXTI_Callback+0x70>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	0800cad8 	.word	0x0800cad8
 8001b30:	20000489 	.word	0x20000489
 8001b34:	0800caf0 	.word	0x0800caf0
 8001b38:	2000048a 	.word	0x2000048a
 8001b3c:	0800cb00 	.word	0x0800cb00

08001b40 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6)  // Vérifiez si c'est le Timer 6
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0e      	ldr	r2, [pc, #56]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d114      	bne.n	8001b7c <HAL_TIM_PeriodElapsedCallback+0x3c>
  {
    T_batt++;
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	3301      	adds	r3, #1
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001b5e:	701a      	strb	r2, [r3, #0]
    sonar_read_flag = 1;  // Lire la distance du sonar toutes les 100 ms
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]

    if (T_batt >= 50) // 50 * 100 ms = 5 secondes
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b31      	cmp	r3, #49	; 0x31
 8001b6e:	d905      	bls.n	8001b7c <HAL_TIM_PeriodElapsedCallback+0x3c>
    {
        T_batt = 0;
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
        battery_check_flag = 1;
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	40001000 	.word	0x40001000
 8001b8c:	20000458 	.word	0x20000458
 8001b90:	20000488 	.word	0x20000488
 8001b94:	2000047e 	.word	0x2000047e

08001b98 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	 if (htim ->Channel ==HAL_TIM_ACTIVE_CHANNEL_2)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	7f1b      	ldrb	r3, [r3, #28]
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d116      	bne.n	8001bd6 <HAL_TIM_IC_CaptureCallback+0x3e>
	 {
		 ic_value1 = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);
 8001ba8:	2104      	movs	r1, #4
 8001baa:	480d      	ldr	r0, [pc, #52]	; (8001be0 <HAL_TIM_IC_CaptureCallback+0x48>)
 8001bac:	f004 fe3e 	bl	800682c <HAL_TIM_ReadCapturedValue>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	4a0c      	ldr	r2, [pc, #48]	; (8001be4 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8001bb4:	6013      	str	r3, [r2, #0]

		 sonar_distance = ic_value1/101; // donc D en cm
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8001bc0:	1ad2      	subs	r2, r2, r3
 8001bc2:	0852      	lsrs	r2, r2, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	099b      	lsrs	r3, r3, #6
 8001bc8:	ee07 3a90 	vmov	s15, r3
 8001bcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_TIM_IC_CaptureCallback+0x54>)
 8001bd2:	edc3 7a00 	vstr	s15, [r3]
	 }
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000254 	.word	0x20000254
 8001be4:	20000480 	.word	0x20000480
 8001be8:	446f8657 	.word	0x446f8657
 8001bec:	20000484 	.word	0x20000484

08001bf0 <Read_Sonar_Distance>:

float Read_Sonar_Distance(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return sonar_distance;
 8001bf4:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <Read_Sonar_Distance+0x18>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	ee07 3a90 	vmov	s15, r3
}
 8001bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	20000484 	.word	0x20000484

08001c0c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a05      	ldr	r2, [pc, #20]	; (8001c30 <HAL_ADC_ConvCpltCallback+0x24>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d102      	bne.n	8001c24 <HAL_ADC_ConvCpltCallback+0x18>
	{
		ADC_on = 1;
 8001c1e:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <HAL_ADC_ConvCpltCallback+0x28>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	701a      	strb	r2, [r3, #0]
	}
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	50040000 	.word	0x50040000
 8001c34:	2000045a 	.word	0x2000045a

08001c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c3c:	b672      	cpsid	i
}
 8001c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <Error_Handler+0x8>
	...

08001c44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <HAL_MspInit+0x44>)
 8001c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c4e:	4a0e      	ldr	r2, [pc, #56]	; (8001c88 <HAL_MspInit+0x44>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	6613      	str	r3, [r2, #96]	; 0x60
 8001c56:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <HAL_MspInit+0x44>)
 8001c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_MspInit+0x44>)
 8001c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c66:	4a08      	ldr	r2, [pc, #32]	; (8001c88 <HAL_MspInit+0x44>)
 8001c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c6c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_MspInit+0x44>)
 8001c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40021000 	.word	0x40021000

08001c8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b0ac      	sub	sp, #176	; 0xb0
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	2288      	movs	r2, #136	; 0x88
 8001caa:	2100      	movs	r1, #0
 8001cac:	4618      	mov	r0, r3
 8001cae:	f007 fb4b 	bl	8009348 <memset>
  if(hadc->Instance==ADC1)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a2b      	ldr	r2, [pc, #172]	; (8001d64 <HAL_ADC_MspInit+0xd8>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d14e      	bne.n	8001d5a <HAL_ADC_MspInit+0xce>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001cbc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cc0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001cc2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001cc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001cd2:	2308      	movs	r3, #8
 8001cd4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001cd6:	2307      	movs	r3, #7
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001ce2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ce6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	4618      	mov	r0, r3
 8001cee:	f003 f951 	bl	8004f94 <HAL_RCCEx_PeriphCLKConfig>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001cf8:	f7ff ff9e 	bl	8001c38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001cfc:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <HAL_ADC_MspInit+0xdc>)
 8001cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d00:	4a19      	ldr	r2, [pc, #100]	; (8001d68 <HAL_ADC_MspInit+0xdc>)
 8001d02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d08:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <HAL_ADC_MspInit+0xdc>)
 8001d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d14:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <HAL_ADC_MspInit+0xdc>)
 8001d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d18:	4a13      	ldr	r2, [pc, #76]	; (8001d68 <HAL_ADC_MspInit+0xdc>)
 8001d1a:	f043 0304 	orr.w	r3, r3, #4
 8001d1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d20:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <HAL_ADC_MspInit+0xdc>)
 8001d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d2c:	2320      	movs	r3, #32
 8001d2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d32:	230b      	movs	r3, #11
 8001d34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d42:	4619      	mov	r1, r3
 8001d44:	4809      	ldr	r0, [pc, #36]	; (8001d6c <HAL_ADC_MspInit+0xe0>)
 8001d46:	f002 f8e7 	bl	8003f18 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	2012      	movs	r0, #18
 8001d50:	f002 f8ab 	bl	8003eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001d54:	2012      	movs	r0, #18
 8001d56:	f002 f8c4 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d5a:	bf00      	nop
 8001d5c:	37b0      	adds	r7, #176	; 0xb0
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	50040000 	.word	0x50040000
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	48000800 	.word	0x48000800

08001d70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08c      	sub	sp, #48	; 0x30
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 031c 	add.w	r3, r7, #28
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a32      	ldr	r2, [pc, #200]	; (8001e58 <HAL_TIM_Base_MspInit+0xe8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d132      	bne.n	8001df8 <HAL_TIM_Base_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d92:	4b32      	ldr	r3, [pc, #200]	; (8001e5c <HAL_TIM_Base_MspInit+0xec>)
 8001d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d96:	4a31      	ldr	r2, [pc, #196]	; (8001e5c <HAL_TIM_Base_MspInit+0xec>)
 8001d98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d9c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d9e:	4b2f      	ldr	r3, [pc, #188]	; (8001e5c <HAL_TIM_Base_MspInit+0xec>)
 8001da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001da6:	61bb      	str	r3, [r7, #24]
 8001da8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	4b2c      	ldr	r3, [pc, #176]	; (8001e5c <HAL_TIM_Base_MspInit+0xec>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dae:	4a2b      	ldr	r2, [pc, #172]	; (8001e5c <HAL_TIM_Base_MspInit+0xec>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db6:	4b29      	ldr	r3, [pc, #164]	; (8001e5c <HAL_TIM_Base_MspInit+0xec>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Echo_sonar_Pin;
 8001dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Echo_sonar_GPIO_Port, &GPIO_InitStruct);
 8001dd8:	f107 031c 	add.w	r3, r7, #28
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de2:	f002 f899 	bl	8003f18 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001de6:	2200      	movs	r2, #0
 8001de8:	2100      	movs	r1, #0
 8001dea:	201b      	movs	r0, #27
 8001dec:	f002 f85d 	bl	8003eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001df0:	201b      	movs	r0, #27
 8001df2:	f002 f876 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001df6:	e02a      	b.n	8001e4e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e00:	d10c      	bne.n	8001e1c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e02:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <HAL_TIM_Base_MspInit+0xec>)
 8001e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e06:	4a15      	ldr	r2, [pc, #84]	; (8001e5c <HAL_TIM_Base_MspInit+0xec>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e0e:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <HAL_TIM_Base_MspInit+0xec>)
 8001e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]
}
 8001e1a:	e018      	b.n	8001e4e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM6)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0f      	ldr	r2, [pc, #60]	; (8001e60 <HAL_TIM_Base_MspInit+0xf0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d113      	bne.n	8001e4e <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e26:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <HAL_TIM_Base_MspInit+0xec>)
 8001e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2a:	4a0c      	ldr	r2, [pc, #48]	; (8001e5c <HAL_TIM_Base_MspInit+0xec>)
 8001e2c:	f043 0310 	orr.w	r3, r3, #16
 8001e30:	6593      	str	r3, [r2, #88]	; 0x58
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_TIM_Base_MspInit+0xec>)
 8001e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e36:	f003 0310 	and.w	r3, r3, #16
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2100      	movs	r1, #0
 8001e42:	2036      	movs	r0, #54	; 0x36
 8001e44:	f002 f831 	bl	8003eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e48:	2036      	movs	r0, #54	; 0x36
 8001e4a:	f002 f84a 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
}
 8001e4e:	bf00      	nop
 8001e50:	3730      	adds	r7, #48	; 0x30
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40012c00 	.word	0x40012c00
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40001000 	.word	0x40001000

08001e64 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08c      	sub	sp, #48	; 0x30
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 031c 	add.w	r3, r7, #28
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a2e      	ldr	r2, [pc, #184]	; (8001f3c <HAL_TIM_IC_MspInit+0xd8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d129      	bne.n	8001eda <HAL_TIM_IC_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e86:	4b2e      	ldr	r3, [pc, #184]	; (8001f40 <HAL_TIM_IC_MspInit+0xdc>)
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	4a2d      	ldr	r2, [pc, #180]	; (8001f40 <HAL_TIM_IC_MspInit+0xdc>)
 8001e8c:	f043 0302 	orr.w	r3, r3, #2
 8001e90:	6593      	str	r3, [r2, #88]	; 0x58
 8001e92:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <HAL_TIM_IC_MspInit+0xdc>)
 8001e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	61bb      	str	r3, [r7, #24]
 8001e9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9e:	4b28      	ldr	r3, [pc, #160]	; (8001f40 <HAL_TIM_IC_MspInit+0xdc>)
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea2:	4a27      	ldr	r2, [pc, #156]	; (8001f40 <HAL_TIM_IC_MspInit+0xdc>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eaa:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <HAL_TIM_IC_MspInit+0xdc>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001eb6:	23c0      	movs	r3, #192	; 0xc0
 8001eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eca:	f107 031c 	add.w	r3, r7, #28
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed4:	f002 f820 	bl	8003f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ed8:	e02c      	b.n	8001f34 <HAL_TIM_IC_MspInit+0xd0>
  else if(htim_ic->Instance==TIM4)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a19      	ldr	r2, [pc, #100]	; (8001f44 <HAL_TIM_IC_MspInit+0xe0>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d127      	bne.n	8001f34 <HAL_TIM_IC_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ee4:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <HAL_TIM_IC_MspInit+0xdc>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee8:	4a15      	ldr	r2, [pc, #84]	; (8001f40 <HAL_TIM_IC_MspInit+0xdc>)
 8001eea:	f043 0304 	orr.w	r3, r3, #4
 8001eee:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef0:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <HAL_TIM_IC_MspInit+0xdc>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efc:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <HAL_TIM_IC_MspInit+0xdc>)
 8001efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f00:	4a0f      	ldr	r2, [pc, #60]	; (8001f40 <HAL_TIM_IC_MspInit+0xdc>)
 8001f02:	f043 0302 	orr.w	r3, r3, #2
 8001f06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f08:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <HAL_TIM_IC_MspInit+0xdc>)
 8001f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f14:	23c0      	movs	r3, #192	; 0xc0
 8001f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	2300      	movs	r3, #0
 8001f22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f24:	2302      	movs	r3, #2
 8001f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f28:	f107 031c 	add.w	r3, r7, #28
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4806      	ldr	r0, [pc, #24]	; (8001f48 <HAL_TIM_IC_MspInit+0xe4>)
 8001f30:	f001 fff2 	bl	8003f18 <HAL_GPIO_Init>
}
 8001f34:	bf00      	nop
 8001f36:	3730      	adds	r7, #48	; 0x30
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40000400 	.word	0x40000400
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40000800 	.word	0x40000800
 8001f48:	48000400 	.word	0x48000400

08001f4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08a      	sub	sp, #40	; 0x28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a32      	ldr	r2, [pc, #200]	; (8002034 <HAL_TIM_MspPostInit+0xe8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d11e      	bne.n	8001fac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6e:	4b32      	ldr	r3, [pc, #200]	; (8002038 <HAL_TIM_MspPostInit+0xec>)
 8001f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f72:	4a31      	ldr	r2, [pc, #196]	; (8002038 <HAL_TIM_MspPostInit+0xec>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f7a:	4b2f      	ldr	r3, [pc, #188]	; (8002038 <HAL_TIM_MspPostInit+0xec>)
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f94:	2300      	movs	r3, #0
 8001f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fa6:	f001 ffb7 	bl	8003f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001faa:	e03f      	b.n	800202c <HAL_TIM_MspPostInit+0xe0>
  else if(htim->Instance==TIM2)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb4:	d13a      	bne.n	800202c <HAL_TIM_MspPostInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb6:	4b20      	ldr	r3, [pc, #128]	; (8002038 <HAL_TIM_MspPostInit+0xec>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fba:	4a1f      	ldr	r2, [pc, #124]	; (8002038 <HAL_TIM_MspPostInit+0xec>)
 8001fbc:	f043 0302 	orr.w	r3, r3, #2
 8001fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc2:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <HAL_TIM_MspPostInit+0xec>)
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fce:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <HAL_TIM_MspPostInit+0xec>)
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd2:	4a19      	ldr	r2, [pc, #100]	; (8002038 <HAL_TIM_MspPostInit+0xec>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fda:	4b17      	ldr	r3, [pc, #92]	; (8002038 <HAL_TIM_MspPostInit+0xec>)
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	60bb      	str	r3, [r7, #8]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOT1_Pin;
 8001fe6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fec:	2302      	movs	r3, #2
 8001fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOT1_GPIO_Port, &GPIO_InitStruct);
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	4619      	mov	r1, r3
 8002002:	480e      	ldr	r0, [pc, #56]	; (800203c <HAL_TIM_MspPostInit+0xf0>)
 8002004:	f001 ff88 	bl	8003f18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOT2_Pin;
 8002008:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800200c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200e:	2302      	movs	r3, #2
 8002010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002016:	2300      	movs	r3, #0
 8002018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800201a:	2301      	movs	r3, #1
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOT2_GPIO_Port, &GPIO_InitStruct);
 800201e:	f107 0314 	add.w	r3, r7, #20
 8002022:	4619      	mov	r1, r3
 8002024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002028:	f001 ff76 	bl	8003f18 <HAL_GPIO_Init>
}
 800202c:	bf00      	nop
 800202e:	3728      	adds	r7, #40	; 0x28
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40012c00 	.word	0x40012c00
 8002038:	40021000 	.word	0x40021000
 800203c:	48000400 	.word	0x48000400

08002040 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b0ac      	sub	sp, #176	; 0xb0
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	2288      	movs	r2, #136	; 0x88
 800205e:	2100      	movs	r1, #0
 8002060:	4618      	mov	r0, r3
 8002062:	f007 f971 	bl	8009348 <memset>
  if(huart->Instance==USART2)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a21      	ldr	r2, [pc, #132]	; (80020f0 <HAL_UART_MspInit+0xb0>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d13b      	bne.n	80020e8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002070:	2302      	movs	r3, #2
 8002072:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002074:	2300      	movs	r3, #0
 8002076:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	4618      	mov	r0, r3
 800207e:	f002 ff89 	bl	8004f94 <HAL_RCCEx_PeriphCLKConfig>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002088:	f7ff fdd6 	bl	8001c38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800208c:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <HAL_UART_MspInit+0xb4>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	4a18      	ldr	r2, [pc, #96]	; (80020f4 <HAL_UART_MspInit+0xb4>)
 8002092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002096:	6593      	str	r3, [r2, #88]	; 0x58
 8002098:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <HAL_UART_MspInit+0xb4>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <HAL_UART_MspInit+0xb4>)
 80020a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a8:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <HAL_UART_MspInit+0xb4>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020b0:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <HAL_UART_MspInit+0xb4>)
 80020b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020bc:	230c      	movs	r3, #12
 80020be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c2:	2302      	movs	r3, #2
 80020c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ce:	2303      	movs	r3, #3
 80020d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020d4:	2307      	movs	r3, #7
 80020d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020de:	4619      	mov	r1, r3
 80020e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e4:	f001 ff18 	bl	8003f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020e8:	bf00      	nop
 80020ea:	37b0      	adds	r7, #176	; 0xb0
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40004400 	.word	0x40004400
 80020f4:	40021000 	.word	0x40021000

080020f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020fc:	e7fe      	b.n	80020fc <NMI_Handler+0x4>

080020fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020fe:	b480      	push	{r7}
 8002100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002102:	e7fe      	b.n	8002102 <HardFault_Handler+0x4>

08002104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002108:	e7fe      	b.n	8002108 <MemManage_Handler+0x4>

0800210a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800210e:	e7fe      	b.n	800210e <BusFault_Handler+0x4>

08002110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002114:	e7fe      	b.n	8002114 <UsageFault_Handler+0x4>

08002116 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002144:	f000 f986 	bl	8002454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}

0800214c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002150:	4802      	ldr	r0, [pc, #8]	; (800215c <ADC1_2_IRQHandler+0x10>)
 8002152:	f000 fe21 	bl	8002d98 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200001f0 	.word	0x200001f0

08002160 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002164:	4802      	ldr	r0, [pc, #8]	; (8002170 <TIM1_CC_IRQHandler+0x10>)
 8002166:	f003 ffa3 	bl	80060b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000254 	.word	0x20000254

08002174 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002178:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800217c:	f002 f88e 	bl	800429c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002180:	bf00      	nop
 8002182:	bd80      	pop	{r7, pc}

08002184 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002188:	4802      	ldr	r0, [pc, #8]	; (8002194 <TIM6_DAC_IRQHandler+0x10>)
 800218a:	f003 ff91 	bl	80060b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20000384 	.word	0x20000384

08002198 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return 1;
 800219c:	2301      	movs	r3, #1
}
 800219e:	4618      	mov	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <_kill>:

int _kill(int pid, int sig)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021b2:	f007 f91b 	bl	80093ec <__errno>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2216      	movs	r2, #22
 80021ba:	601a      	str	r2, [r3, #0]
  return -1;
 80021bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <_exit>:

void _exit (int status)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021d0:	f04f 31ff 	mov.w	r1, #4294967295
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff ffe7 	bl	80021a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021da:	e7fe      	b.n	80021da <_exit+0x12>

080021dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	e00a      	b.n	8002204 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021ee:	f3af 8000 	nop.w
 80021f2:	4601      	mov	r1, r0
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	1c5a      	adds	r2, r3, #1
 80021f8:	60ba      	str	r2, [r7, #8]
 80021fa:	b2ca      	uxtb	r2, r1
 80021fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	3301      	adds	r3, #1
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	429a      	cmp	r2, r3
 800220a:	dbf0      	blt.n	80021ee <_read+0x12>
  }

  return len;
 800220c:	687b      	ldr	r3, [r7, #4]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b086      	sub	sp, #24
 800221a:	af00      	add	r7, sp, #0
 800221c:	60f8      	str	r0, [r7, #12]
 800221e:	60b9      	str	r1, [r7, #8]
 8002220:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	e009      	b.n	800223c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	60ba      	str	r2, [r7, #8]
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	3301      	adds	r3, #1
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	429a      	cmp	r2, r3
 8002242:	dbf1      	blt.n	8002228 <_write+0x12>
  }
  return len;
 8002244:	687b      	ldr	r3, [r7, #4]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <_close>:

int _close(int file)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002256:	f04f 33ff 	mov.w	r3, #4294967295
}
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002276:	605a      	str	r2, [r3, #4]
  return 0;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <_isatty>:

int _isatty(int file)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800228e:	2301      	movs	r3, #1
}
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
	...

080022b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022c0:	4a14      	ldr	r2, [pc, #80]	; (8002314 <_sbrk+0x5c>)
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <_sbrk+0x60>)
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022cc:	4b13      	ldr	r3, [pc, #76]	; (800231c <_sbrk+0x64>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d102      	bne.n	80022da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <_sbrk+0x64>)
 80022d6:	4a12      	ldr	r2, [pc, #72]	; (8002320 <_sbrk+0x68>)
 80022d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022da:	4b10      	ldr	r3, [pc, #64]	; (800231c <_sbrk+0x64>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d207      	bcs.n	80022f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022e8:	f007 f880 	bl	80093ec <__errno>
 80022ec:	4603      	mov	r3, r0
 80022ee:	220c      	movs	r2, #12
 80022f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022f2:	f04f 33ff 	mov.w	r3, #4294967295
 80022f6:	e009      	b.n	800230c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <_sbrk+0x64>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022fe:	4b07      	ldr	r3, [pc, #28]	; (800231c <_sbrk+0x64>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4413      	add	r3, r2
 8002306:	4a05      	ldr	r2, [pc, #20]	; (800231c <_sbrk+0x64>)
 8002308:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800230a:	68fb      	ldr	r3, [r7, #12]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20018000 	.word	0x20018000
 8002318:	00000400 	.word	0x00000400
 800231c:	2000048c 	.word	0x2000048c
 8002320:	200005e0 	.word	0x200005e0

08002324 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <SystemInit+0x20>)
 800232a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232e:	4a05      	ldr	r2, [pc, #20]	; (8002344 <SystemInit+0x20>)
 8002330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002348:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002380 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800234c:	f7ff ffea 	bl	8002324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002350:	480c      	ldr	r0, [pc, #48]	; (8002384 <LoopForever+0x6>)
  ldr r1, =_edata
 8002352:	490d      	ldr	r1, [pc, #52]	; (8002388 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002354:	4a0d      	ldr	r2, [pc, #52]	; (800238c <LoopForever+0xe>)
  movs r3, #0
 8002356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002358:	e002      	b.n	8002360 <LoopCopyDataInit>

0800235a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800235a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800235c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800235e:	3304      	adds	r3, #4

08002360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002364:	d3f9      	bcc.n	800235a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002366:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002368:	4c0a      	ldr	r4, [pc, #40]	; (8002394 <LoopForever+0x16>)
  movs r3, #0
 800236a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800236c:	e001      	b.n	8002372 <LoopFillZerobss>

0800236e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800236e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002370:	3204      	adds	r2, #4

08002372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002374:	d3fb      	bcc.n	800236e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002376:	f007 f83f 	bl	80093f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800237a:	f7fe fe39 	bl	8000ff0 <main>

0800237e <LoopForever>:

LoopForever:
    b LoopForever
 800237e:	e7fe      	b.n	800237e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002380:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002388:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800238c:	0800cf90 	.word	0x0800cf90
  ldr r2, =_sbss
 8002390:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002394:	200005e0 	.word	0x200005e0

08002398 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002398:	e7fe      	b.n	8002398 <ADC3_IRQHandler>
	...

0800239c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023a6:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <HAL_Init+0x3c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a0b      	ldr	r2, [pc, #44]	; (80023d8 <HAL_Init+0x3c>)
 80023ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b2:	2003      	movs	r0, #3
 80023b4:	f001 fd6e 	bl	8003e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023b8:	2000      	movs	r0, #0
 80023ba:	f000 f80f 	bl	80023dc <HAL_InitTick>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d002      	beq.n	80023ca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	71fb      	strb	r3, [r7, #7]
 80023c8:	e001      	b.n	80023ce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023ca:	f7ff fc3b 	bl	8001c44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023ce:	79fb      	ldrb	r3, [r7, #7]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40022000 	.word	0x40022000

080023dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80023e8:	4b17      	ldr	r3, [pc, #92]	; (8002448 <HAL_InitTick+0x6c>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d023      	beq.n	8002438 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023f0:	4b16      	ldr	r3, [pc, #88]	; (800244c <HAL_InitTick+0x70>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4b14      	ldr	r3, [pc, #80]	; (8002448 <HAL_InitTick+0x6c>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	4619      	mov	r1, r3
 80023fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002402:	fbb2 f3f3 	udiv	r3, r2, r3
 8002406:	4618      	mov	r0, r3
 8002408:	f001 fd79 	bl	8003efe <HAL_SYSTICK_Config>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10f      	bne.n	8002432 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b0f      	cmp	r3, #15
 8002416:	d809      	bhi.n	800242c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002418:	2200      	movs	r2, #0
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	f04f 30ff 	mov.w	r0, #4294967295
 8002420:	f001 fd43 	bl	8003eaa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002424:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <HAL_InitTick+0x74>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	e007      	b.n	800243c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	73fb      	strb	r3, [r7, #15]
 8002430:	e004      	b.n	800243c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	73fb      	strb	r3, [r7, #15]
 8002436:	e001      	b.n	800243c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800243c:	7bfb      	ldrb	r3, [r7, #15]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000008 	.word	0x20000008
 800244c:	20000000 	.word	0x20000000
 8002450:	20000004 	.word	0x20000004

08002454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_IncTick+0x20>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	461a      	mov	r2, r3
 800245e:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_IncTick+0x24>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4413      	add	r3, r2
 8002464:	4a04      	ldr	r2, [pc, #16]	; (8002478 <HAL_IncTick+0x24>)
 8002466:	6013      	str	r3, [r2, #0]
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	20000008 	.word	0x20000008
 8002478:	20000490 	.word	0x20000490

0800247c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return uwTick;
 8002480:	4b03      	ldr	r3, [pc, #12]	; (8002490 <HAL_GetTick+0x14>)
 8002482:	681b      	ldr	r3, [r3, #0]
}
 8002484:	4618      	mov	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	20000490 	.word	0x20000490

08002494 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	431a      	orrs	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	609a      	str	r2, [r3, #8]
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	609a      	str	r2, [r3, #8]
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b087      	sub	sp, #28
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
 8002508:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	3360      	adds	r3, #96	; 0x60
 800250e:	461a      	mov	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	4b08      	ldr	r3, [pc, #32]	; (8002540 <LL_ADC_SetOffset+0x44>)
 800251e:	4013      	ands	r3, r2
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	4313      	orrs	r3, r2
 800252c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002534:	bf00      	nop
 8002536:	371c      	adds	r7, #28
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	03fff000 	.word	0x03fff000

08002544 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3360      	adds	r3, #96	; 0x60
 8002552:	461a      	mov	r2, r3
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002564:	4618      	mov	r0, r3
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002570:	b480      	push	{r7}
 8002572:	b087      	sub	sp, #28
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	3360      	adds	r3, #96	; 0x60
 8002580:	461a      	mov	r2, r3
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	431a      	orrs	r2, r3
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800259a:	bf00      	nop
 800259c:	371c      	adds	r7, #28
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	3330      	adds	r3, #48	; 0x30
 80025dc:	461a      	mov	r2, r3
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	0a1b      	lsrs	r3, r3, #8
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	4413      	add	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	f003 031f 	and.w	r3, r3, #31
 80025f6:	211f      	movs	r1, #31
 80025f8:	fa01 f303 	lsl.w	r3, r1, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	401a      	ands	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	0e9b      	lsrs	r3, r3, #26
 8002604:	f003 011f 	and.w	r1, r3, #31
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	f003 031f 	and.w	r3, r3, #31
 800260e:	fa01 f303 	lsl.w	r3, r1, r3
 8002612:	431a      	orrs	r2, r3
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002618:	bf00      	nop
 800261a:	371c      	adds	r7, #28
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002630:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800264a:	b480      	push	{r7}
 800264c:	b087      	sub	sp, #28
 800264e:	af00      	add	r7, sp, #0
 8002650:	60f8      	str	r0, [r7, #12]
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3314      	adds	r3, #20
 800265a:	461a      	mov	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	0e5b      	lsrs	r3, r3, #25
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	4413      	add	r3, r2
 8002668:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	0d1b      	lsrs	r3, r3, #20
 8002672:	f003 031f 	and.w	r3, r3, #31
 8002676:	2107      	movs	r1, #7
 8002678:	fa01 f303 	lsl.w	r3, r1, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	401a      	ands	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	0d1b      	lsrs	r3, r3, #20
 8002684:	f003 031f 	and.w	r3, r3, #31
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	fa01 f303 	lsl.w	r3, r1, r3
 800268e:	431a      	orrs	r2, r3
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002694:	bf00      	nop
 8002696:	371c      	adds	r7, #28
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b8:	43db      	mvns	r3, r3
 80026ba:	401a      	ands	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f003 0318 	and.w	r3, r3, #24
 80026c2:	4908      	ldr	r1, [pc, #32]	; (80026e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80026c4:	40d9      	lsrs	r1, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	400b      	ands	r3, r1
 80026ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ce:	431a      	orrs	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80026d6:	bf00      	nop
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	0007ffff 	.word	0x0007ffff

080026e8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 031f 	and.w	r3, r3, #31
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002730:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6093      	str	r3, [r2, #8]
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002758:	d101      	bne.n	800275e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800277c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002780:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027a8:	d101      	bne.n	80027ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027d0:	f043 0201 	orr.w	r2, r3, #1
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <LL_ADC_IsEnabled+0x18>
 80027f8:	2301      	movs	r3, #1
 80027fa:	e000      	b.n	80027fe <LL_ADC_IsEnabled+0x1a>
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800281a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800281e:	f043 0204 	orr.w	r2, r3, #4
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	2b04      	cmp	r3, #4
 8002844:	d101      	bne.n	800284a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b08      	cmp	r3, #8
 800286a:	d101      	bne.n	8002870 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800286c:	2301      	movs	r3, #1
 800286e:	e000      	b.n	8002872 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
	...

08002880 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b089      	sub	sp, #36	; 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e130      	b.n	8002afc <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d109      	bne.n	80028bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7ff f9ef 	bl	8001c8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff ff3f 	bl	8002744 <LL_ADC_IsDeepPowerDownEnabled>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d004      	beq.n	80028d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff25 	bl	8002720 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff ff5a 	bl	8002794 <LL_ADC_IsInternalRegulatorEnabled>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d115      	bne.n	8002912 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff ff3e 	bl	800276c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028f0:	4b84      	ldr	r3, [pc, #528]	; (8002b04 <HAL_ADC_Init+0x284>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	099b      	lsrs	r3, r3, #6
 80028f6:	4a84      	ldr	r2, [pc, #528]	; (8002b08 <HAL_ADC_Init+0x288>)
 80028f8:	fba2 2303 	umull	r2, r3, r2, r3
 80028fc:	099b      	lsrs	r3, r3, #6
 80028fe:	3301      	adds	r3, #1
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002904:	e002      	b.n	800290c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	3b01      	subs	r3, #1
 800290a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f9      	bne.n	8002906 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff ff3c 	bl	8002794 <LL_ADC_IsInternalRegulatorEnabled>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10d      	bne.n	800293e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002926:	f043 0210 	orr.w	r2, r3, #16
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	f043 0201 	orr.w	r2, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff ff75 	bl	8002832 <LL_ADC_REG_IsConversionOngoing>
 8002948:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294e:	f003 0310 	and.w	r3, r3, #16
 8002952:	2b00      	cmp	r3, #0
 8002954:	f040 80c9 	bne.w	8002aea <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	2b00      	cmp	r3, #0
 800295c:	f040 80c5 	bne.w	8002aea <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002964:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002968:	f043 0202 	orr.w	r2, r3, #2
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ff35 	bl	80027e4 <LL_ADC_IsEnabled>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d115      	bne.n	80029ac <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002980:	4862      	ldr	r0, [pc, #392]	; (8002b0c <HAL_ADC_Init+0x28c>)
 8002982:	f7ff ff2f 	bl	80027e4 <LL_ADC_IsEnabled>
 8002986:	4604      	mov	r4, r0
 8002988:	4861      	ldr	r0, [pc, #388]	; (8002b10 <HAL_ADC_Init+0x290>)
 800298a:	f7ff ff2b 	bl	80027e4 <LL_ADC_IsEnabled>
 800298e:	4603      	mov	r3, r0
 8002990:	431c      	orrs	r4, r3
 8002992:	4860      	ldr	r0, [pc, #384]	; (8002b14 <HAL_ADC_Init+0x294>)
 8002994:	f7ff ff26 	bl	80027e4 <LL_ADC_IsEnabled>
 8002998:	4603      	mov	r3, r0
 800299a:	4323      	orrs	r3, r4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d105      	bne.n	80029ac <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	4619      	mov	r1, r3
 80029a6:	485c      	ldr	r0, [pc, #368]	; (8002b18 <HAL_ADC_Init+0x298>)
 80029a8:	f7ff fd74 	bl	8002494 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	7e5b      	ldrb	r3, [r3, #25]
 80029b0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029b6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80029bc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80029c2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029ca:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d106      	bne.n	80029e8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	3b01      	subs	r3, #1
 80029e0:	045b      	lsls	r3, r3, #17
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d009      	beq.n	8002a04 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	4b44      	ldr	r3, [pc, #272]	; (8002b1c <HAL_ADC_Init+0x29c>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	69b9      	ldr	r1, [r7, #24]
 8002a14:	430b      	orrs	r3, r1
 8002a16:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff ff1b 	bl	8002858 <LL_ADC_INJ_IsConversionOngoing>
 8002a22:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d13d      	bne.n	8002aa6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d13a      	bne.n	8002aa6 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a34:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a3c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a4c:	f023 0302 	bic.w	r3, r3, #2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	69b9      	ldr	r1, [r7, #24]
 8002a56:	430b      	orrs	r3, r1
 8002a58:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d118      	bne.n	8002a96 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002a6e:	f023 0304 	bic.w	r3, r3, #4
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a7a:	4311      	orrs	r1, r2
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a80:	4311      	orrs	r1, r2
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a86:	430a      	orrs	r2, r1
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	611a      	str	r2, [r3, #16]
 8002a94:	e007      	b.n	8002aa6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0201 	bic.w	r2, r2, #1
 8002aa4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d10c      	bne.n	8002ac8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	f023 010f 	bic.w	r1, r3, #15
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	1e5a      	subs	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ac6:	e007      	b.n	8002ad8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 020f 	bic.w	r2, r2, #15
 8002ad6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002adc:	f023 0303 	bic.w	r3, r3, #3
 8002ae0:	f043 0201 	orr.w	r2, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	655a      	str	r2, [r3, #84]	; 0x54
 8002ae8:	e007      	b.n	8002afa <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aee:	f043 0210 	orr.w	r2, r3, #16
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002afa:	7ffb      	ldrb	r3, [r7, #31]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3724      	adds	r7, #36	; 0x24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd90      	pop	{r4, r7, pc}
 8002b04:	20000000 	.word	0x20000000
 8002b08:	053e2d63 	.word	0x053e2d63
 8002b0c:	50040000 	.word	0x50040000
 8002b10:	50040100 	.word	0x50040100
 8002b14:	50040200 	.word	0x50040200
 8002b18:	50040300 	.word	0x50040300
 8002b1c:	fff0c007 	.word	0xfff0c007

08002b20 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b28:	4891      	ldr	r0, [pc, #580]	; (8002d70 <HAL_ADC_Start_IT+0x250>)
 8002b2a:	f7ff fddd 	bl	80026e8 <LL_ADC_GetMultimode>
 8002b2e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff fe7c 	bl	8002832 <LL_ADC_REG_IsConversionOngoing>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f040 8110 	bne.w	8002d62 <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_ADC_Start_IT+0x30>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e10b      	b.n	8002d68 <HAL_ADC_Start_IT+0x248>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 ff3d 	bl	80039d8 <ADC_Enable>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b62:	7dfb      	ldrb	r3, [r7, #23]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f040 80f7 	bne.w	8002d58 <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b72:	f023 0301 	bic.w	r3, r3, #1
 8002b76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a7c      	ldr	r2, [pc, #496]	; (8002d74 <HAL_ADC_Start_IT+0x254>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d002      	beq.n	8002b8e <HAL_ADC_Start_IT+0x6e>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	e000      	b.n	8002b90 <HAL_ADC_Start_IT+0x70>
 8002b8e:	4b7a      	ldr	r3, [pc, #488]	; (8002d78 <HAL_ADC_Start_IT+0x258>)
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d002      	beq.n	8002b9e <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d105      	bne.n	8002baa <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d006      	beq.n	8002bc4 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bba:	f023 0206 	bic.w	r2, r3, #6
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	659a      	str	r2, [r3, #88]	; 0x58
 8002bc2:	e002      	b.n	8002bca <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	221c      	movs	r2, #28
 8002bd0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 021c 	bic.w	r2, r2, #28
 8002be8:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d108      	bne.n	8002c04 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 0208 	orr.w	r2, r2, #8
 8002c00:	605a      	str	r2, [r3, #4]
          break;
 8002c02:	e008      	b.n	8002c16 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0204 	orr.w	r2, r2, #4
 8002c12:	605a      	str	r2, [r3, #4]
          break;
 8002c14:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d107      	bne.n	8002c2e <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0210 	orr.w	r2, r2, #16
 8002c2c:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a50      	ldr	r2, [pc, #320]	; (8002d74 <HAL_ADC_Start_IT+0x254>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d002      	beq.n	8002c3e <HAL_ADC_Start_IT+0x11e>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	e000      	b.n	8002c40 <HAL_ADC_Start_IT+0x120>
 8002c3e:	4b4e      	ldr	r3, [pc, #312]	; (8002d78 <HAL_ADC_Start_IT+0x258>)
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6812      	ldr	r2, [r2, #0]
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d008      	beq.n	8002c5a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d005      	beq.n	8002c5a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	2b05      	cmp	r3, #5
 8002c52:	d002      	beq.n	8002c5a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	2b09      	cmp	r3, #9
 8002c58:	d13a      	bne.n	8002cd0 <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d02d      	beq.n	8002cc4 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d110      	bne.n	8002ca2 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0220 	bic.w	r2, r2, #32
 8002c8e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c9e:	605a      	str	r2, [r3, #4]
              break;
 8002ca0:	e010      	b.n	8002cc4 <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cb0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f042 0220 	orr.w	r2, r2, #32
 8002cc0:	605a      	str	r2, [r3, #4]
              break;
 8002cc2:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff fd9e 	bl	800280a <LL_ADC_REG_StartConversion>
 8002cce:	e04a      	b.n	8002d66 <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a24      	ldr	r2, [pc, #144]	; (8002d74 <HAL_ADC_Start_IT+0x254>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d002      	beq.n	8002cec <HAL_ADC_Start_IT+0x1cc>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	e000      	b.n	8002cee <HAL_ADC_Start_IT+0x1ce>
 8002cec:	4b22      	ldr	r3, [pc, #136]	; (8002d78 <HAL_ADC_Start_IT+0x258>)
 8002cee:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d034      	beq.n	8002d66 <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d04:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d110      	bne.n	8002d36 <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0220 	bic.w	r2, r2, #32
 8002d22:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d32:	605a      	str	r2, [r3, #4]
              break;
 8002d34:	e017      	b.n	8002d66 <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d44:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f042 0220 	orr.w	r2, r2, #32
 8002d54:	605a      	str	r2, [r3, #4]
              break;
 8002d56:	e006      	b.n	8002d66 <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002d60:	e001      	b.n	8002d66 <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d62:	2302      	movs	r3, #2
 8002d64:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	50040300 	.word	0x50040300
 8002d74:	50040100 	.word	0x50040100
 8002d78:	50040000 	.word	0x50040000

08002d7c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08a      	sub	sp, #40	; 0x28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002da0:	2300      	movs	r3, #0
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002db4:	4882      	ldr	r0, [pc, #520]	; (8002fc0 <HAL_ADC_IRQHandler+0x228>)
 8002db6:	f7ff fc97 	bl	80026e8 <LL_ADC_GetMultimode>
 8002dba:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d017      	beq.n	8002df6 <HAL_ADC_IRQHandler+0x5e>
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d012      	beq.n	8002df6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd4:	f003 0310 	and.w	r3, r3, #16
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d105      	bne.n	8002de8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 fec9 	bl	8003b80 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2202      	movs	r2, #2
 8002df4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d004      	beq.n	8002e0a <HAL_ADC_IRQHandler+0x72>
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10a      	bne.n	8002e20 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 8083 	beq.w	8002f1c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	f003 0308 	and.w	r3, r3, #8
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d07d      	beq.n	8002f1c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d105      	bne.n	8002e38 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e30:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fbb2 	bl	80025a6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d062      	beq.n	8002f0e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a5d      	ldr	r2, [pc, #372]	; (8002fc4 <HAL_ADC_IRQHandler+0x22c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d002      	beq.n	8002e58 <HAL_ADC_IRQHandler+0xc0>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	e000      	b.n	8002e5a <HAL_ADC_IRQHandler+0xc2>
 8002e58:	4b5b      	ldr	r3, [pc, #364]	; (8002fc8 <HAL_ADC_IRQHandler+0x230>)
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6812      	ldr	r2, [r2, #0]
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d008      	beq.n	8002e74 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	2b05      	cmp	r3, #5
 8002e6c:	d002      	beq.n	8002e74 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2b09      	cmp	r3, #9
 8002e72:	d104      	bne.n	8002e7e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	623b      	str	r3, [r7, #32]
 8002e7c:	e00c      	b.n	8002e98 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a50      	ldr	r2, [pc, #320]	; (8002fc4 <HAL_ADC_IRQHandler+0x22c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d002      	beq.n	8002e8e <HAL_ADC_IRQHandler+0xf6>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	e000      	b.n	8002e90 <HAL_ADC_IRQHandler+0xf8>
 8002e8e:	4b4e      	ldr	r3, [pc, #312]	; (8002fc8 <HAL_ADC_IRQHandler+0x230>)
 8002e90:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d135      	bne.n	8002f0e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d12e      	bne.n	8002f0e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff fcbc 	bl	8002832 <LL_ADC_REG_IsConversionOngoing>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d11a      	bne.n	8002ef6 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 020c 	bic.w	r2, r2, #12
 8002ece:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d112      	bne.n	8002f0e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eec:	f043 0201 	orr.w	r2, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	655a      	str	r2, [r3, #84]	; 0x54
 8002ef4:	e00b      	b.n	8002f0e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efa:	f043 0210 	orr.w	r2, r3, #16
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f06:	f043 0201 	orr.w	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7fe fe7c 	bl	8001c0c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	220c      	movs	r2, #12
 8002f1a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f003 0320 	and.w	r3, r3, #32
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d004      	beq.n	8002f30 <HAL_ADC_IRQHandler+0x198>
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	f003 0320 	and.w	r3, r3, #32
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10b      	bne.n	8002f48 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 809f 	beq.w	800307a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 8099 	beq.w	800307a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d105      	bne.n	8002f60 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f58:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff fb5d 	bl	8002624 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002f6a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fb18 	bl	80025a6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f76:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a11      	ldr	r2, [pc, #68]	; (8002fc4 <HAL_ADC_IRQHandler+0x22c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d002      	beq.n	8002f88 <HAL_ADC_IRQHandler+0x1f0>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	e000      	b.n	8002f8a <HAL_ADC_IRQHandler+0x1f2>
 8002f88:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <HAL_ADC_IRQHandler+0x230>)
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6812      	ldr	r2, [r2, #0]
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d008      	beq.n	8002fa4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	2b06      	cmp	r3, #6
 8002f9c:	d002      	beq.n	8002fa4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b07      	cmp	r3, #7
 8002fa2:	d104      	bne.n	8002fae <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	623b      	str	r3, [r7, #32]
 8002fac:	e013      	b.n	8002fd6 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a04      	ldr	r2, [pc, #16]	; (8002fc4 <HAL_ADC_IRQHandler+0x22c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d009      	beq.n	8002fcc <HAL_ADC_IRQHandler+0x234>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	e007      	b.n	8002fce <HAL_ADC_IRQHandler+0x236>
 8002fbe:	bf00      	nop
 8002fc0:	50040300 	.word	0x50040300
 8002fc4:	50040100 	.word	0x50040100
 8002fc8:	50040000 	.word	0x50040000
 8002fcc:	4b7d      	ldr	r3, [pc, #500]	; (80031c4 <HAL_ADC_IRQHandler+0x42c>)
 8002fce:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d047      	beq.n	800306c <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d007      	beq.n	8002ff6 <HAL_ADC_IRQHandler+0x25e>
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d03f      	beq.n	800306c <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d13a      	bne.n	800306c <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003000:	2b40      	cmp	r3, #64	; 0x40
 8003002:	d133      	bne.n	800306c <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d12e      	bne.n	800306c <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff fc20 	bl	8002858 <LL_ADC_INJ_IsConversionOngoing>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d11a      	bne.n	8003054 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800302c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003032:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003042:	2b00      	cmp	r3, #0
 8003044:	d112      	bne.n	800306c <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304a:	f043 0201 	orr.w	r2, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	655a      	str	r2, [r3, #84]	; 0x54
 8003052:	e00b      	b.n	800306c <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003058:	f043 0210 	orr.w	r2, r3, #16
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003064:	f043 0201 	orr.w	r2, r3, #1
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 fd5f 	bl	8003b30 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2260      	movs	r2, #96	; 0x60
 8003078:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003080:	2b00      	cmp	r3, #0
 8003082:	d011      	beq.n	80030a8 <HAL_ADC_IRQHandler+0x310>
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00c      	beq.n	80030a8 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003092:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f896 	bl	80031cc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2280      	movs	r2, #128	; 0x80
 80030a6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d012      	beq.n	80030d8 <HAL_ADC_IRQHandler+0x340>
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00d      	beq.n	80030d8 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fd45 	bl	8003b58 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d012      	beq.n	8003108 <HAL_ADC_IRQHandler+0x370>
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00d      	beq.n	8003108 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 fd37 	bl	8003b6c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003106:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f003 0310 	and.w	r3, r3, #16
 800310e:	2b00      	cmp	r3, #0
 8003110:	d036      	beq.n	8003180 <HAL_ADC_IRQHandler+0x3e8>
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	f003 0310 	and.w	r3, r3, #16
 8003118:	2b00      	cmp	r3, #0
 800311a:	d031      	beq.n	8003180 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003120:	2b00      	cmp	r3, #0
 8003122:	d102      	bne.n	800312a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8003124:	2301      	movs	r3, #1
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
 8003128:	e014      	b.n	8003154 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d008      	beq.n	8003142 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003130:	4825      	ldr	r0, [pc, #148]	; (80031c8 <HAL_ADC_IRQHandler+0x430>)
 8003132:	f7ff fae7 	bl	8002704 <LL_ADC_GetMultiDMATransfer>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00b      	beq.n	8003154 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800313c:	2301      	movs	r3, #1
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
 8003140:	e008      	b.n	8003154 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003150:	2301      	movs	r3, #1
 8003152:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	2b01      	cmp	r3, #1
 8003158:	d10e      	bne.n	8003178 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316a:	f043 0202 	orr.w	r2, r3, #2
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f834 	bl	80031e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2210      	movs	r2, #16
 800317e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003186:	2b00      	cmp	r3, #0
 8003188:	d018      	beq.n	80031bc <HAL_ADC_IRQHandler+0x424>
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003190:	2b00      	cmp	r3, #0
 8003192:	d013      	beq.n	80031bc <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003198:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a4:	f043 0208 	orr.w	r2, r3, #8
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031b4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 fcc4 	bl	8003b44 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80031bc:	bf00      	nop
 80031be:	3728      	adds	r7, #40	; 0x28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	50040000 	.word	0x50040000
 80031c8:	50040300 	.word	0x50040300

080031cc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b0b6      	sub	sp, #216	; 0xd8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003204:	2300      	movs	r3, #0
 8003206:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x22>
 8003212:	2302      	movs	r3, #2
 8003214:	e3c9      	b.n	80039aa <HAL_ADC_ConfigChannel+0x7b6>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fb05 	bl	8002832 <LL_ADC_REG_IsConversionOngoing>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	f040 83aa 	bne.w	8003984 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b05      	cmp	r3, #5
 800323e:	d824      	bhi.n	800328a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	3b02      	subs	r3, #2
 8003246:	2b03      	cmp	r3, #3
 8003248:	d81b      	bhi.n	8003282 <HAL_ADC_ConfigChannel+0x8e>
 800324a:	a201      	add	r2, pc, #4	; (adr r2, 8003250 <HAL_ADC_ConfigChannel+0x5c>)
 800324c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003250:	08003261 	.word	0x08003261
 8003254:	08003269 	.word	0x08003269
 8003258:	08003271 	.word	0x08003271
 800325c:	08003279 	.word	0x08003279
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003260:	230c      	movs	r3, #12
 8003262:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003266:	e010      	b.n	800328a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003268:	2312      	movs	r3, #18
 800326a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800326e:	e00c      	b.n	800328a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003270:	2318      	movs	r3, #24
 8003272:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003276:	e008      	b.n	800328a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003278:	f44f 7380 	mov.w	r3, #256	; 0x100
 800327c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003280:	e003      	b.n	800328a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003282:	2306      	movs	r3, #6
 8003284:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003288:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6818      	ldr	r0, [r3, #0]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003298:	f7ff f998 	bl	80025cc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff fac6 	bl	8002832 <LL_ADC_REG_IsConversionOngoing>
 80032a6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fad2 	bl	8002858 <LL_ADC_INJ_IsConversionOngoing>
 80032b4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f040 81a4 	bne.w	800360a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f040 819f 	bne.w	800360a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6818      	ldr	r0, [r3, #0]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	6819      	ldr	r1, [r3, #0]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	461a      	mov	r2, r3
 80032da:	f7ff f9b6 	bl	800264a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	695a      	ldr	r2, [r3, #20]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	08db      	lsrs	r3, r3, #3
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d00a      	beq.n	8003316 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	6919      	ldr	r1, [r3, #16]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003310:	f7ff f8f4 	bl	80024fc <LL_ADC_SetOffset>
 8003314:	e179      	b.n	800360a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2100      	movs	r1, #0
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff f911 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8003322:	4603      	mov	r3, r0
 8003324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10a      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x14e>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2100      	movs	r1, #0
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff f906 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8003338:	4603      	mov	r3, r0
 800333a:	0e9b      	lsrs	r3, r3, #26
 800333c:	f003 021f 	and.w	r2, r3, #31
 8003340:	e01e      	b.n	8003380 <HAL_ADC_ConfigChannel+0x18c>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2100      	movs	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff f8fb 	bl	8002544 <LL_ADC_GetOffsetChannel>
 800334e:	4603      	mov	r3, r0
 8003350:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003354:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003358:	fa93 f3a3 	rbit	r3, r3
 800335c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003360:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003364:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003368:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003370:	2320      	movs	r3, #32
 8003372:	e004      	b.n	800337e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003374:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003378:	fab3 f383 	clz	r3, r3
 800337c:	b2db      	uxtb	r3, r3
 800337e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003388:	2b00      	cmp	r3, #0
 800338a:	d105      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x1a4>
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	0e9b      	lsrs	r3, r3, #26
 8003392:	f003 031f 	and.w	r3, r3, #31
 8003396:	e018      	b.n	80033ca <HAL_ADC_ConfigChannel+0x1d6>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033a4:	fa93 f3a3 	rbit	r3, r3
 80033a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80033ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80033b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80033bc:	2320      	movs	r3, #32
 80033be:	e004      	b.n	80033ca <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80033c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80033c4:	fab3 f383 	clz	r3, r3
 80033c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d106      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2200      	movs	r2, #0
 80033d4:	2100      	movs	r1, #0
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff f8ca 	bl	8002570 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2101      	movs	r1, #1
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff f8ae 	bl	8002544 <LL_ADC_GetOffsetChannel>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10a      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x214>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2101      	movs	r1, #1
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff f8a3 	bl	8002544 <LL_ADC_GetOffsetChannel>
 80033fe:	4603      	mov	r3, r0
 8003400:	0e9b      	lsrs	r3, r3, #26
 8003402:	f003 021f 	and.w	r2, r3, #31
 8003406:	e01e      	b.n	8003446 <HAL_ADC_ConfigChannel+0x252>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2101      	movs	r1, #1
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff f898 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8003414:	4603      	mov	r3, r0
 8003416:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800341e:	fa93 f3a3 	rbit	r3, r3
 8003422:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003426:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800342a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800342e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003436:	2320      	movs	r3, #32
 8003438:	e004      	b.n	8003444 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800343a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800343e:	fab3 f383 	clz	r3, r3
 8003442:	b2db      	uxtb	r3, r3
 8003444:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800344e:	2b00      	cmp	r3, #0
 8003450:	d105      	bne.n	800345e <HAL_ADC_ConfigChannel+0x26a>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	0e9b      	lsrs	r3, r3, #26
 8003458:	f003 031f 	and.w	r3, r3, #31
 800345c:	e018      	b.n	8003490 <HAL_ADC_ConfigChannel+0x29c>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003472:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003476:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800347a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003482:	2320      	movs	r3, #32
 8003484:	e004      	b.n	8003490 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003486:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800348a:	fab3 f383 	clz	r3, r3
 800348e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003490:	429a      	cmp	r2, r3
 8003492:	d106      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2200      	movs	r2, #0
 800349a:	2101      	movs	r1, #1
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff f867 	bl	8002570 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2102      	movs	r1, #2
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff f84b 	bl	8002544 <LL_ADC_GetOffsetChannel>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10a      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x2da>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2102      	movs	r1, #2
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff f840 	bl	8002544 <LL_ADC_GetOffsetChannel>
 80034c4:	4603      	mov	r3, r0
 80034c6:	0e9b      	lsrs	r3, r3, #26
 80034c8:	f003 021f 	and.w	r2, r3, #31
 80034cc:	e01e      	b.n	800350c <HAL_ADC_ConfigChannel+0x318>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2102      	movs	r1, #2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff f835 	bl	8002544 <LL_ADC_GetOffsetChannel>
 80034da:	4603      	mov	r3, r0
 80034dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034e4:	fa93 f3a3 	rbit	r3, r3
 80034e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80034ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80034f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80034fc:	2320      	movs	r3, #32
 80034fe:	e004      	b.n	800350a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003500:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003504:	fab3 f383 	clz	r3, r3
 8003508:	b2db      	uxtb	r3, r3
 800350a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003514:	2b00      	cmp	r3, #0
 8003516:	d105      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x330>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	0e9b      	lsrs	r3, r3, #26
 800351e:	f003 031f 	and.w	r3, r3, #31
 8003522:	e014      	b.n	800354e <HAL_ADC_ConfigChannel+0x35a>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800352c:	fa93 f3a3 	rbit	r3, r3
 8003530:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003534:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003538:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003540:	2320      	movs	r3, #32
 8003542:	e004      	b.n	800354e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003544:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003548:	fab3 f383 	clz	r3, r3
 800354c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800354e:	429a      	cmp	r2, r3
 8003550:	d106      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2200      	movs	r2, #0
 8003558:	2102      	movs	r1, #2
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff f808 	bl	8002570 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2103      	movs	r1, #3
 8003566:	4618      	mov	r0, r3
 8003568:	f7fe ffec 	bl	8002544 <LL_ADC_GetOffsetChannel>
 800356c:	4603      	mov	r3, r0
 800356e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10a      	bne.n	800358c <HAL_ADC_ConfigChannel+0x398>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2103      	movs	r1, #3
 800357c:	4618      	mov	r0, r3
 800357e:	f7fe ffe1 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8003582:	4603      	mov	r3, r0
 8003584:	0e9b      	lsrs	r3, r3, #26
 8003586:	f003 021f 	and.w	r2, r3, #31
 800358a:	e017      	b.n	80035bc <HAL_ADC_ConfigChannel+0x3c8>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2103      	movs	r1, #3
 8003592:	4618      	mov	r0, r3
 8003594:	f7fe ffd6 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8003598:	4603      	mov	r3, r0
 800359a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800359e:	fa93 f3a3 	rbit	r3, r3
 80035a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80035a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80035a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80035ae:	2320      	movs	r3, #32
 80035b0:	e003      	b.n	80035ba <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80035b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035b4:	fab3 f383 	clz	r3, r3
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d105      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x3e0>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	0e9b      	lsrs	r3, r3, #26
 80035ce:	f003 031f 	and.w	r3, r3, #31
 80035d2:	e011      	b.n	80035f8 <HAL_ADC_ConfigChannel+0x404>
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035dc:	fa93 f3a3 	rbit	r3, r3
 80035e0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80035e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035e4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80035e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80035ec:	2320      	movs	r3, #32
 80035ee:	e003      	b.n	80035f8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80035f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035f2:	fab3 f383 	clz	r3, r3
 80035f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d106      	bne.n	800360a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2200      	movs	r2, #0
 8003602:	2103      	movs	r1, #3
 8003604:	4618      	mov	r0, r3
 8003606:	f7fe ffb3 	bl	8002570 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff f8e8 	bl	80027e4 <LL_ADC_IsEnabled>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	f040 8140 	bne.w	800389c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	6819      	ldr	r1, [r3, #0]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	461a      	mov	r2, r3
 800362a:	f7ff f839 	bl	80026a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	4a8f      	ldr	r2, [pc, #572]	; (8003870 <HAL_ADC_ConfigChannel+0x67c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	f040 8131 	bne.w	800389c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10b      	bne.n	8003662 <HAL_ADC_ConfigChannel+0x46e>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	0e9b      	lsrs	r3, r3, #26
 8003650:	3301      	adds	r3, #1
 8003652:	f003 031f 	and.w	r3, r3, #31
 8003656:	2b09      	cmp	r3, #9
 8003658:	bf94      	ite	ls
 800365a:	2301      	movls	r3, #1
 800365c:	2300      	movhi	r3, #0
 800365e:	b2db      	uxtb	r3, r3
 8003660:	e019      	b.n	8003696 <HAL_ADC_ConfigChannel+0x4a2>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003668:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800366a:	fa93 f3a3 	rbit	r3, r3
 800366e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003672:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003674:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800367a:	2320      	movs	r3, #32
 800367c:	e003      	b.n	8003686 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800367e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003680:	fab3 f383 	clz	r3, r3
 8003684:	b2db      	uxtb	r3, r3
 8003686:	3301      	adds	r3, #1
 8003688:	f003 031f 	and.w	r3, r3, #31
 800368c:	2b09      	cmp	r3, #9
 800368e:	bf94      	ite	ls
 8003690:	2301      	movls	r3, #1
 8003692:	2300      	movhi	r3, #0
 8003694:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003696:	2b00      	cmp	r3, #0
 8003698:	d079      	beq.n	800378e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d107      	bne.n	80036b6 <HAL_ADC_ConfigChannel+0x4c2>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	0e9b      	lsrs	r3, r3, #26
 80036ac:	3301      	adds	r3, #1
 80036ae:	069b      	lsls	r3, r3, #26
 80036b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036b4:	e015      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x4ee>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036be:	fa93 f3a3 	rbit	r3, r3
 80036c2:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80036c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036c6:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80036c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80036ce:	2320      	movs	r3, #32
 80036d0:	e003      	b.n	80036da <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80036d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036d4:	fab3 f383 	clz	r3, r3
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	3301      	adds	r3, #1
 80036dc:	069b      	lsls	r3, r3, #26
 80036de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <HAL_ADC_ConfigChannel+0x50e>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	0e9b      	lsrs	r3, r3, #26
 80036f4:	3301      	adds	r3, #1
 80036f6:	f003 031f 	and.w	r3, r3, #31
 80036fa:	2101      	movs	r1, #1
 80036fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003700:	e017      	b.n	8003732 <HAL_ADC_ConfigChannel+0x53e>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800370a:	fa93 f3a3 	rbit	r3, r3
 800370e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003712:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800371a:	2320      	movs	r3, #32
 800371c:	e003      	b.n	8003726 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800371e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003720:	fab3 f383 	clz	r3, r3
 8003724:	b2db      	uxtb	r3, r3
 8003726:	3301      	adds	r3, #1
 8003728:	f003 031f 	and.w	r3, r3, #31
 800372c:	2101      	movs	r1, #1
 800372e:	fa01 f303 	lsl.w	r3, r1, r3
 8003732:	ea42 0103 	orr.w	r1, r2, r3
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10a      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x564>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	0e9b      	lsrs	r3, r3, #26
 8003748:	3301      	adds	r3, #1
 800374a:	f003 021f 	and.w	r2, r3, #31
 800374e:	4613      	mov	r3, r2
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	4413      	add	r3, r2
 8003754:	051b      	lsls	r3, r3, #20
 8003756:	e018      	b.n	800378a <HAL_ADC_ConfigChannel+0x596>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003760:	fa93 f3a3 	rbit	r3, r3
 8003764:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003768:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800376a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003770:	2320      	movs	r3, #32
 8003772:	e003      	b.n	800377c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003776:	fab3 f383 	clz	r3, r3
 800377a:	b2db      	uxtb	r3, r3
 800377c:	3301      	adds	r3, #1
 800377e:	f003 021f 	and.w	r2, r3, #31
 8003782:	4613      	mov	r3, r2
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	4413      	add	r3, r2
 8003788:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800378a:	430b      	orrs	r3, r1
 800378c:	e081      	b.n	8003892 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003796:	2b00      	cmp	r3, #0
 8003798:	d107      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x5b6>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	0e9b      	lsrs	r3, r3, #26
 80037a0:	3301      	adds	r3, #1
 80037a2:	069b      	lsls	r3, r3, #26
 80037a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037a8:	e015      	b.n	80037d6 <HAL_ADC_ConfigChannel+0x5e2>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b2:	fa93 f3a3 	rbit	r3, r3
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80037bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80037c2:	2320      	movs	r3, #32
 80037c4:	e003      	b.n	80037ce <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80037c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c8:	fab3 f383 	clz	r3, r3
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	3301      	adds	r3, #1
 80037d0:	069b      	lsls	r3, r3, #26
 80037d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d109      	bne.n	80037f6 <HAL_ADC_ConfigChannel+0x602>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	0e9b      	lsrs	r3, r3, #26
 80037e8:	3301      	adds	r3, #1
 80037ea:	f003 031f 	and.w	r3, r3, #31
 80037ee:	2101      	movs	r1, #1
 80037f0:	fa01 f303 	lsl.w	r3, r1, r3
 80037f4:	e017      	b.n	8003826 <HAL_ADC_ConfigChannel+0x632>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	fa93 f3a3 	rbit	r3, r3
 8003802:	61bb      	str	r3, [r7, #24]
  return result;
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800380e:	2320      	movs	r3, #32
 8003810:	e003      	b.n	800381a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	fab3 f383 	clz	r3, r3
 8003818:	b2db      	uxtb	r3, r3
 800381a:	3301      	adds	r3, #1
 800381c:	f003 031f 	and.w	r3, r3, #31
 8003820:	2101      	movs	r1, #1
 8003822:	fa01 f303 	lsl.w	r3, r1, r3
 8003826:	ea42 0103 	orr.w	r1, r2, r3
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10d      	bne.n	8003852 <HAL_ADC_ConfigChannel+0x65e>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	0e9b      	lsrs	r3, r3, #26
 800383c:	3301      	adds	r3, #1
 800383e:	f003 021f 	and.w	r2, r3, #31
 8003842:	4613      	mov	r3, r2
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	4413      	add	r3, r2
 8003848:	3b1e      	subs	r3, #30
 800384a:	051b      	lsls	r3, r3, #20
 800384c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003850:	e01e      	b.n	8003890 <HAL_ADC_ConfigChannel+0x69c>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	fa93 f3a3 	rbit	r3, r3
 800385e:	60fb      	str	r3, [r7, #12]
  return result;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d104      	bne.n	8003874 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800386a:	2320      	movs	r3, #32
 800386c:	e006      	b.n	800387c <HAL_ADC_ConfigChannel+0x688>
 800386e:	bf00      	nop
 8003870:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	fab3 f383 	clz	r3, r3
 800387a:	b2db      	uxtb	r3, r3
 800387c:	3301      	adds	r3, #1
 800387e:	f003 021f 	and.w	r2, r3, #31
 8003882:	4613      	mov	r3, r2
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	4413      	add	r3, r2
 8003888:	3b1e      	subs	r3, #30
 800388a:	051b      	lsls	r3, r3, #20
 800388c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003890:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003896:	4619      	mov	r1, r3
 8003898:	f7fe fed7 	bl	800264a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	4b44      	ldr	r3, [pc, #272]	; (80039b4 <HAL_ADC_ConfigChannel+0x7c0>)
 80038a2:	4013      	ands	r3, r2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d07a      	beq.n	800399e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038a8:	4843      	ldr	r0, [pc, #268]	; (80039b8 <HAL_ADC_ConfigChannel+0x7c4>)
 80038aa:	f7fe fe19 	bl	80024e0 <LL_ADC_GetCommonPathInternalCh>
 80038ae:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a41      	ldr	r2, [pc, #260]	; (80039bc <HAL_ADC_ConfigChannel+0x7c8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d12c      	bne.n	8003916 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d126      	bne.n	8003916 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a3c      	ldr	r2, [pc, #240]	; (80039c0 <HAL_ADC_ConfigChannel+0x7cc>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d004      	beq.n	80038dc <HAL_ADC_ConfigChannel+0x6e8>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a3b      	ldr	r2, [pc, #236]	; (80039c4 <HAL_ADC_ConfigChannel+0x7d0>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d15d      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038e4:	4619      	mov	r1, r3
 80038e6:	4834      	ldr	r0, [pc, #208]	; (80039b8 <HAL_ADC_ConfigChannel+0x7c4>)
 80038e8:	f7fe fde7 	bl	80024ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038ec:	4b36      	ldr	r3, [pc, #216]	; (80039c8 <HAL_ADC_ConfigChannel+0x7d4>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	099b      	lsrs	r3, r3, #6
 80038f2:	4a36      	ldr	r2, [pc, #216]	; (80039cc <HAL_ADC_ConfigChannel+0x7d8>)
 80038f4:	fba2 2303 	umull	r2, r3, r2, r3
 80038f8:	099b      	lsrs	r3, r3, #6
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	4613      	mov	r3, r2
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	4413      	add	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003906:	e002      	b.n	800390e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	3b01      	subs	r3, #1
 800390c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1f9      	bne.n	8003908 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003914:	e040      	b.n	8003998 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a2d      	ldr	r2, [pc, #180]	; (80039d0 <HAL_ADC_ConfigChannel+0x7dc>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d118      	bne.n	8003952 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003920:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003924:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d112      	bne.n	8003952 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a23      	ldr	r2, [pc, #140]	; (80039c0 <HAL_ADC_ConfigChannel+0x7cc>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d004      	beq.n	8003940 <HAL_ADC_ConfigChannel+0x74c>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a22      	ldr	r2, [pc, #136]	; (80039c4 <HAL_ADC_ConfigChannel+0x7d0>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d12d      	bne.n	800399c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003940:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003944:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003948:	4619      	mov	r1, r3
 800394a:	481b      	ldr	r0, [pc, #108]	; (80039b8 <HAL_ADC_ConfigChannel+0x7c4>)
 800394c:	f7fe fdb5 	bl	80024ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003950:	e024      	b.n	800399c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a1f      	ldr	r2, [pc, #124]	; (80039d4 <HAL_ADC_ConfigChannel+0x7e0>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d120      	bne.n	800399e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800395c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003960:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d11a      	bne.n	800399e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a14      	ldr	r2, [pc, #80]	; (80039c0 <HAL_ADC_ConfigChannel+0x7cc>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d115      	bne.n	800399e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003972:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003976:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800397a:	4619      	mov	r1, r3
 800397c:	480e      	ldr	r0, [pc, #56]	; (80039b8 <HAL_ADC_ConfigChannel+0x7c4>)
 800397e:	f7fe fd9c 	bl	80024ba <LL_ADC_SetCommonPathInternalCh>
 8003982:	e00c      	b.n	800399e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003988:	f043 0220 	orr.w	r2, r3, #32
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003996:	e002      	b.n	800399e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003998:	bf00      	nop
 800399a:	e000      	b.n	800399e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800399c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80039a6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	37d8      	adds	r7, #216	; 0xd8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	80080000 	.word	0x80080000
 80039b8:	50040300 	.word	0x50040300
 80039bc:	c7520000 	.word	0xc7520000
 80039c0:	50040000 	.word	0x50040000
 80039c4:	50040200 	.word	0x50040200
 80039c8:	20000000 	.word	0x20000000
 80039cc:	053e2d63 	.word	0x053e2d63
 80039d0:	cb840000 	.word	0xcb840000
 80039d4:	80000001 	.word	0x80000001

080039d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80039e0:	2300      	movs	r3, #0
 80039e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fe fefb 	bl	80027e4 <LL_ADC_IsEnabled>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d169      	bne.n	8003ac8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	4b36      	ldr	r3, [pc, #216]	; (8003ad4 <ADC_Enable+0xfc>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00d      	beq.n	8003a1e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a06:	f043 0210 	orr.w	r2, r3, #16
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a12:	f043 0201 	orr.w	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e055      	b.n	8003aca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fe feca 	bl	80027bc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a28:	482b      	ldr	r0, [pc, #172]	; (8003ad8 <ADC_Enable+0x100>)
 8003a2a:	f7fe fd59 	bl	80024e0 <LL_ADC_GetCommonPathInternalCh>
 8003a2e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003a30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d013      	beq.n	8003a60 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a38:	4b28      	ldr	r3, [pc, #160]	; (8003adc <ADC_Enable+0x104>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	099b      	lsrs	r3, r3, #6
 8003a3e:	4a28      	ldr	r2, [pc, #160]	; (8003ae0 <ADC_Enable+0x108>)
 8003a40:	fba2 2303 	umull	r2, r3, r2, r3
 8003a44:	099b      	lsrs	r3, r3, #6
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	4613      	mov	r3, r2
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	4413      	add	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a52:	e002      	b.n	8003a5a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1f9      	bne.n	8003a54 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a60:	f7fe fd0c 	bl	800247c <HAL_GetTick>
 8003a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a66:	e028      	b.n	8003aba <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fe feb9 	bl	80027e4 <LL_ADC_IsEnabled>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d104      	bne.n	8003a82 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fe fe9d 	bl	80027bc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a82:	f7fe fcfb 	bl	800247c <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d914      	bls.n	8003aba <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d00d      	beq.n	8003aba <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa2:	f043 0210 	orr.w	r2, r3, #16
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aae:	f043 0201 	orr.w	r2, r3, #1
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e007      	b.n	8003aca <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d1cf      	bne.n	8003a68 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	8000003f 	.word	0x8000003f
 8003ad8:	50040300 	.word	0x50040300
 8003adc:	20000000 	.word	0x20000000
 8003ae0:	053e2d63 	.word	0x053e2d63

08003ae4 <LL_ADC_IsEnabled>:
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <LL_ADC_IsEnabled+0x18>
 8003af8:	2301      	movs	r3, #1
 8003afa:	e000      	b.n	8003afe <LL_ADC_IsEnabled+0x1a>
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <LL_ADC_REG_IsConversionOngoing>:
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d101      	bne.n	8003b22 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003b94:	b590      	push	{r4, r7, lr}
 8003b96:	b09f      	sub	sp, #124	; 0x7c
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d101      	bne.n	8003bb2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e093      	b.n	8003cda <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003bba:	2300      	movs	r3, #0
 8003bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a47      	ldr	r2, [pc, #284]	; (8003ce4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d102      	bne.n	8003bd2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003bcc:	4b46      	ldr	r3, [pc, #280]	; (8003ce8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003bce:	60bb      	str	r3, [r7, #8]
 8003bd0:	e001      	b.n	8003bd6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10b      	bne.n	8003bf4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be0:	f043 0220 	orr.w	r2, r3, #32
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e072      	b.n	8003cda <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff ff87 	bl	8003b0a <LL_ADC_REG_IsConversionOngoing>
 8003bfc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff ff81 	bl	8003b0a <LL_ADC_REG_IsConversionOngoing>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d154      	bne.n	8003cb8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003c0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d151      	bne.n	8003cb8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c14:	4b35      	ldr	r3, [pc, #212]	; (8003cec <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003c16:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d02c      	beq.n	8003c7a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	6859      	ldr	r1, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c32:	035b      	lsls	r3, r3, #13
 8003c34:	430b      	orrs	r3, r1
 8003c36:	431a      	orrs	r2, r3
 8003c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c3a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c3c:	4829      	ldr	r0, [pc, #164]	; (8003ce4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003c3e:	f7ff ff51 	bl	8003ae4 <LL_ADC_IsEnabled>
 8003c42:	4604      	mov	r4, r0
 8003c44:	4828      	ldr	r0, [pc, #160]	; (8003ce8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003c46:	f7ff ff4d 	bl	8003ae4 <LL_ADC_IsEnabled>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	431c      	orrs	r4, r3
 8003c4e:	4828      	ldr	r0, [pc, #160]	; (8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003c50:	f7ff ff48 	bl	8003ae4 <LL_ADC_IsEnabled>
 8003c54:	4603      	mov	r3, r0
 8003c56:	4323      	orrs	r3, r4
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d137      	bne.n	8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c64:	f023 030f 	bic.w	r3, r3, #15
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	6811      	ldr	r1, [r2, #0]
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	6892      	ldr	r2, [r2, #8]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	431a      	orrs	r2, r3
 8003c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c76:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c78:	e028      	b.n	8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c84:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c86:	4817      	ldr	r0, [pc, #92]	; (8003ce4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003c88:	f7ff ff2c 	bl	8003ae4 <LL_ADC_IsEnabled>
 8003c8c:	4604      	mov	r4, r0
 8003c8e:	4816      	ldr	r0, [pc, #88]	; (8003ce8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003c90:	f7ff ff28 	bl	8003ae4 <LL_ADC_IsEnabled>
 8003c94:	4603      	mov	r3, r0
 8003c96:	431c      	orrs	r4, r3
 8003c98:	4815      	ldr	r0, [pc, #84]	; (8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003c9a:	f7ff ff23 	bl	8003ae4 <LL_ADC_IsEnabled>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	4323      	orrs	r3, r4
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d112      	bne.n	8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003cae:	f023 030f 	bic.w	r3, r3, #15
 8003cb2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cb4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003cb6:	e009      	b.n	8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbc:	f043 0220 	orr.w	r2, r3, #32
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003cca:	e000      	b.n	8003cce <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ccc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003cd6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	377c      	adds	r7, #124	; 0x7c
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd90      	pop	{r4, r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	50040000 	.word	0x50040000
 8003ce8:	50040100 	.word	0x50040100
 8003cec:	50040300 	.word	0x50040300
 8003cf0:	50040200 	.word	0x50040200

08003cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d04:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <__NVIC_SetPriorityGrouping+0x44>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d10:	4013      	ands	r3, r2
 8003d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d26:	4a04      	ldr	r2, [pc, #16]	; (8003d38 <__NVIC_SetPriorityGrouping+0x44>)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	60d3      	str	r3, [r2, #12]
}
 8003d2c:	bf00      	nop
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	e000ed00 	.word	0xe000ed00

08003d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d40:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <__NVIC_GetPriorityGrouping+0x18>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	0a1b      	lsrs	r3, r3, #8
 8003d46:	f003 0307 	and.w	r3, r3, #7
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	e000ed00 	.word	0xe000ed00

08003d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	db0b      	blt.n	8003d82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	f003 021f 	and.w	r2, r3, #31
 8003d70:	4907      	ldr	r1, [pc, #28]	; (8003d90 <__NVIC_EnableIRQ+0x38>)
 8003d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	2001      	movs	r0, #1
 8003d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	e000e100 	.word	0xe000e100

08003d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	6039      	str	r1, [r7, #0]
 8003d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	db0a      	blt.n	8003dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	490c      	ldr	r1, [pc, #48]	; (8003de0 <__NVIC_SetPriority+0x4c>)
 8003dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db2:	0112      	lsls	r2, r2, #4
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	440b      	add	r3, r1
 8003db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dbc:	e00a      	b.n	8003dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	4908      	ldr	r1, [pc, #32]	; (8003de4 <__NVIC_SetPriority+0x50>)
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	3b04      	subs	r3, #4
 8003dcc:	0112      	lsls	r2, r2, #4
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	761a      	strb	r2, [r3, #24]
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	e000e100 	.word	0xe000e100
 8003de4:	e000ed00 	.word	0xe000ed00

08003de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b089      	sub	sp, #36	; 0x24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f1c3 0307 	rsb	r3, r3, #7
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	bf28      	it	cs
 8003e06:	2304      	movcs	r3, #4
 8003e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	2b06      	cmp	r3, #6
 8003e10:	d902      	bls.n	8003e18 <NVIC_EncodePriority+0x30>
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	3b03      	subs	r3, #3
 8003e16:	e000      	b.n	8003e1a <NVIC_EncodePriority+0x32>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	fa02 f303 	lsl.w	r3, r2, r3
 8003e26:	43da      	mvns	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	401a      	ands	r2, r3
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e30:	f04f 31ff 	mov.w	r1, #4294967295
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3a:	43d9      	mvns	r1, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e40:	4313      	orrs	r3, r2
         );
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3724      	adds	r7, #36	; 0x24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
	...

08003e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e60:	d301      	bcc.n	8003e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e62:	2301      	movs	r3, #1
 8003e64:	e00f      	b.n	8003e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e66:	4a0a      	ldr	r2, [pc, #40]	; (8003e90 <SysTick_Config+0x40>)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e6e:	210f      	movs	r1, #15
 8003e70:	f04f 30ff 	mov.w	r0, #4294967295
 8003e74:	f7ff ff8e 	bl	8003d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e78:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <SysTick_Config+0x40>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e7e:	4b04      	ldr	r3, [pc, #16]	; (8003e90 <SysTick_Config+0x40>)
 8003e80:	2207      	movs	r2, #7
 8003e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	e000e010 	.word	0xe000e010

08003e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7ff ff29 	bl	8003cf4 <__NVIC_SetPriorityGrouping>
}
 8003ea2:	bf00      	nop
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b086      	sub	sp, #24
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	60b9      	str	r1, [r7, #8]
 8003eb4:	607a      	str	r2, [r7, #4]
 8003eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ebc:	f7ff ff3e 	bl	8003d3c <__NVIC_GetPriorityGrouping>
 8003ec0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68b9      	ldr	r1, [r7, #8]
 8003ec6:	6978      	ldr	r0, [r7, #20]
 8003ec8:	f7ff ff8e 	bl	8003de8 <NVIC_EncodePriority>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff ff5d 	bl	8003d94 <__NVIC_SetPriority>
}
 8003eda:	bf00      	nop
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b082      	sub	sp, #8
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	4603      	mov	r3, r0
 8003eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff ff31 	bl	8003d58 <__NVIC_EnableIRQ>
}
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b082      	sub	sp, #8
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7ff ffa2 	bl	8003e50 <SysTick_Config>
 8003f0c:	4603      	mov	r3, r0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f22:	2300      	movs	r3, #0
 8003f24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f26:	e17f      	b.n	8004228 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	fa01 f303 	lsl.w	r3, r1, r3
 8003f34:	4013      	ands	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 8171 	beq.w	8004222 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 0303 	and.w	r3, r3, #3
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d005      	beq.n	8003f58 <HAL_GPIO_Init+0x40>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f003 0303 	and.w	r3, r3, #3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d130      	bne.n	8003fba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	2203      	movs	r2, #3
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	68da      	ldr	r2, [r3, #12]
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f8e:	2201      	movs	r2, #1
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	fa02 f303 	lsl.w	r3, r2, r3
 8003f96:	43db      	mvns	r3, r3
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	091b      	lsrs	r3, r3, #4
 8003fa4:	f003 0201 	and.w	r2, r3, #1
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	d118      	bne.n	8003ff8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003fcc:	2201      	movs	r2, #1
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	08db      	lsrs	r3, r3, #3
 8003fe2:	f003 0201 	and.w	r2, r3, #1
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f003 0303 	and.w	r3, r3, #3
 8004000:	2b03      	cmp	r3, #3
 8004002:	d017      	beq.n	8004034 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	2203      	movs	r2, #3
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	43db      	mvns	r3, r3
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4013      	ands	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f003 0303 	and.w	r3, r3, #3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d123      	bne.n	8004088 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	08da      	lsrs	r2, r3, #3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3208      	adds	r2, #8
 8004048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800404c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	220f      	movs	r2, #15
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	43db      	mvns	r3, r3
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	4013      	ands	r3, r2
 8004062:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	08da      	lsrs	r2, r3, #3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3208      	adds	r2, #8
 8004082:	6939      	ldr	r1, [r7, #16]
 8004084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	2203      	movs	r2, #3
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	43db      	mvns	r3, r3
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4013      	ands	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f003 0203 	and.w	r2, r3, #3
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 80ac 	beq.w	8004222 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ca:	4b5f      	ldr	r3, [pc, #380]	; (8004248 <HAL_GPIO_Init+0x330>)
 80040cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ce:	4a5e      	ldr	r2, [pc, #376]	; (8004248 <HAL_GPIO_Init+0x330>)
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	6613      	str	r3, [r2, #96]	; 0x60
 80040d6:	4b5c      	ldr	r3, [pc, #368]	; (8004248 <HAL_GPIO_Init+0x330>)
 80040d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	60bb      	str	r3, [r7, #8]
 80040e0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80040e2:	4a5a      	ldr	r2, [pc, #360]	; (800424c <HAL_GPIO_Init+0x334>)
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	089b      	lsrs	r3, r3, #2
 80040e8:	3302      	adds	r3, #2
 80040ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	220f      	movs	r2, #15
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	43db      	mvns	r3, r3
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	4013      	ands	r3, r2
 8004104:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800410c:	d025      	beq.n	800415a <HAL_GPIO_Init+0x242>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a4f      	ldr	r2, [pc, #316]	; (8004250 <HAL_GPIO_Init+0x338>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d01f      	beq.n	8004156 <HAL_GPIO_Init+0x23e>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a4e      	ldr	r2, [pc, #312]	; (8004254 <HAL_GPIO_Init+0x33c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d019      	beq.n	8004152 <HAL_GPIO_Init+0x23a>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a4d      	ldr	r2, [pc, #308]	; (8004258 <HAL_GPIO_Init+0x340>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d013      	beq.n	800414e <HAL_GPIO_Init+0x236>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a4c      	ldr	r2, [pc, #304]	; (800425c <HAL_GPIO_Init+0x344>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d00d      	beq.n	800414a <HAL_GPIO_Init+0x232>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a4b      	ldr	r2, [pc, #300]	; (8004260 <HAL_GPIO_Init+0x348>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d007      	beq.n	8004146 <HAL_GPIO_Init+0x22e>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a4a      	ldr	r2, [pc, #296]	; (8004264 <HAL_GPIO_Init+0x34c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d101      	bne.n	8004142 <HAL_GPIO_Init+0x22a>
 800413e:	2306      	movs	r3, #6
 8004140:	e00c      	b.n	800415c <HAL_GPIO_Init+0x244>
 8004142:	2307      	movs	r3, #7
 8004144:	e00a      	b.n	800415c <HAL_GPIO_Init+0x244>
 8004146:	2305      	movs	r3, #5
 8004148:	e008      	b.n	800415c <HAL_GPIO_Init+0x244>
 800414a:	2304      	movs	r3, #4
 800414c:	e006      	b.n	800415c <HAL_GPIO_Init+0x244>
 800414e:	2303      	movs	r3, #3
 8004150:	e004      	b.n	800415c <HAL_GPIO_Init+0x244>
 8004152:	2302      	movs	r3, #2
 8004154:	e002      	b.n	800415c <HAL_GPIO_Init+0x244>
 8004156:	2301      	movs	r3, #1
 8004158:	e000      	b.n	800415c <HAL_GPIO_Init+0x244>
 800415a:	2300      	movs	r3, #0
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	f002 0203 	and.w	r2, r2, #3
 8004162:	0092      	lsls	r2, r2, #2
 8004164:	4093      	lsls	r3, r2
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800416c:	4937      	ldr	r1, [pc, #220]	; (800424c <HAL_GPIO_Init+0x334>)
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	089b      	lsrs	r3, r3, #2
 8004172:	3302      	adds	r3, #2
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800417a:	4b3b      	ldr	r3, [pc, #236]	; (8004268 <HAL_GPIO_Init+0x350>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	43db      	mvns	r3, r3
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4013      	ands	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800419e:	4a32      	ldr	r2, [pc, #200]	; (8004268 <HAL_GPIO_Init+0x350>)
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80041a4:	4b30      	ldr	r3, [pc, #192]	; (8004268 <HAL_GPIO_Init+0x350>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	43db      	mvns	r3, r3
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	4013      	ands	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041c8:	4a27      	ldr	r2, [pc, #156]	; (8004268 <HAL_GPIO_Init+0x350>)
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80041ce:	4b26      	ldr	r3, [pc, #152]	; (8004268 <HAL_GPIO_Init+0x350>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	43db      	mvns	r3, r3
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4013      	ands	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041f2:	4a1d      	ldr	r2, [pc, #116]	; (8004268 <HAL_GPIO_Init+0x350>)
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80041f8:	4b1b      	ldr	r3, [pc, #108]	; (8004268 <HAL_GPIO_Init+0x350>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	43db      	mvns	r3, r3
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	4013      	ands	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4313      	orrs	r3, r2
 800421a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800421c:	4a12      	ldr	r2, [pc, #72]	; (8004268 <HAL_GPIO_Init+0x350>)
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	3301      	adds	r3, #1
 8004226:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	fa22 f303 	lsr.w	r3, r2, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	f47f ae78 	bne.w	8003f28 <HAL_GPIO_Init+0x10>
  }
}
 8004238:	bf00      	nop
 800423a:	bf00      	nop
 800423c:	371c      	adds	r7, #28
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40021000 	.word	0x40021000
 800424c:	40010000 	.word	0x40010000
 8004250:	48000400 	.word	0x48000400
 8004254:	48000800 	.word	0x48000800
 8004258:	48000c00 	.word	0x48000c00
 800425c:	48001000 	.word	0x48001000
 8004260:	48001400 	.word	0x48001400
 8004264:	48001800 	.word	0x48001800
 8004268:	40010400 	.word	0x40010400

0800426c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	807b      	strh	r3, [r7, #2]
 8004278:	4613      	mov	r3, r2
 800427a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800427c:	787b      	ldrb	r3, [r7, #1]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004282:	887a      	ldrh	r2, [r7, #2]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004288:	e002      	b.n	8004290 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800428a:	887a      	ldrh	r2, [r7, #2]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80042a6:	4b08      	ldr	r3, [pc, #32]	; (80042c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042a8:	695a      	ldr	r2, [r3, #20]
 80042aa:	88fb      	ldrh	r3, [r7, #6]
 80042ac:	4013      	ands	r3, r2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d006      	beq.n	80042c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042b2:	4a05      	ldr	r2, [pc, #20]	; (80042c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042b4:	88fb      	ldrh	r3, [r7, #6]
 80042b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042b8:	88fb      	ldrh	r3, [r7, #6]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fd fc04 	bl	8001ac8 <HAL_GPIO_EXTI_Callback>
  }
}
 80042c0:	bf00      	nop
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40010400 	.word	0x40010400

080042cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80042d0:	4b04      	ldr	r3, [pc, #16]	; (80042e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80042d8:	4618      	mov	r0, r3
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40007000 	.word	0x40007000

080042e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f6:	d130      	bne.n	800435a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80042f8:	4b23      	ldr	r3, [pc, #140]	; (8004388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004304:	d038      	beq.n	8004378 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004306:	4b20      	ldr	r3, [pc, #128]	; (8004388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800430e:	4a1e      	ldr	r2, [pc, #120]	; (8004388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004310:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004314:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004316:	4b1d      	ldr	r3, [pc, #116]	; (800438c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2232      	movs	r2, #50	; 0x32
 800431c:	fb02 f303 	mul.w	r3, r2, r3
 8004320:	4a1b      	ldr	r2, [pc, #108]	; (8004390 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004322:	fba2 2303 	umull	r2, r3, r2, r3
 8004326:	0c9b      	lsrs	r3, r3, #18
 8004328:	3301      	adds	r3, #1
 800432a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800432c:	e002      	b.n	8004334 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3b01      	subs	r3, #1
 8004332:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004334:	4b14      	ldr	r3, [pc, #80]	; (8004388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800433c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004340:	d102      	bne.n	8004348 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1f2      	bne.n	800432e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004348:	4b0f      	ldr	r3, [pc, #60]	; (8004388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004354:	d110      	bne.n	8004378 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e00f      	b.n	800437a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800435a:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004366:	d007      	beq.n	8004378 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004368:	4b07      	ldr	r3, [pc, #28]	; (8004388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004370:	4a05      	ldr	r2, [pc, #20]	; (8004388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004372:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004376:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	40007000 	.word	0x40007000
 800438c:	20000000 	.word	0x20000000
 8004390:	431bde83 	.word	0x431bde83

08004394 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b088      	sub	sp, #32
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e3ca      	b.n	8004b3c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043a6:	4b97      	ldr	r3, [pc, #604]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 030c 	and.w	r3, r3, #12
 80043ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043b0:	4b94      	ldr	r3, [pc, #592]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 0303 	and.w	r3, r3, #3
 80043b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 80e4 	beq.w	8004590 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d007      	beq.n	80043de <HAL_RCC_OscConfig+0x4a>
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	2b0c      	cmp	r3, #12
 80043d2:	f040 808b 	bne.w	80044ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	f040 8087 	bne.w	80044ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043de:	4b89      	ldr	r3, [pc, #548]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d005      	beq.n	80043f6 <HAL_RCC_OscConfig+0x62>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e3a2      	b.n	8004b3c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1a      	ldr	r2, [r3, #32]
 80043fa:	4b82      	ldr	r3, [pc, #520]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0308 	and.w	r3, r3, #8
 8004402:	2b00      	cmp	r3, #0
 8004404:	d004      	beq.n	8004410 <HAL_RCC_OscConfig+0x7c>
 8004406:	4b7f      	ldr	r3, [pc, #508]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800440e:	e005      	b.n	800441c <HAL_RCC_OscConfig+0x88>
 8004410:	4b7c      	ldr	r3, [pc, #496]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 8004412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004416:	091b      	lsrs	r3, r3, #4
 8004418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800441c:	4293      	cmp	r3, r2
 800441e:	d223      	bcs.n	8004468 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	4618      	mov	r0, r3
 8004426:	f000 fd55 	bl	8004ed4 <RCC_SetFlashLatencyFromMSIRange>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e383      	b.n	8004b3c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004434:	4b73      	ldr	r3, [pc, #460]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a72      	ldr	r2, [pc, #456]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 800443a:	f043 0308 	orr.w	r3, r3, #8
 800443e:	6013      	str	r3, [r2, #0]
 8004440:	4b70      	ldr	r3, [pc, #448]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	496d      	ldr	r1, [pc, #436]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 800444e:	4313      	orrs	r3, r2
 8004450:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004452:	4b6c      	ldr	r3, [pc, #432]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	021b      	lsls	r3, r3, #8
 8004460:	4968      	ldr	r1, [pc, #416]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 8004462:	4313      	orrs	r3, r2
 8004464:	604b      	str	r3, [r1, #4]
 8004466:	e025      	b.n	80044b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004468:	4b66      	ldr	r3, [pc, #408]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a65      	ldr	r2, [pc, #404]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 800446e:	f043 0308 	orr.w	r3, r3, #8
 8004472:	6013      	str	r3, [r2, #0]
 8004474:	4b63      	ldr	r3, [pc, #396]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	4960      	ldr	r1, [pc, #384]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 8004482:	4313      	orrs	r3, r2
 8004484:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004486:	4b5f      	ldr	r3, [pc, #380]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	021b      	lsls	r3, r3, #8
 8004494:	495b      	ldr	r1, [pc, #364]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 8004496:	4313      	orrs	r3, r2
 8004498:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d109      	bne.n	80044b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 fd15 	bl	8004ed4 <RCC_SetFlashLatencyFromMSIRange>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e343      	b.n	8004b3c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044b4:	f000 fc4a 	bl	8004d4c <HAL_RCC_GetSysClockFreq>
 80044b8:	4602      	mov	r2, r0
 80044ba:	4b52      	ldr	r3, [pc, #328]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	091b      	lsrs	r3, r3, #4
 80044c0:	f003 030f 	and.w	r3, r3, #15
 80044c4:	4950      	ldr	r1, [pc, #320]	; (8004608 <HAL_RCC_OscConfig+0x274>)
 80044c6:	5ccb      	ldrb	r3, [r1, r3]
 80044c8:	f003 031f 	and.w	r3, r3, #31
 80044cc:	fa22 f303 	lsr.w	r3, r2, r3
 80044d0:	4a4e      	ldr	r2, [pc, #312]	; (800460c <HAL_RCC_OscConfig+0x278>)
 80044d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80044d4:	4b4e      	ldr	r3, [pc, #312]	; (8004610 <HAL_RCC_OscConfig+0x27c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fd ff7f 	bl	80023dc <HAL_InitTick>
 80044de:	4603      	mov	r3, r0
 80044e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d052      	beq.n	800458e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	e327      	b.n	8004b3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d032      	beq.n	800455a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044f4:	4b43      	ldr	r3, [pc, #268]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a42      	ldr	r2, [pc, #264]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 80044fa:	f043 0301 	orr.w	r3, r3, #1
 80044fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004500:	f7fd ffbc 	bl	800247c <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004508:	f7fd ffb8 	bl	800247c <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e310      	b.n	8004b3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800451a:	4b3a      	ldr	r3, [pc, #232]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004526:	4b37      	ldr	r3, [pc, #220]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a36      	ldr	r2, [pc, #216]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 800452c:	f043 0308 	orr.w	r3, r3, #8
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	4b34      	ldr	r3, [pc, #208]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	4931      	ldr	r1, [pc, #196]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 8004540:	4313      	orrs	r3, r2
 8004542:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004544:	4b2f      	ldr	r3, [pc, #188]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	021b      	lsls	r3, r3, #8
 8004552:	492c      	ldr	r1, [pc, #176]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 8004554:	4313      	orrs	r3, r2
 8004556:	604b      	str	r3, [r1, #4]
 8004558:	e01a      	b.n	8004590 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800455a:	4b2a      	ldr	r3, [pc, #168]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a29      	ldr	r2, [pc, #164]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 8004560:	f023 0301 	bic.w	r3, r3, #1
 8004564:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004566:	f7fd ff89 	bl	800247c <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800456c:	e008      	b.n	8004580 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800456e:	f7fd ff85 	bl	800247c <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e2dd      	b.n	8004b3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004580:	4b20      	ldr	r3, [pc, #128]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1f0      	bne.n	800456e <HAL_RCC_OscConfig+0x1da>
 800458c:	e000      	b.n	8004590 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800458e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d074      	beq.n	8004686 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	2b08      	cmp	r3, #8
 80045a0:	d005      	beq.n	80045ae <HAL_RCC_OscConfig+0x21a>
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	2b0c      	cmp	r3, #12
 80045a6:	d10e      	bne.n	80045c6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	d10b      	bne.n	80045c6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ae:	4b15      	ldr	r3, [pc, #84]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d064      	beq.n	8004684 <HAL_RCC_OscConfig+0x2f0>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d160      	bne.n	8004684 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e2ba      	b.n	8004b3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ce:	d106      	bne.n	80045de <HAL_RCC_OscConfig+0x24a>
 80045d0:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a0b      	ldr	r2, [pc, #44]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 80045d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045da:	6013      	str	r3, [r2, #0]
 80045dc:	e026      	b.n	800462c <HAL_RCC_OscConfig+0x298>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045e6:	d115      	bne.n	8004614 <HAL_RCC_OscConfig+0x280>
 80045e8:	4b06      	ldr	r3, [pc, #24]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a05      	ldr	r2, [pc, #20]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 80045ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	4b03      	ldr	r3, [pc, #12]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a02      	ldr	r2, [pc, #8]	; (8004604 <HAL_RCC_OscConfig+0x270>)
 80045fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045fe:	6013      	str	r3, [r2, #0]
 8004600:	e014      	b.n	800462c <HAL_RCC_OscConfig+0x298>
 8004602:	bf00      	nop
 8004604:	40021000 	.word	0x40021000
 8004608:	0800cb10 	.word	0x0800cb10
 800460c:	20000000 	.word	0x20000000
 8004610:	20000004 	.word	0x20000004
 8004614:	4ba0      	ldr	r3, [pc, #640]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a9f      	ldr	r2, [pc, #636]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 800461a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800461e:	6013      	str	r3, [r2, #0]
 8004620:	4b9d      	ldr	r3, [pc, #628]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a9c      	ldr	r2, [pc, #624]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 8004626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800462a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d013      	beq.n	800465c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004634:	f7fd ff22 	bl	800247c <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800463c:	f7fd ff1e 	bl	800247c <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b64      	cmp	r3, #100	; 0x64
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e276      	b.n	8004b3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800464e:	4b92      	ldr	r3, [pc, #584]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0f0      	beq.n	800463c <HAL_RCC_OscConfig+0x2a8>
 800465a:	e014      	b.n	8004686 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465c:	f7fd ff0e 	bl	800247c <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004664:	f7fd ff0a 	bl	800247c <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b64      	cmp	r3, #100	; 0x64
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e262      	b.n	8004b3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004676:	4b88      	ldr	r3, [pc, #544]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1f0      	bne.n	8004664 <HAL_RCC_OscConfig+0x2d0>
 8004682:	e000      	b.n	8004686 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d060      	beq.n	8004754 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	2b04      	cmp	r3, #4
 8004696:	d005      	beq.n	80046a4 <HAL_RCC_OscConfig+0x310>
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	2b0c      	cmp	r3, #12
 800469c:	d119      	bne.n	80046d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d116      	bne.n	80046d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046a4:	4b7c      	ldr	r3, [pc, #496]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d005      	beq.n	80046bc <HAL_RCC_OscConfig+0x328>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e23f      	b.n	8004b3c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046bc:	4b76      	ldr	r3, [pc, #472]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	061b      	lsls	r3, r3, #24
 80046ca:	4973      	ldr	r1, [pc, #460]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046d0:	e040      	b.n	8004754 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d023      	beq.n	8004722 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046da:	4b6f      	ldr	r3, [pc, #444]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a6e      	ldr	r2, [pc, #440]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 80046e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e6:	f7fd fec9 	bl	800247c <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ee:	f7fd fec5 	bl	800247c <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e21d      	b.n	8004b3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004700:	4b65      	ldr	r3, [pc, #404]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0f0      	beq.n	80046ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800470c:	4b62      	ldr	r3, [pc, #392]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	061b      	lsls	r3, r3, #24
 800471a:	495f      	ldr	r1, [pc, #380]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 800471c:	4313      	orrs	r3, r2
 800471e:	604b      	str	r3, [r1, #4]
 8004720:	e018      	b.n	8004754 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004722:	4b5d      	ldr	r3, [pc, #372]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a5c      	ldr	r2, [pc, #368]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 8004728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800472c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472e:	f7fd fea5 	bl	800247c <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004736:	f7fd fea1 	bl	800247c <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e1f9      	b.n	8004b3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004748:	4b53      	ldr	r3, [pc, #332]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1f0      	bne.n	8004736 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0308 	and.w	r3, r3, #8
 800475c:	2b00      	cmp	r3, #0
 800475e:	d03c      	beq.n	80047da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d01c      	beq.n	80047a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004768:	4b4b      	ldr	r3, [pc, #300]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 800476a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800476e:	4a4a      	ldr	r2, [pc, #296]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 8004770:	f043 0301 	orr.w	r3, r3, #1
 8004774:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004778:	f7fd fe80 	bl	800247c <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004780:	f7fd fe7c 	bl	800247c <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e1d4      	b.n	8004b3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004792:	4b41      	ldr	r3, [pc, #260]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 8004794:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0ef      	beq.n	8004780 <HAL_RCC_OscConfig+0x3ec>
 80047a0:	e01b      	b.n	80047da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047a2:	4b3d      	ldr	r3, [pc, #244]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 80047a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047a8:	4a3b      	ldr	r2, [pc, #236]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 80047aa:	f023 0301 	bic.w	r3, r3, #1
 80047ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b2:	f7fd fe63 	bl	800247c <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047ba:	f7fd fe5f 	bl	800247c <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e1b7      	b.n	8004b3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047cc:	4b32      	ldr	r3, [pc, #200]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 80047ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1ef      	bne.n	80047ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0304 	and.w	r3, r3, #4
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 80a6 	beq.w	8004934 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047e8:	2300      	movs	r3, #0
 80047ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047ec:	4b2a      	ldr	r3, [pc, #168]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 80047ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10d      	bne.n	8004814 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047f8:	4b27      	ldr	r3, [pc, #156]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 80047fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fc:	4a26      	ldr	r2, [pc, #152]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 80047fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004802:	6593      	str	r3, [r2, #88]	; 0x58
 8004804:	4b24      	ldr	r3, [pc, #144]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 8004806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480c:	60bb      	str	r3, [r7, #8]
 800480e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004810:	2301      	movs	r3, #1
 8004812:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004814:	4b21      	ldr	r3, [pc, #132]	; (800489c <HAL_RCC_OscConfig+0x508>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481c:	2b00      	cmp	r3, #0
 800481e:	d118      	bne.n	8004852 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004820:	4b1e      	ldr	r3, [pc, #120]	; (800489c <HAL_RCC_OscConfig+0x508>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a1d      	ldr	r2, [pc, #116]	; (800489c <HAL_RCC_OscConfig+0x508>)
 8004826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800482a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800482c:	f7fd fe26 	bl	800247c <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004834:	f7fd fe22 	bl	800247c <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e17a      	b.n	8004b3c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004846:	4b15      	ldr	r3, [pc, #84]	; (800489c <HAL_RCC_OscConfig+0x508>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0f0      	beq.n	8004834 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d108      	bne.n	800486c <HAL_RCC_OscConfig+0x4d8>
 800485a:	4b0f      	ldr	r3, [pc, #60]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 800485c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004860:	4a0d      	ldr	r2, [pc, #52]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 8004862:	f043 0301 	orr.w	r3, r3, #1
 8004866:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800486a:	e029      	b.n	80048c0 <HAL_RCC_OscConfig+0x52c>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	2b05      	cmp	r3, #5
 8004872:	d115      	bne.n	80048a0 <HAL_RCC_OscConfig+0x50c>
 8004874:	4b08      	ldr	r3, [pc, #32]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 8004876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487a:	4a07      	ldr	r2, [pc, #28]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 800487c:	f043 0304 	orr.w	r3, r3, #4
 8004880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004884:	4b04      	ldr	r3, [pc, #16]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 8004886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488a:	4a03      	ldr	r2, [pc, #12]	; (8004898 <HAL_RCC_OscConfig+0x504>)
 800488c:	f043 0301 	orr.w	r3, r3, #1
 8004890:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004894:	e014      	b.n	80048c0 <HAL_RCC_OscConfig+0x52c>
 8004896:	bf00      	nop
 8004898:	40021000 	.word	0x40021000
 800489c:	40007000 	.word	0x40007000
 80048a0:	4b9c      	ldr	r3, [pc, #624]	; (8004b14 <HAL_RCC_OscConfig+0x780>)
 80048a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a6:	4a9b      	ldr	r2, [pc, #620]	; (8004b14 <HAL_RCC_OscConfig+0x780>)
 80048a8:	f023 0301 	bic.w	r3, r3, #1
 80048ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048b0:	4b98      	ldr	r3, [pc, #608]	; (8004b14 <HAL_RCC_OscConfig+0x780>)
 80048b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b6:	4a97      	ldr	r2, [pc, #604]	; (8004b14 <HAL_RCC_OscConfig+0x780>)
 80048b8:	f023 0304 	bic.w	r3, r3, #4
 80048bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d016      	beq.n	80048f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c8:	f7fd fdd8 	bl	800247c <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ce:	e00a      	b.n	80048e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d0:	f7fd fdd4 	bl	800247c <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	f241 3288 	movw	r2, #5000	; 0x1388
 80048de:	4293      	cmp	r3, r2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e12a      	b.n	8004b3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048e6:	4b8b      	ldr	r3, [pc, #556]	; (8004b14 <HAL_RCC_OscConfig+0x780>)
 80048e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0ed      	beq.n	80048d0 <HAL_RCC_OscConfig+0x53c>
 80048f4:	e015      	b.n	8004922 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f6:	f7fd fdc1 	bl	800247c <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048fc:	e00a      	b.n	8004914 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048fe:	f7fd fdbd 	bl	800247c <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	f241 3288 	movw	r2, #5000	; 0x1388
 800490c:	4293      	cmp	r3, r2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e113      	b.n	8004b3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004914:	4b7f      	ldr	r3, [pc, #508]	; (8004b14 <HAL_RCC_OscConfig+0x780>)
 8004916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1ed      	bne.n	80048fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004922:	7ffb      	ldrb	r3, [r7, #31]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d105      	bne.n	8004934 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004928:	4b7a      	ldr	r3, [pc, #488]	; (8004b14 <HAL_RCC_OscConfig+0x780>)
 800492a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492c:	4a79      	ldr	r2, [pc, #484]	; (8004b14 <HAL_RCC_OscConfig+0x780>)
 800492e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004932:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 80fe 	beq.w	8004b3a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004942:	2b02      	cmp	r3, #2
 8004944:	f040 80d0 	bne.w	8004ae8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004948:	4b72      	ldr	r3, [pc, #456]	; (8004b14 <HAL_RCC_OscConfig+0x780>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f003 0203 	and.w	r2, r3, #3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004958:	429a      	cmp	r2, r3
 800495a:	d130      	bne.n	80049be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004966:	3b01      	subs	r3, #1
 8004968:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800496a:	429a      	cmp	r2, r3
 800496c:	d127      	bne.n	80049be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004978:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800497a:	429a      	cmp	r2, r3
 800497c:	d11f      	bne.n	80049be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004988:	2a07      	cmp	r2, #7
 800498a:	bf14      	ite	ne
 800498c:	2201      	movne	r2, #1
 800498e:	2200      	moveq	r2, #0
 8004990:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004992:	4293      	cmp	r3, r2
 8004994:	d113      	bne.n	80049be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a0:	085b      	lsrs	r3, r3, #1
 80049a2:	3b01      	subs	r3, #1
 80049a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d109      	bne.n	80049be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b4:	085b      	lsrs	r3, r3, #1
 80049b6:	3b01      	subs	r3, #1
 80049b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d06e      	beq.n	8004a9c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	2b0c      	cmp	r3, #12
 80049c2:	d069      	beq.n	8004a98 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80049c4:	4b53      	ldr	r3, [pc, #332]	; (8004b14 <HAL_RCC_OscConfig+0x780>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d105      	bne.n	80049dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80049d0:	4b50      	ldr	r3, [pc, #320]	; (8004b14 <HAL_RCC_OscConfig+0x780>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e0ad      	b.n	8004b3c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80049e0:	4b4c      	ldr	r3, [pc, #304]	; (8004b14 <HAL_RCC_OscConfig+0x780>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a4b      	ldr	r2, [pc, #300]	; (8004b14 <HAL_RCC_OscConfig+0x780>)
 80049e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049ec:	f7fd fd46 	bl	800247c <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f4:	f7fd fd42 	bl	800247c <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e09a      	b.n	8004b3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a06:	4b43      	ldr	r3, [pc, #268]	; (8004b14 <HAL_RCC_OscConfig+0x780>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1f0      	bne.n	80049f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a12:	4b40      	ldr	r3, [pc, #256]	; (8004b14 <HAL_RCC_OscConfig+0x780>)
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	4b40      	ldr	r3, [pc, #256]	; (8004b18 <HAL_RCC_OscConfig+0x784>)
 8004a18:	4013      	ands	r3, r2
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a22:	3a01      	subs	r2, #1
 8004a24:	0112      	lsls	r2, r2, #4
 8004a26:	4311      	orrs	r1, r2
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a2c:	0212      	lsls	r2, r2, #8
 8004a2e:	4311      	orrs	r1, r2
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a34:	0852      	lsrs	r2, r2, #1
 8004a36:	3a01      	subs	r2, #1
 8004a38:	0552      	lsls	r2, r2, #21
 8004a3a:	4311      	orrs	r1, r2
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a40:	0852      	lsrs	r2, r2, #1
 8004a42:	3a01      	subs	r2, #1
 8004a44:	0652      	lsls	r2, r2, #25
 8004a46:	4311      	orrs	r1, r2
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a4c:	0912      	lsrs	r2, r2, #4
 8004a4e:	0452      	lsls	r2, r2, #17
 8004a50:	430a      	orrs	r2, r1
 8004a52:	4930      	ldr	r1, [pc, #192]	; (8004b14 <HAL_RCC_OscConfig+0x780>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a58:	4b2e      	ldr	r3, [pc, #184]	; (8004b14 <HAL_RCC_OscConfig+0x780>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a2d      	ldr	r2, [pc, #180]	; (8004b14 <HAL_RCC_OscConfig+0x780>)
 8004a5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a64:	4b2b      	ldr	r3, [pc, #172]	; (8004b14 <HAL_RCC_OscConfig+0x780>)
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	4a2a      	ldr	r2, [pc, #168]	; (8004b14 <HAL_RCC_OscConfig+0x780>)
 8004a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a70:	f7fd fd04 	bl	800247c <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a78:	f7fd fd00 	bl	800247c <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e058      	b.n	8004b3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a8a:	4b22      	ldr	r3, [pc, #136]	; (8004b14 <HAL_RCC_OscConfig+0x780>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0f0      	beq.n	8004a78 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a96:	e050      	b.n	8004b3a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e04f      	b.n	8004b3c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a9c:	4b1d      	ldr	r3, [pc, #116]	; (8004b14 <HAL_RCC_OscConfig+0x780>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d148      	bne.n	8004b3a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004aa8:	4b1a      	ldr	r3, [pc, #104]	; (8004b14 <HAL_RCC_OscConfig+0x780>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a19      	ldr	r2, [pc, #100]	; (8004b14 <HAL_RCC_OscConfig+0x780>)
 8004aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ab2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ab4:	4b17      	ldr	r3, [pc, #92]	; (8004b14 <HAL_RCC_OscConfig+0x780>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	4a16      	ldr	r2, [pc, #88]	; (8004b14 <HAL_RCC_OscConfig+0x780>)
 8004aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004abe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ac0:	f7fd fcdc 	bl	800247c <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac8:	f7fd fcd8 	bl	800247c <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e030      	b.n	8004b3c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ada:	4b0e      	ldr	r3, [pc, #56]	; (8004b14 <HAL_RCC_OscConfig+0x780>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0f0      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x734>
 8004ae6:	e028      	b.n	8004b3a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	2b0c      	cmp	r3, #12
 8004aec:	d023      	beq.n	8004b36 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aee:	4b09      	ldr	r3, [pc, #36]	; (8004b14 <HAL_RCC_OscConfig+0x780>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a08      	ldr	r2, [pc, #32]	; (8004b14 <HAL_RCC_OscConfig+0x780>)
 8004af4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afa:	f7fd fcbf 	bl	800247c <HAL_GetTick>
 8004afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b00:	e00c      	b.n	8004b1c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b02:	f7fd fcbb 	bl	800247c <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d905      	bls.n	8004b1c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e013      	b.n	8004b3c <HAL_RCC_OscConfig+0x7a8>
 8004b14:	40021000 	.word	0x40021000
 8004b18:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b1c:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <HAL_RCC_OscConfig+0x7b0>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1ec      	bne.n	8004b02 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b28:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <HAL_RCC_OscConfig+0x7b0>)
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	4905      	ldr	r1, [pc, #20]	; (8004b44 <HAL_RCC_OscConfig+0x7b0>)
 8004b2e:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <HAL_RCC_OscConfig+0x7b4>)
 8004b30:	4013      	ands	r3, r2
 8004b32:	60cb      	str	r3, [r1, #12]
 8004b34:	e001      	b.n	8004b3a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e000      	b.n	8004b3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3720      	adds	r7, #32
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40021000 	.word	0x40021000
 8004b48:	feeefffc 	.word	0xfeeefffc

08004b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e0e7      	b.n	8004d30 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b60:	4b75      	ldr	r3, [pc, #468]	; (8004d38 <HAL_RCC_ClockConfig+0x1ec>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d910      	bls.n	8004b90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b6e:	4b72      	ldr	r3, [pc, #456]	; (8004d38 <HAL_RCC_ClockConfig+0x1ec>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f023 0207 	bic.w	r2, r3, #7
 8004b76:	4970      	ldr	r1, [pc, #448]	; (8004d38 <HAL_RCC_ClockConfig+0x1ec>)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b7e:	4b6e      	ldr	r3, [pc, #440]	; (8004d38 <HAL_RCC_ClockConfig+0x1ec>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d001      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e0cf      	b.n	8004d30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d010      	beq.n	8004bbe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	4b66      	ldr	r3, [pc, #408]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d908      	bls.n	8004bbe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bac:	4b63      	ldr	r3, [pc, #396]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	4960      	ldr	r1, [pc, #384]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d04c      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d107      	bne.n	8004be2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bd2:	4b5a      	ldr	r3, [pc, #360]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d121      	bne.n	8004c22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e0a6      	b.n	8004d30 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d107      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bea:	4b54      	ldr	r3, [pc, #336]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d115      	bne.n	8004c22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e09a      	b.n	8004d30 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d107      	bne.n	8004c12 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c02:	4b4e      	ldr	r3, [pc, #312]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d109      	bne.n	8004c22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e08e      	b.n	8004d30 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c12:	4b4a      	ldr	r3, [pc, #296]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e086      	b.n	8004d30 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c22:	4b46      	ldr	r3, [pc, #280]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f023 0203 	bic.w	r2, r3, #3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	4943      	ldr	r1, [pc, #268]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c34:	f7fd fc22 	bl	800247c <HAL_GetTick>
 8004c38:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c3a:	e00a      	b.n	8004c52 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c3c:	f7fd fc1e 	bl	800247c <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e06e      	b.n	8004d30 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c52:	4b3a      	ldr	r3, [pc, #232]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 020c 	and.w	r2, r3, #12
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d1eb      	bne.n	8004c3c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d010      	beq.n	8004c92 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	4b31      	ldr	r3, [pc, #196]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d208      	bcs.n	8004c92 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c80:	4b2e      	ldr	r3, [pc, #184]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	492b      	ldr	r1, [pc, #172]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c92:	4b29      	ldr	r3, [pc, #164]	; (8004d38 <HAL_RCC_ClockConfig+0x1ec>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d210      	bcs.n	8004cc2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca0:	4b25      	ldr	r3, [pc, #148]	; (8004d38 <HAL_RCC_ClockConfig+0x1ec>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f023 0207 	bic.w	r2, r3, #7
 8004ca8:	4923      	ldr	r1, [pc, #140]	; (8004d38 <HAL_RCC_ClockConfig+0x1ec>)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb0:	4b21      	ldr	r3, [pc, #132]	; (8004d38 <HAL_RCC_ClockConfig+0x1ec>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d001      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e036      	b.n	8004d30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0304 	and.w	r3, r3, #4
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d008      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cce:	4b1b      	ldr	r3, [pc, #108]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	4918      	ldr	r1, [pc, #96]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d009      	beq.n	8004d00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cec:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	4910      	ldr	r1, [pc, #64]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d00:	f000 f824 	bl	8004d4c <HAL_RCC_GetSysClockFreq>
 8004d04:	4602      	mov	r2, r0
 8004d06:	4b0d      	ldr	r3, [pc, #52]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	091b      	lsrs	r3, r3, #4
 8004d0c:	f003 030f 	and.w	r3, r3, #15
 8004d10:	490b      	ldr	r1, [pc, #44]	; (8004d40 <HAL_RCC_ClockConfig+0x1f4>)
 8004d12:	5ccb      	ldrb	r3, [r1, r3]
 8004d14:	f003 031f 	and.w	r3, r3, #31
 8004d18:	fa22 f303 	lsr.w	r3, r2, r3
 8004d1c:	4a09      	ldr	r2, [pc, #36]	; (8004d44 <HAL_RCC_ClockConfig+0x1f8>)
 8004d1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d20:	4b09      	ldr	r3, [pc, #36]	; (8004d48 <HAL_RCC_ClockConfig+0x1fc>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fd fb59 	bl	80023dc <HAL_InitTick>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d2e:	7afb      	ldrb	r3, [r7, #11]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40022000 	.word	0x40022000
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	0800cb10 	.word	0x0800cb10
 8004d44:	20000000 	.word	0x20000000
 8004d48:	20000004 	.word	0x20000004

08004d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b089      	sub	sp, #36	; 0x24
 8004d50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	61fb      	str	r3, [r7, #28]
 8004d56:	2300      	movs	r3, #0
 8004d58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d5a:	4b3e      	ldr	r3, [pc, #248]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 030c 	and.w	r3, r3, #12
 8004d62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d64:	4b3b      	ldr	r3, [pc, #236]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f003 0303 	and.w	r3, r3, #3
 8004d6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d005      	beq.n	8004d80 <HAL_RCC_GetSysClockFreq+0x34>
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	2b0c      	cmp	r3, #12
 8004d78:	d121      	bne.n	8004dbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d11e      	bne.n	8004dbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d80:	4b34      	ldr	r3, [pc, #208]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0308 	and.w	r3, r3, #8
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d107      	bne.n	8004d9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d8c:	4b31      	ldr	r3, [pc, #196]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d92:	0a1b      	lsrs	r3, r3, #8
 8004d94:	f003 030f 	and.w	r3, r3, #15
 8004d98:	61fb      	str	r3, [r7, #28]
 8004d9a:	e005      	b.n	8004da8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d9c:	4b2d      	ldr	r3, [pc, #180]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	091b      	lsrs	r3, r3, #4
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004da8:	4a2b      	ldr	r2, [pc, #172]	; (8004e58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10d      	bne.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dbc:	e00a      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d102      	bne.n	8004dca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004dc4:	4b25      	ldr	r3, [pc, #148]	; (8004e5c <HAL_RCC_GetSysClockFreq+0x110>)
 8004dc6:	61bb      	str	r3, [r7, #24]
 8004dc8:	e004      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d101      	bne.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004dd0:	4b23      	ldr	r3, [pc, #140]	; (8004e60 <HAL_RCC_GetSysClockFreq+0x114>)
 8004dd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	2b0c      	cmp	r3, #12
 8004dd8:	d134      	bne.n	8004e44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dda:	4b1e      	ldr	r3, [pc, #120]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f003 0303 	and.w	r3, r3, #3
 8004de2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d003      	beq.n	8004df2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d003      	beq.n	8004df8 <HAL_RCC_GetSysClockFreq+0xac>
 8004df0:	e005      	b.n	8004dfe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004df2:	4b1a      	ldr	r3, [pc, #104]	; (8004e5c <HAL_RCC_GetSysClockFreq+0x110>)
 8004df4:	617b      	str	r3, [r7, #20]
      break;
 8004df6:	e005      	b.n	8004e04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004df8:	4b19      	ldr	r3, [pc, #100]	; (8004e60 <HAL_RCC_GetSysClockFreq+0x114>)
 8004dfa:	617b      	str	r3, [r7, #20]
      break;
 8004dfc:	e002      	b.n	8004e04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	617b      	str	r3, [r7, #20]
      break;
 8004e02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e04:	4b13      	ldr	r3, [pc, #76]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	091b      	lsrs	r3, r3, #4
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	3301      	adds	r3, #1
 8004e10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e12:	4b10      	ldr	r3, [pc, #64]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	0a1b      	lsrs	r3, r3, #8
 8004e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	fb03 f202 	mul.w	r2, r3, r2
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e2a:	4b0a      	ldr	r3, [pc, #40]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	0e5b      	lsrs	r3, r3, #25
 8004e30:	f003 0303 	and.w	r3, r3, #3
 8004e34:	3301      	adds	r3, #1
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e44:	69bb      	ldr	r3, [r7, #24]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3724      	adds	r7, #36	; 0x24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40021000 	.word	0x40021000
 8004e58:	0800cb28 	.word	0x0800cb28
 8004e5c:	00f42400 	.word	0x00f42400
 8004e60:	007a1200 	.word	0x007a1200

08004e64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e68:	4b03      	ldr	r3, [pc, #12]	; (8004e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	20000000 	.word	0x20000000

08004e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e80:	f7ff fff0 	bl	8004e64 <HAL_RCC_GetHCLKFreq>
 8004e84:	4602      	mov	r2, r0
 8004e86:	4b06      	ldr	r3, [pc, #24]	; (8004ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	0a1b      	lsrs	r3, r3, #8
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	4904      	ldr	r1, [pc, #16]	; (8004ea4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e92:	5ccb      	ldrb	r3, [r1, r3]
 8004e94:	f003 031f 	and.w	r3, r3, #31
 8004e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40021000 	.word	0x40021000
 8004ea4:	0800cb20 	.word	0x0800cb20

08004ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004eac:	f7ff ffda 	bl	8004e64 <HAL_RCC_GetHCLKFreq>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	4b06      	ldr	r3, [pc, #24]	; (8004ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	0adb      	lsrs	r3, r3, #11
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	4904      	ldr	r1, [pc, #16]	; (8004ed0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ebe:	5ccb      	ldrb	r3, [r1, r3]
 8004ec0:	f003 031f 	and.w	r3, r3, #31
 8004ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	40021000 	.word	0x40021000
 8004ed0:	0800cb20 	.word	0x0800cb20

08004ed4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004edc:	2300      	movs	r3, #0
 8004ede:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ee0:	4b2a      	ldr	r3, [pc, #168]	; (8004f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004eec:	f7ff f9ee 	bl	80042cc <HAL_PWREx_GetVoltageRange>
 8004ef0:	6178      	str	r0, [r7, #20]
 8004ef2:	e014      	b.n	8004f1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ef4:	4b25      	ldr	r3, [pc, #148]	; (8004f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef8:	4a24      	ldr	r2, [pc, #144]	; (8004f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004efe:	6593      	str	r3, [r2, #88]	; 0x58
 8004f00:	4b22      	ldr	r3, [pc, #136]	; (8004f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f08:	60fb      	str	r3, [r7, #12]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f0c:	f7ff f9de 	bl	80042cc <HAL_PWREx_GetVoltageRange>
 8004f10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f12:	4b1e      	ldr	r3, [pc, #120]	; (8004f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f16:	4a1d      	ldr	r2, [pc, #116]	; (8004f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f24:	d10b      	bne.n	8004f3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b80      	cmp	r3, #128	; 0x80
 8004f2a:	d919      	bls.n	8004f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2ba0      	cmp	r3, #160	; 0xa0
 8004f30:	d902      	bls.n	8004f38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f32:	2302      	movs	r3, #2
 8004f34:	613b      	str	r3, [r7, #16]
 8004f36:	e013      	b.n	8004f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f38:	2301      	movs	r3, #1
 8004f3a:	613b      	str	r3, [r7, #16]
 8004f3c:	e010      	b.n	8004f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b80      	cmp	r3, #128	; 0x80
 8004f42:	d902      	bls.n	8004f4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f44:	2303      	movs	r3, #3
 8004f46:	613b      	str	r3, [r7, #16]
 8004f48:	e00a      	b.n	8004f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b80      	cmp	r3, #128	; 0x80
 8004f4e:	d102      	bne.n	8004f56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f50:	2302      	movs	r3, #2
 8004f52:	613b      	str	r3, [r7, #16]
 8004f54:	e004      	b.n	8004f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b70      	cmp	r3, #112	; 0x70
 8004f5a:	d101      	bne.n	8004f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f60:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f023 0207 	bic.w	r2, r3, #7
 8004f68:	4909      	ldr	r1, [pc, #36]	; (8004f90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f70:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d001      	beq.n	8004f82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e000      	b.n	8004f84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	40022000 	.word	0x40022000

08004f94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d041      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fb4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fb8:	d02a      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004fba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fbe:	d824      	bhi.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004fc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fc4:	d008      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004fc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fca:	d81e      	bhi.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00a      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004fd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fd4:	d010      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004fd6:	e018      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fd8:	4b86      	ldr	r3, [pc, #536]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	4a85      	ldr	r2, [pc, #532]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fe4:	e015      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	3304      	adds	r3, #4
 8004fea:	2100      	movs	r1, #0
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fabb 	bl	8005568 <RCCEx_PLLSAI1_Config>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ff6:	e00c      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	3320      	adds	r3, #32
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fba6 	bl	8005750 <RCCEx_PLLSAI2_Config>
 8005004:	4603      	mov	r3, r0
 8005006:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005008:	e003      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	74fb      	strb	r3, [r7, #19]
      break;
 800500e:	e000      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005010:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005012:	7cfb      	ldrb	r3, [r7, #19]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10b      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005018:	4b76      	ldr	r3, [pc, #472]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800501a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005026:	4973      	ldr	r1, [pc, #460]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005028:	4313      	orrs	r3, r2
 800502a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800502e:	e001      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005030:	7cfb      	ldrb	r3, [r7, #19]
 8005032:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d041      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005044:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005048:	d02a      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800504a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800504e:	d824      	bhi.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005050:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005054:	d008      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005056:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800505a:	d81e      	bhi.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00a      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005064:	d010      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005066:	e018      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005068:	4b62      	ldr	r3, [pc, #392]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	4a61      	ldr	r2, [pc, #388]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800506e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005072:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005074:	e015      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	3304      	adds	r3, #4
 800507a:	2100      	movs	r1, #0
 800507c:	4618      	mov	r0, r3
 800507e:	f000 fa73 	bl	8005568 <RCCEx_PLLSAI1_Config>
 8005082:	4603      	mov	r3, r0
 8005084:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005086:	e00c      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3320      	adds	r3, #32
 800508c:	2100      	movs	r1, #0
 800508e:	4618      	mov	r0, r3
 8005090:	f000 fb5e 	bl	8005750 <RCCEx_PLLSAI2_Config>
 8005094:	4603      	mov	r3, r0
 8005096:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005098:	e003      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	74fb      	strb	r3, [r7, #19]
      break;
 800509e:	e000      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80050a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050a2:	7cfb      	ldrb	r3, [r7, #19]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10b      	bne.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80050a8:	4b52      	ldr	r3, [pc, #328]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050b6:	494f      	ldr	r1, [pc, #316]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050be:	e001      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c0:	7cfb      	ldrb	r3, [r7, #19]
 80050c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f000 80a0 	beq.w	8005212 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050d2:	2300      	movs	r3, #0
 80050d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050d6:	4b47      	ldr	r3, [pc, #284]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80050e2:	2301      	movs	r3, #1
 80050e4:	e000      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80050e6:	2300      	movs	r3, #0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00d      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050ec:	4b41      	ldr	r3, [pc, #260]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f0:	4a40      	ldr	r2, [pc, #256]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f6:	6593      	str	r3, [r2, #88]	; 0x58
 80050f8:	4b3e      	ldr	r3, [pc, #248]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005100:	60bb      	str	r3, [r7, #8]
 8005102:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005104:	2301      	movs	r3, #1
 8005106:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005108:	4b3b      	ldr	r3, [pc, #236]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a3a      	ldr	r2, [pc, #232]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800510e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005112:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005114:	f7fd f9b2 	bl	800247c <HAL_GetTick>
 8005118:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800511a:	e009      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800511c:	f7fd f9ae 	bl	800247c <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d902      	bls.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	74fb      	strb	r3, [r7, #19]
        break;
 800512e:	e005      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005130:	4b31      	ldr	r3, [pc, #196]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005138:	2b00      	cmp	r3, #0
 800513a:	d0ef      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800513c:	7cfb      	ldrb	r3, [r7, #19]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d15c      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005142:	4b2c      	ldr	r3, [pc, #176]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800514c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d01f      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	429a      	cmp	r2, r3
 800515e:	d019      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005160:	4b24      	ldr	r3, [pc, #144]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800516a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800516c:	4b21      	ldr	r3, [pc, #132]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800516e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005172:	4a20      	ldr	r2, [pc, #128]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800517c:	4b1d      	ldr	r3, [pc, #116]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800517e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005182:	4a1c      	ldr	r2, [pc, #112]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800518c:	4a19      	ldr	r2, [pc, #100]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b00      	cmp	r3, #0
 800519c:	d016      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519e:	f7fd f96d 	bl	800247c <HAL_GetTick>
 80051a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051a4:	e00b      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051a6:	f7fd f969 	bl	800247c <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d902      	bls.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	74fb      	strb	r3, [r7, #19]
            break;
 80051bc:	e006      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051be:	4b0d      	ldr	r3, [pc, #52]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d0ec      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80051cc:	7cfb      	ldrb	r3, [r7, #19]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10c      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051d2:	4b08      	ldr	r3, [pc, #32]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051e2:	4904      	ldr	r1, [pc, #16]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80051ea:	e009      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051ec:	7cfb      	ldrb	r3, [r7, #19]
 80051ee:	74bb      	strb	r3, [r7, #18]
 80051f0:	e006      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80051f2:	bf00      	nop
 80051f4:	40021000 	.word	0x40021000
 80051f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051fc:	7cfb      	ldrb	r3, [r7, #19]
 80051fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005200:	7c7b      	ldrb	r3, [r7, #17]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d105      	bne.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005206:	4b9e      	ldr	r3, [pc, #632]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800520a:	4a9d      	ldr	r2, [pc, #628]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800520c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005210:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00a      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800521e:	4b98      	ldr	r3, [pc, #608]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005224:	f023 0203 	bic.w	r2, r3, #3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522c:	4994      	ldr	r1, [pc, #592]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800522e:	4313      	orrs	r3, r2
 8005230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00a      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005240:	4b8f      	ldr	r3, [pc, #572]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005246:	f023 020c 	bic.w	r2, r3, #12
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524e:	498c      	ldr	r1, [pc, #560]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005250:	4313      	orrs	r3, r2
 8005252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0304 	and.w	r3, r3, #4
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005262:	4b87      	ldr	r3, [pc, #540]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005268:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005270:	4983      	ldr	r1, [pc, #524]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005272:	4313      	orrs	r3, r2
 8005274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0308 	and.w	r3, r3, #8
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00a      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005284:	4b7e      	ldr	r3, [pc, #504]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005292:	497b      	ldr	r1, [pc, #492]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005294:	4313      	orrs	r3, r2
 8005296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0310 	and.w	r3, r3, #16
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00a      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052a6:	4b76      	ldr	r3, [pc, #472]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052b4:	4972      	ldr	r1, [pc, #456]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0320 	and.w	r3, r3, #32
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00a      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052c8:	4b6d      	ldr	r3, [pc, #436]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052d6:	496a      	ldr	r1, [pc, #424]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052ea:	4b65      	ldr	r3, [pc, #404]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f8:	4961      	ldr	r1, [pc, #388]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00a      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800530c:	4b5c      	ldr	r3, [pc, #368]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800530e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005312:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800531a:	4959      	ldr	r1, [pc, #356]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800531c:	4313      	orrs	r3, r2
 800531e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800532e:	4b54      	ldr	r3, [pc, #336]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005334:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800533c:	4950      	ldr	r1, [pc, #320]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800533e:	4313      	orrs	r3, r2
 8005340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00a      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005350:	4b4b      	ldr	r3, [pc, #300]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005356:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535e:	4948      	ldr	r1, [pc, #288]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005360:	4313      	orrs	r3, r2
 8005362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005372:	4b43      	ldr	r3, [pc, #268]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005378:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005380:	493f      	ldr	r1, [pc, #252]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005382:	4313      	orrs	r3, r2
 8005384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d028      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005394:	4b3a      	ldr	r3, [pc, #232]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053a2:	4937      	ldr	r1, [pc, #220]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053b2:	d106      	bne.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053b4:	4b32      	ldr	r3, [pc, #200]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	4a31      	ldr	r2, [pc, #196]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053be:	60d3      	str	r3, [r2, #12]
 80053c0:	e011      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053ca:	d10c      	bne.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3304      	adds	r3, #4
 80053d0:	2101      	movs	r1, #1
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 f8c8 	bl	8005568 <RCCEx_PLLSAI1_Config>
 80053d8:	4603      	mov	r3, r0
 80053da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80053dc:	7cfb      	ldrb	r3, [r7, #19]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80053e2:	7cfb      	ldrb	r3, [r7, #19]
 80053e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d028      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053f2:	4b23      	ldr	r3, [pc, #140]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005400:	491f      	ldr	r1, [pc, #124]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005402:	4313      	orrs	r3, r2
 8005404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005410:	d106      	bne.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005412:	4b1b      	ldr	r3, [pc, #108]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	4a1a      	ldr	r2, [pc, #104]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005418:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800541c:	60d3      	str	r3, [r2, #12]
 800541e:	e011      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005424:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005428:	d10c      	bne.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	3304      	adds	r3, #4
 800542e:	2101      	movs	r1, #1
 8005430:	4618      	mov	r0, r3
 8005432:	f000 f899 	bl	8005568 <RCCEx_PLLSAI1_Config>
 8005436:	4603      	mov	r3, r0
 8005438:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800543a:	7cfb      	ldrb	r3, [r7, #19]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005440:	7cfb      	ldrb	r3, [r7, #19]
 8005442:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d02b      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005450:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005456:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800545e:	4908      	ldr	r1, [pc, #32]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005460:	4313      	orrs	r3, r2
 8005462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800546a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800546e:	d109      	bne.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005470:	4b03      	ldr	r3, [pc, #12]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	4a02      	ldr	r2, [pc, #8]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800547a:	60d3      	str	r3, [r2, #12]
 800547c:	e014      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800547e:	bf00      	nop
 8005480:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005488:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800548c:	d10c      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	3304      	adds	r3, #4
 8005492:	2101      	movs	r1, #1
 8005494:	4618      	mov	r0, r3
 8005496:	f000 f867 	bl	8005568 <RCCEx_PLLSAI1_Config>
 800549a:	4603      	mov	r3, r0
 800549c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800549e:	7cfb      	ldrb	r3, [r7, #19]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80054a4:	7cfb      	ldrb	r3, [r7, #19]
 80054a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d02f      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054b4:	4b2b      	ldr	r3, [pc, #172]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054c2:	4928      	ldr	r1, [pc, #160]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054d2:	d10d      	bne.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3304      	adds	r3, #4
 80054d8:	2102      	movs	r1, #2
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 f844 	bl	8005568 <RCCEx_PLLSAI1_Config>
 80054e0:	4603      	mov	r3, r0
 80054e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054e4:	7cfb      	ldrb	r3, [r7, #19]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d014      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80054ea:	7cfb      	ldrb	r3, [r7, #19]
 80054ec:	74bb      	strb	r3, [r7, #18]
 80054ee:	e011      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054f8:	d10c      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	3320      	adds	r3, #32
 80054fe:	2102      	movs	r1, #2
 8005500:	4618      	mov	r0, r3
 8005502:	f000 f925 	bl	8005750 <RCCEx_PLLSAI2_Config>
 8005506:	4603      	mov	r3, r0
 8005508:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800550a:	7cfb      	ldrb	r3, [r7, #19]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d001      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005510:	7cfb      	ldrb	r3, [r7, #19]
 8005512:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00a      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005520:	4b10      	ldr	r3, [pc, #64]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005526:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800552e:	490d      	ldr	r1, [pc, #52]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005530:	4313      	orrs	r3, r2
 8005532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00b      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005542:	4b08      	ldr	r3, [pc, #32]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005548:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005552:	4904      	ldr	r1, [pc, #16]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005554:	4313      	orrs	r3, r2
 8005556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800555a:	7cbb      	ldrb	r3, [r7, #18]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	40021000 	.word	0x40021000

08005568 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005572:	2300      	movs	r3, #0
 8005574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005576:	4b75      	ldr	r3, [pc, #468]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d018      	beq.n	80055b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005582:	4b72      	ldr	r3, [pc, #456]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f003 0203 	and.w	r2, r3, #3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	429a      	cmp	r2, r3
 8005590:	d10d      	bne.n	80055ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
       ||
 8005596:	2b00      	cmp	r3, #0
 8005598:	d009      	beq.n	80055ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800559a:	4b6c      	ldr	r3, [pc, #432]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	091b      	lsrs	r3, r3, #4
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
       ||
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d047      	beq.n	800563e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	73fb      	strb	r3, [r7, #15]
 80055b2:	e044      	b.n	800563e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b03      	cmp	r3, #3
 80055ba:	d018      	beq.n	80055ee <RCCEx_PLLSAI1_Config+0x86>
 80055bc:	2b03      	cmp	r3, #3
 80055be:	d825      	bhi.n	800560c <RCCEx_PLLSAI1_Config+0xa4>
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d002      	beq.n	80055ca <RCCEx_PLLSAI1_Config+0x62>
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d009      	beq.n	80055dc <RCCEx_PLLSAI1_Config+0x74>
 80055c8:	e020      	b.n	800560c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80055ca:	4b60      	ldr	r3, [pc, #384]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d11d      	bne.n	8005612 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055da:	e01a      	b.n	8005612 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055dc:	4b5b      	ldr	r3, [pc, #364]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d116      	bne.n	8005616 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055ec:	e013      	b.n	8005616 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055ee:	4b57      	ldr	r3, [pc, #348]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10f      	bne.n	800561a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055fa:	4b54      	ldr	r3, [pc, #336]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d109      	bne.n	800561a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800560a:	e006      	b.n	800561a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	73fb      	strb	r3, [r7, #15]
      break;
 8005610:	e004      	b.n	800561c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005612:	bf00      	nop
 8005614:	e002      	b.n	800561c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005616:	bf00      	nop
 8005618:	e000      	b.n	800561c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800561a:	bf00      	nop
    }

    if(status == HAL_OK)
 800561c:	7bfb      	ldrb	r3, [r7, #15]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10d      	bne.n	800563e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005622:	4b4a      	ldr	r3, [pc, #296]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6819      	ldr	r1, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	3b01      	subs	r3, #1
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	430b      	orrs	r3, r1
 8005638:	4944      	ldr	r1, [pc, #272]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 800563a:	4313      	orrs	r3, r2
 800563c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800563e:	7bfb      	ldrb	r3, [r7, #15]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d17d      	bne.n	8005740 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005644:	4b41      	ldr	r3, [pc, #260]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a40      	ldr	r2, [pc, #256]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 800564a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800564e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005650:	f7fc ff14 	bl	800247c <HAL_GetTick>
 8005654:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005656:	e009      	b.n	800566c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005658:	f7fc ff10 	bl	800247c <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d902      	bls.n	800566c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	73fb      	strb	r3, [r7, #15]
        break;
 800566a:	e005      	b.n	8005678 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800566c:	4b37      	ldr	r3, [pc, #220]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1ef      	bne.n	8005658 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005678:	7bfb      	ldrb	r3, [r7, #15]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d160      	bne.n	8005740 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d111      	bne.n	80056a8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005684:	4b31      	ldr	r3, [pc, #196]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800568c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6892      	ldr	r2, [r2, #8]
 8005694:	0211      	lsls	r1, r2, #8
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	68d2      	ldr	r2, [r2, #12]
 800569a:	0912      	lsrs	r2, r2, #4
 800569c:	0452      	lsls	r2, r2, #17
 800569e:	430a      	orrs	r2, r1
 80056a0:	492a      	ldr	r1, [pc, #168]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	610b      	str	r3, [r1, #16]
 80056a6:	e027      	b.n	80056f8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d112      	bne.n	80056d4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056ae:	4b27      	ldr	r3, [pc, #156]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80056b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	6892      	ldr	r2, [r2, #8]
 80056be:	0211      	lsls	r1, r2, #8
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	6912      	ldr	r2, [r2, #16]
 80056c4:	0852      	lsrs	r2, r2, #1
 80056c6:	3a01      	subs	r2, #1
 80056c8:	0552      	lsls	r2, r2, #21
 80056ca:	430a      	orrs	r2, r1
 80056cc:	491f      	ldr	r1, [pc, #124]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	610b      	str	r3, [r1, #16]
 80056d2:	e011      	b.n	80056f8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056d4:	4b1d      	ldr	r3, [pc, #116]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80056dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	6892      	ldr	r2, [r2, #8]
 80056e4:	0211      	lsls	r1, r2, #8
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	6952      	ldr	r2, [r2, #20]
 80056ea:	0852      	lsrs	r2, r2, #1
 80056ec:	3a01      	subs	r2, #1
 80056ee:	0652      	lsls	r2, r2, #25
 80056f0:	430a      	orrs	r2, r1
 80056f2:	4916      	ldr	r1, [pc, #88]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80056f8:	4b14      	ldr	r3, [pc, #80]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a13      	ldr	r2, [pc, #76]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005702:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005704:	f7fc feba 	bl	800247c <HAL_GetTick>
 8005708:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800570a:	e009      	b.n	8005720 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800570c:	f7fc feb6 	bl	800247c <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d902      	bls.n	8005720 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	73fb      	strb	r3, [r7, #15]
          break;
 800571e:	e005      	b.n	800572c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005720:	4b0a      	ldr	r3, [pc, #40]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0ef      	beq.n	800570c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800572c:	7bfb      	ldrb	r3, [r7, #15]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d106      	bne.n	8005740 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005732:	4b06      	ldr	r3, [pc, #24]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005734:	691a      	ldr	r2, [r3, #16]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	4904      	ldr	r1, [pc, #16]	; (800574c <RCCEx_PLLSAI1_Config+0x1e4>)
 800573c:	4313      	orrs	r3, r2
 800573e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005740:	7bfb      	ldrb	r3, [r7, #15]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	40021000 	.word	0x40021000

08005750 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800575a:	2300      	movs	r3, #0
 800575c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800575e:	4b6a      	ldr	r3, [pc, #424]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f003 0303 	and.w	r3, r3, #3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d018      	beq.n	800579c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800576a:	4b67      	ldr	r3, [pc, #412]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f003 0203 	and.w	r2, r3, #3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d10d      	bne.n	8005796 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
       ||
 800577e:	2b00      	cmp	r3, #0
 8005780:	d009      	beq.n	8005796 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005782:	4b61      	ldr	r3, [pc, #388]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	091b      	lsrs	r3, r3, #4
 8005788:	f003 0307 	and.w	r3, r3, #7
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
       ||
 8005792:	429a      	cmp	r2, r3
 8005794:	d047      	beq.n	8005826 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	73fb      	strb	r3, [r7, #15]
 800579a:	e044      	b.n	8005826 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b03      	cmp	r3, #3
 80057a2:	d018      	beq.n	80057d6 <RCCEx_PLLSAI2_Config+0x86>
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d825      	bhi.n	80057f4 <RCCEx_PLLSAI2_Config+0xa4>
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d002      	beq.n	80057b2 <RCCEx_PLLSAI2_Config+0x62>
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d009      	beq.n	80057c4 <RCCEx_PLLSAI2_Config+0x74>
 80057b0:	e020      	b.n	80057f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057b2:	4b55      	ldr	r3, [pc, #340]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d11d      	bne.n	80057fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057c2:	e01a      	b.n	80057fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057c4:	4b50      	ldr	r3, [pc, #320]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d116      	bne.n	80057fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057d4:	e013      	b.n	80057fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057d6:	4b4c      	ldr	r3, [pc, #304]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10f      	bne.n	8005802 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057e2:	4b49      	ldr	r3, [pc, #292]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d109      	bne.n	8005802 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057f2:	e006      	b.n	8005802 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	73fb      	strb	r3, [r7, #15]
      break;
 80057f8:	e004      	b.n	8005804 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057fa:	bf00      	nop
 80057fc:	e002      	b.n	8005804 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057fe:	bf00      	nop
 8005800:	e000      	b.n	8005804 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005802:	bf00      	nop
    }

    if(status == HAL_OK)
 8005804:	7bfb      	ldrb	r3, [r7, #15]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10d      	bne.n	8005826 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800580a:	4b3f      	ldr	r3, [pc, #252]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6819      	ldr	r1, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	3b01      	subs	r3, #1
 800581c:	011b      	lsls	r3, r3, #4
 800581e:	430b      	orrs	r3, r1
 8005820:	4939      	ldr	r1, [pc, #228]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005822:	4313      	orrs	r3, r2
 8005824:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005826:	7bfb      	ldrb	r3, [r7, #15]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d167      	bne.n	80058fc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800582c:	4b36      	ldr	r3, [pc, #216]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a35      	ldr	r2, [pc, #212]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005838:	f7fc fe20 	bl	800247c <HAL_GetTick>
 800583c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800583e:	e009      	b.n	8005854 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005840:	f7fc fe1c 	bl	800247c <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d902      	bls.n	8005854 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	73fb      	strb	r3, [r7, #15]
        break;
 8005852:	e005      	b.n	8005860 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005854:	4b2c      	ldr	r3, [pc, #176]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1ef      	bne.n	8005840 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d14a      	bne.n	80058fc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d111      	bne.n	8005890 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800586c:	4b26      	ldr	r3, [pc, #152]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	6892      	ldr	r2, [r2, #8]
 800587c:	0211      	lsls	r1, r2, #8
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	68d2      	ldr	r2, [r2, #12]
 8005882:	0912      	lsrs	r2, r2, #4
 8005884:	0452      	lsls	r2, r2, #17
 8005886:	430a      	orrs	r2, r1
 8005888:	491f      	ldr	r1, [pc, #124]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 800588a:	4313      	orrs	r3, r2
 800588c:	614b      	str	r3, [r1, #20]
 800588e:	e011      	b.n	80058b4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005890:	4b1d      	ldr	r3, [pc, #116]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005898:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6892      	ldr	r2, [r2, #8]
 80058a0:	0211      	lsls	r1, r2, #8
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	6912      	ldr	r2, [r2, #16]
 80058a6:	0852      	lsrs	r2, r2, #1
 80058a8:	3a01      	subs	r2, #1
 80058aa:	0652      	lsls	r2, r2, #25
 80058ac:	430a      	orrs	r2, r1
 80058ae:	4916      	ldr	r1, [pc, #88]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80058b4:	4b14      	ldr	r3, [pc, #80]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a13      	ldr	r2, [pc, #76]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c0:	f7fc fddc 	bl	800247c <HAL_GetTick>
 80058c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058c6:	e009      	b.n	80058dc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058c8:	f7fc fdd8 	bl	800247c <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d902      	bls.n	80058dc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	73fb      	strb	r3, [r7, #15]
          break;
 80058da:	e005      	b.n	80058e8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058dc:	4b0a      	ldr	r3, [pc, #40]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0ef      	beq.n	80058c8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d106      	bne.n	80058fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80058ee:	4b06      	ldr	r3, [pc, #24]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058f0:	695a      	ldr	r2, [r3, #20]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	4904      	ldr	r1, [pc, #16]	; (8005908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	40021000 	.word	0x40021000

0800590c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e049      	b.n	80059b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d106      	bne.n	8005938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7fc fa1c 	bl	8001d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	3304      	adds	r3, #4
 8005948:	4619      	mov	r1, r3
 800594a:	4610      	mov	r0, r2
 800594c:	f000 ffd0 	bl	80068f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3708      	adds	r7, #8
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
	...

080059bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d001      	beq.n	80059d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e04f      	b.n	8005a74 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68da      	ldr	r2, [r3, #12]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0201 	orr.w	r2, r2, #1
 80059ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a23      	ldr	r2, [pc, #140]	; (8005a80 <HAL_TIM_Base_Start_IT+0xc4>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d01d      	beq.n	8005a32 <HAL_TIM_Base_Start_IT+0x76>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059fe:	d018      	beq.n	8005a32 <HAL_TIM_Base_Start_IT+0x76>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a1f      	ldr	r2, [pc, #124]	; (8005a84 <HAL_TIM_Base_Start_IT+0xc8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d013      	beq.n	8005a32 <HAL_TIM_Base_Start_IT+0x76>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a1e      	ldr	r2, [pc, #120]	; (8005a88 <HAL_TIM_Base_Start_IT+0xcc>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d00e      	beq.n	8005a32 <HAL_TIM_Base_Start_IT+0x76>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a1c      	ldr	r2, [pc, #112]	; (8005a8c <HAL_TIM_Base_Start_IT+0xd0>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d009      	beq.n	8005a32 <HAL_TIM_Base_Start_IT+0x76>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a1b      	ldr	r2, [pc, #108]	; (8005a90 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d004      	beq.n	8005a32 <HAL_TIM_Base_Start_IT+0x76>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a19      	ldr	r2, [pc, #100]	; (8005a94 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d115      	bne.n	8005a5e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	4b17      	ldr	r3, [pc, #92]	; (8005a98 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2b06      	cmp	r3, #6
 8005a42:	d015      	beq.n	8005a70 <HAL_TIM_Base_Start_IT+0xb4>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a4a:	d011      	beq.n	8005a70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f042 0201 	orr.w	r2, r2, #1
 8005a5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a5c:	e008      	b.n	8005a70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f042 0201 	orr.w	r2, r2, #1
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	e000      	b.n	8005a72 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	40012c00 	.word	0x40012c00
 8005a84:	40000400 	.word	0x40000400
 8005a88:	40000800 	.word	0x40000800
 8005a8c:	40000c00 	.word	0x40000c00
 8005a90:	40013400 	.word	0x40013400
 8005a94:	40014000 	.word	0x40014000
 8005a98:	00010007 	.word	0x00010007

08005a9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e049      	b.n	8005b42 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d106      	bne.n	8005ac8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f841 	bl	8005b4a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	3304      	adds	r3, #4
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4610      	mov	r0, r2
 8005adc:	f000 ff08 	bl	80068f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b083      	sub	sp, #12
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b52:	bf00      	nop
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
	...

08005b60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d109      	bne.n	8005b84 <HAL_TIM_PWM_Start+0x24>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	bf14      	ite	ne
 8005b7c:	2301      	movne	r3, #1
 8005b7e:	2300      	moveq	r3, #0
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	e03c      	b.n	8005bfe <HAL_TIM_PWM_Start+0x9e>
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2b04      	cmp	r3, #4
 8005b88:	d109      	bne.n	8005b9e <HAL_TIM_PWM_Start+0x3e>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	bf14      	ite	ne
 8005b96:	2301      	movne	r3, #1
 8005b98:	2300      	moveq	r3, #0
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	e02f      	b.n	8005bfe <HAL_TIM_PWM_Start+0x9e>
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	2b08      	cmp	r3, #8
 8005ba2:	d109      	bne.n	8005bb8 <HAL_TIM_PWM_Start+0x58>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	bf14      	ite	ne
 8005bb0:	2301      	movne	r3, #1
 8005bb2:	2300      	moveq	r3, #0
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	e022      	b.n	8005bfe <HAL_TIM_PWM_Start+0x9e>
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	2b0c      	cmp	r3, #12
 8005bbc:	d109      	bne.n	8005bd2 <HAL_TIM_PWM_Start+0x72>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	bf14      	ite	ne
 8005bca:	2301      	movne	r3, #1
 8005bcc:	2300      	moveq	r3, #0
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	e015      	b.n	8005bfe <HAL_TIM_PWM_Start+0x9e>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b10      	cmp	r3, #16
 8005bd6:	d109      	bne.n	8005bec <HAL_TIM_PWM_Start+0x8c>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	bf14      	ite	ne
 8005be4:	2301      	movne	r3, #1
 8005be6:	2300      	moveq	r3, #0
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	e008      	b.n	8005bfe <HAL_TIM_PWM_Start+0x9e>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	bf14      	ite	ne
 8005bf8:	2301      	movne	r3, #1
 8005bfa:	2300      	moveq	r3, #0
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e09c      	b.n	8005d40 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d104      	bne.n	8005c16 <HAL_TIM_PWM_Start+0xb6>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c14:	e023      	b.n	8005c5e <HAL_TIM_PWM_Start+0xfe>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b04      	cmp	r3, #4
 8005c1a:	d104      	bne.n	8005c26 <HAL_TIM_PWM_Start+0xc6>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2202      	movs	r2, #2
 8005c20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c24:	e01b      	b.n	8005c5e <HAL_TIM_PWM_Start+0xfe>
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b08      	cmp	r3, #8
 8005c2a:	d104      	bne.n	8005c36 <HAL_TIM_PWM_Start+0xd6>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c34:	e013      	b.n	8005c5e <HAL_TIM_PWM_Start+0xfe>
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b0c      	cmp	r3, #12
 8005c3a:	d104      	bne.n	8005c46 <HAL_TIM_PWM_Start+0xe6>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c44:	e00b      	b.n	8005c5e <HAL_TIM_PWM_Start+0xfe>
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b10      	cmp	r3, #16
 8005c4a:	d104      	bne.n	8005c56 <HAL_TIM_PWM_Start+0xf6>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c54:	e003      	b.n	8005c5e <HAL_TIM_PWM_Start+0xfe>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2202      	movs	r2, #2
 8005c5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2201      	movs	r2, #1
 8005c64:	6839      	ldr	r1, [r7, #0]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f001 fc04 	bl	8007474 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a35      	ldr	r2, [pc, #212]	; (8005d48 <HAL_TIM_PWM_Start+0x1e8>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d013      	beq.n	8005c9e <HAL_TIM_PWM_Start+0x13e>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a34      	ldr	r2, [pc, #208]	; (8005d4c <HAL_TIM_PWM_Start+0x1ec>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d00e      	beq.n	8005c9e <HAL_TIM_PWM_Start+0x13e>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a32      	ldr	r2, [pc, #200]	; (8005d50 <HAL_TIM_PWM_Start+0x1f0>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d009      	beq.n	8005c9e <HAL_TIM_PWM_Start+0x13e>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a31      	ldr	r2, [pc, #196]	; (8005d54 <HAL_TIM_PWM_Start+0x1f4>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d004      	beq.n	8005c9e <HAL_TIM_PWM_Start+0x13e>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a2f      	ldr	r2, [pc, #188]	; (8005d58 <HAL_TIM_PWM_Start+0x1f8>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d101      	bne.n	8005ca2 <HAL_TIM_PWM_Start+0x142>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e000      	b.n	8005ca4 <HAL_TIM_PWM_Start+0x144>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d007      	beq.n	8005cb8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cb6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a22      	ldr	r2, [pc, #136]	; (8005d48 <HAL_TIM_PWM_Start+0x1e8>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d01d      	beq.n	8005cfe <HAL_TIM_PWM_Start+0x19e>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cca:	d018      	beq.n	8005cfe <HAL_TIM_PWM_Start+0x19e>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a22      	ldr	r2, [pc, #136]	; (8005d5c <HAL_TIM_PWM_Start+0x1fc>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d013      	beq.n	8005cfe <HAL_TIM_PWM_Start+0x19e>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a21      	ldr	r2, [pc, #132]	; (8005d60 <HAL_TIM_PWM_Start+0x200>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d00e      	beq.n	8005cfe <HAL_TIM_PWM_Start+0x19e>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a1f      	ldr	r2, [pc, #124]	; (8005d64 <HAL_TIM_PWM_Start+0x204>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d009      	beq.n	8005cfe <HAL_TIM_PWM_Start+0x19e>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a17      	ldr	r2, [pc, #92]	; (8005d4c <HAL_TIM_PWM_Start+0x1ec>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d004      	beq.n	8005cfe <HAL_TIM_PWM_Start+0x19e>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a15      	ldr	r2, [pc, #84]	; (8005d50 <HAL_TIM_PWM_Start+0x1f0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d115      	bne.n	8005d2a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	4b18      	ldr	r3, [pc, #96]	; (8005d68 <HAL_TIM_PWM_Start+0x208>)
 8005d06:	4013      	ands	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2b06      	cmp	r3, #6
 8005d0e:	d015      	beq.n	8005d3c <HAL_TIM_PWM_Start+0x1dc>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d16:	d011      	beq.n	8005d3c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f042 0201 	orr.w	r2, r2, #1
 8005d26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d28:	e008      	b.n	8005d3c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f042 0201 	orr.w	r2, r2, #1
 8005d38:	601a      	str	r2, [r3, #0]
 8005d3a:	e000      	b.n	8005d3e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	40012c00 	.word	0x40012c00
 8005d4c:	40013400 	.word	0x40013400
 8005d50:	40014000 	.word	0x40014000
 8005d54:	40014400 	.word	0x40014400
 8005d58:	40014800 	.word	0x40014800
 8005d5c:	40000400 	.word	0x40000400
 8005d60:	40000800 	.word	0x40000800
 8005d64:	40000c00 	.word	0x40000c00
 8005d68:	00010007 	.word	0x00010007

08005d6c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e049      	b.n	8005e12 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d106      	bne.n	8005d98 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7fc f866 	bl	8001e64 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	3304      	adds	r3, #4
 8005da8:	4619      	mov	r1, r3
 8005daa:	4610      	mov	r0, r2
 8005dac:	f000 fda0 	bl	80068f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
	...

08005e1c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d104      	bne.n	8005e3a <HAL_TIM_IC_Start_IT+0x1e>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	e023      	b.n	8005e82 <HAL_TIM_IC_Start_IT+0x66>
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	d104      	bne.n	8005e4a <HAL_TIM_IC_Start_IT+0x2e>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	e01b      	b.n	8005e82 <HAL_TIM_IC_Start_IT+0x66>
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	d104      	bne.n	8005e5a <HAL_TIM_IC_Start_IT+0x3e>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	e013      	b.n	8005e82 <HAL_TIM_IC_Start_IT+0x66>
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2b0c      	cmp	r3, #12
 8005e5e:	d104      	bne.n	8005e6a <HAL_TIM_IC_Start_IT+0x4e>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	e00b      	b.n	8005e82 <HAL_TIM_IC_Start_IT+0x66>
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	2b10      	cmp	r3, #16
 8005e6e:	d104      	bne.n	8005e7a <HAL_TIM_IC_Start_IT+0x5e>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	e003      	b.n	8005e82 <HAL_TIM_IC_Start_IT+0x66>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d104      	bne.n	8005e94 <HAL_TIM_IC_Start_IT+0x78>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	e013      	b.n	8005ebc <HAL_TIM_IC_Start_IT+0xa0>
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	2b04      	cmp	r3, #4
 8005e98:	d104      	bne.n	8005ea4 <HAL_TIM_IC_Start_IT+0x88>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	e00b      	b.n	8005ebc <HAL_TIM_IC_Start_IT+0xa0>
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	2b08      	cmp	r3, #8
 8005ea8:	d104      	bne.n	8005eb4 <HAL_TIM_IC_Start_IT+0x98>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	e003      	b.n	8005ebc <HAL_TIM_IC_Start_IT+0xa0>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ebe:	7bbb      	ldrb	r3, [r7, #14]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d102      	bne.n	8005eca <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ec4:	7b7b      	ldrb	r3, [r7, #13]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d001      	beq.n	8005ece <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e0dd      	b.n	800608a <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d104      	bne.n	8005ede <HAL_TIM_IC_Start_IT+0xc2>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005edc:	e023      	b.n	8005f26 <HAL_TIM_IC_Start_IT+0x10a>
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b04      	cmp	r3, #4
 8005ee2:	d104      	bne.n	8005eee <HAL_TIM_IC_Start_IT+0xd2>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005eec:	e01b      	b.n	8005f26 <HAL_TIM_IC_Start_IT+0x10a>
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b08      	cmp	r3, #8
 8005ef2:	d104      	bne.n	8005efe <HAL_TIM_IC_Start_IT+0xe2>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005efc:	e013      	b.n	8005f26 <HAL_TIM_IC_Start_IT+0x10a>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b0c      	cmp	r3, #12
 8005f02:	d104      	bne.n	8005f0e <HAL_TIM_IC_Start_IT+0xf2>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2202      	movs	r2, #2
 8005f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f0c:	e00b      	b.n	8005f26 <HAL_TIM_IC_Start_IT+0x10a>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b10      	cmp	r3, #16
 8005f12:	d104      	bne.n	8005f1e <HAL_TIM_IC_Start_IT+0x102>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f1c:	e003      	b.n	8005f26 <HAL_TIM_IC_Start_IT+0x10a>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2202      	movs	r2, #2
 8005f22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d104      	bne.n	8005f36 <HAL_TIM_IC_Start_IT+0x11a>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f34:	e013      	b.n	8005f5e <HAL_TIM_IC_Start_IT+0x142>
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	2b04      	cmp	r3, #4
 8005f3a:	d104      	bne.n	8005f46 <HAL_TIM_IC_Start_IT+0x12a>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f44:	e00b      	b.n	8005f5e <HAL_TIM_IC_Start_IT+0x142>
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b08      	cmp	r3, #8
 8005f4a:	d104      	bne.n	8005f56 <HAL_TIM_IC_Start_IT+0x13a>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f54:	e003      	b.n	8005f5e <HAL_TIM_IC_Start_IT+0x142>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2202      	movs	r2, #2
 8005f5a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2b0c      	cmp	r3, #12
 8005f62:	d841      	bhi.n	8005fe8 <HAL_TIM_IC_Start_IT+0x1cc>
 8005f64:	a201      	add	r2, pc, #4	; (adr r2, 8005f6c <HAL_TIM_IC_Start_IT+0x150>)
 8005f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6a:	bf00      	nop
 8005f6c:	08005fa1 	.word	0x08005fa1
 8005f70:	08005fe9 	.word	0x08005fe9
 8005f74:	08005fe9 	.word	0x08005fe9
 8005f78:	08005fe9 	.word	0x08005fe9
 8005f7c:	08005fb3 	.word	0x08005fb3
 8005f80:	08005fe9 	.word	0x08005fe9
 8005f84:	08005fe9 	.word	0x08005fe9
 8005f88:	08005fe9 	.word	0x08005fe9
 8005f8c:	08005fc5 	.word	0x08005fc5
 8005f90:	08005fe9 	.word	0x08005fe9
 8005f94:	08005fe9 	.word	0x08005fe9
 8005f98:	08005fe9 	.word	0x08005fe9
 8005f9c:	08005fd7 	.word	0x08005fd7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68da      	ldr	r2, [r3, #12]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f042 0202 	orr.w	r2, r2, #2
 8005fae:	60da      	str	r2, [r3, #12]
      break;
 8005fb0:	e01d      	b.n	8005fee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68da      	ldr	r2, [r3, #12]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f042 0204 	orr.w	r2, r2, #4
 8005fc0:	60da      	str	r2, [r3, #12]
      break;
 8005fc2:	e014      	b.n	8005fee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68da      	ldr	r2, [r3, #12]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f042 0208 	orr.w	r2, r2, #8
 8005fd2:	60da      	str	r2, [r3, #12]
      break;
 8005fd4:	e00b      	b.n	8005fee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68da      	ldr	r2, [r3, #12]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f042 0210 	orr.w	r2, r2, #16
 8005fe4:	60da      	str	r2, [r3, #12]
      break;
 8005fe6:	e002      	b.n	8005fee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	73fb      	strb	r3, [r7, #15]
      break;
 8005fec:	bf00      	nop
  }

  if (status == HAL_OK)
 8005fee:	7bfb      	ldrb	r3, [r7, #15]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d149      	bne.n	8006088 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	6839      	ldr	r1, [r7, #0]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f001 fa39 	bl	8007474 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a23      	ldr	r2, [pc, #140]	; (8006094 <HAL_TIM_IC_Start_IT+0x278>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d01d      	beq.n	8006048 <HAL_TIM_IC_Start_IT+0x22c>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006014:	d018      	beq.n	8006048 <HAL_TIM_IC_Start_IT+0x22c>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a1f      	ldr	r2, [pc, #124]	; (8006098 <HAL_TIM_IC_Start_IT+0x27c>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d013      	beq.n	8006048 <HAL_TIM_IC_Start_IT+0x22c>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a1d      	ldr	r2, [pc, #116]	; (800609c <HAL_TIM_IC_Start_IT+0x280>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d00e      	beq.n	8006048 <HAL_TIM_IC_Start_IT+0x22c>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a1c      	ldr	r2, [pc, #112]	; (80060a0 <HAL_TIM_IC_Start_IT+0x284>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d009      	beq.n	8006048 <HAL_TIM_IC_Start_IT+0x22c>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a1a      	ldr	r2, [pc, #104]	; (80060a4 <HAL_TIM_IC_Start_IT+0x288>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d004      	beq.n	8006048 <HAL_TIM_IC_Start_IT+0x22c>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a19      	ldr	r2, [pc, #100]	; (80060a8 <HAL_TIM_IC_Start_IT+0x28c>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d115      	bne.n	8006074 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689a      	ldr	r2, [r3, #8]
 800604e:	4b17      	ldr	r3, [pc, #92]	; (80060ac <HAL_TIM_IC_Start_IT+0x290>)
 8006050:	4013      	ands	r3, r2
 8006052:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2b06      	cmp	r3, #6
 8006058:	d015      	beq.n	8006086 <HAL_TIM_IC_Start_IT+0x26a>
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006060:	d011      	beq.n	8006086 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f042 0201 	orr.w	r2, r2, #1
 8006070:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006072:	e008      	b.n	8006086 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0201 	orr.w	r2, r2, #1
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	e000      	b.n	8006088 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006086:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006088:	7bfb      	ldrb	r3, [r7, #15]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	40012c00 	.word	0x40012c00
 8006098:	40000400 	.word	0x40000400
 800609c:	40000800 	.word	0x40000800
 80060a0:	40000c00 	.word	0x40000c00
 80060a4:	40013400 	.word	0x40013400
 80060a8:	40014000 	.word	0x40014000
 80060ac:	00010007 	.word	0x00010007

080060b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d020      	beq.n	8006114 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d01b      	beq.n	8006114 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f06f 0202 	mvn.w	r2, #2
 80060e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	f003 0303 	and.w	r3, r3, #3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7fb fd4c 	bl	8001b98 <HAL_TIM_IC_CaptureCallback>
 8006100:	e005      	b.n	800610e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fbd6 	bl	80068b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fbdd 	bl	80068c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f003 0304 	and.w	r3, r3, #4
 800611a:	2b00      	cmp	r3, #0
 800611c:	d020      	beq.n	8006160 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f003 0304 	and.w	r3, r3, #4
 8006124:	2b00      	cmp	r3, #0
 8006126:	d01b      	beq.n	8006160 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f06f 0204 	mvn.w	r2, #4
 8006130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2202      	movs	r2, #2
 8006136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f7fb fd26 	bl	8001b98 <HAL_TIM_IC_CaptureCallback>
 800614c:	e005      	b.n	800615a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fbb0 	bl	80068b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fbb7 	bl	80068c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f003 0308 	and.w	r3, r3, #8
 8006166:	2b00      	cmp	r3, #0
 8006168:	d020      	beq.n	80061ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f003 0308 	and.w	r3, r3, #8
 8006170:	2b00      	cmp	r3, #0
 8006172:	d01b      	beq.n	80061ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f06f 0208 	mvn.w	r2, #8
 800617c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2204      	movs	r2, #4
 8006182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	f003 0303 	and.w	r3, r3, #3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7fb fd00 	bl	8001b98 <HAL_TIM_IC_CaptureCallback>
 8006198:	e005      	b.n	80061a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 fb8a 	bl	80068b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fb91 	bl	80068c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f003 0310 	and.w	r3, r3, #16
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d020      	beq.n	80061f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f003 0310 	and.w	r3, r3, #16
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d01b      	beq.n	80061f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f06f 0210 	mvn.w	r2, #16
 80061c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2208      	movs	r2, #8
 80061ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f7fb fcda 	bl	8001b98 <HAL_TIM_IC_CaptureCallback>
 80061e4:	e005      	b.n	80061f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fb64 	bl	80068b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 fb6b 	bl	80068c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00c      	beq.n	800621c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	2b00      	cmp	r3, #0
 800620a:	d007      	beq.n	800621c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f06f 0201 	mvn.w	r2, #1
 8006214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7fb fc92 	bl	8001b40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00c      	beq.n	8006240 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800622c:	2b00      	cmp	r3, #0
 800622e:	d007      	beq.n	8006240 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f001 fa50 	bl	80076e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00c      	beq.n	8006264 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006250:	2b00      	cmp	r3, #0
 8006252:	d007      	beq.n	8006264 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800625c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f001 fa48 	bl	80076f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00c      	beq.n	8006288 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006274:	2b00      	cmp	r3, #0
 8006276:	d007      	beq.n	8006288 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fb2a 	bl	80068dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f003 0320 	and.w	r3, r3, #32
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00c      	beq.n	80062ac <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f003 0320 	and.w	r3, r3, #32
 8006298:	2b00      	cmp	r3, #0
 800629a:	d007      	beq.n	80062ac <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f06f 0220 	mvn.w	r2, #32
 80062a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f001 fa10 	bl	80076cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062ac:	bf00      	nop
 80062ae:	3710      	adds	r7, #16
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062c0:	2300      	movs	r3, #0
 80062c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d101      	bne.n	80062d2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80062ce:	2302      	movs	r3, #2
 80062d0:	e088      	b.n	80063e4 <HAL_TIM_IC_ConfigChannel+0x130>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d11b      	bne.n	8006318 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80062f0:	f000 ff02 	bl	80070f8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699a      	ldr	r2, [r3, #24]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 020c 	bic.w	r2, r2, #12
 8006302:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6999      	ldr	r1, [r3, #24]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	689a      	ldr	r2, [r3, #8]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	619a      	str	r2, [r3, #24]
 8006316:	e060      	b.n	80063da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b04      	cmp	r3, #4
 800631c:	d11c      	bne.n	8006358 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800632e:	f000 ff80 	bl	8007232 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	699a      	ldr	r2, [r3, #24]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006340:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6999      	ldr	r1, [r3, #24]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	021a      	lsls	r2, r3, #8
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	430a      	orrs	r2, r1
 8006354:	619a      	str	r2, [r3, #24]
 8006356:	e040      	b.n	80063da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b08      	cmp	r3, #8
 800635c:	d11b      	bne.n	8006396 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800636e:	f000 ffcd 	bl	800730c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	69da      	ldr	r2, [r3, #28]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 020c 	bic.w	r2, r2, #12
 8006380:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	69d9      	ldr	r1, [r3, #28]
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	430a      	orrs	r2, r1
 8006392:	61da      	str	r2, [r3, #28]
 8006394:	e021      	b.n	80063da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b0c      	cmp	r3, #12
 800639a:	d11c      	bne.n	80063d6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80063ac:	f000 ffea 	bl	8007384 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	69da      	ldr	r2, [r3, #28]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80063be:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	69d9      	ldr	r1, [r3, #28]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	021a      	lsls	r2, r3, #8
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	430a      	orrs	r2, r1
 80063d2:	61da      	str	r2, [r3, #28]
 80063d4:	e001      	b.n	80063da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063f8:	2300      	movs	r3, #0
 80063fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006402:	2b01      	cmp	r3, #1
 8006404:	d101      	bne.n	800640a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006406:	2302      	movs	r3, #2
 8006408:	e0ff      	b.n	800660a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b14      	cmp	r3, #20
 8006416:	f200 80f0 	bhi.w	80065fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800641a:	a201      	add	r2, pc, #4	; (adr r2, 8006420 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800641c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006420:	08006475 	.word	0x08006475
 8006424:	080065fb 	.word	0x080065fb
 8006428:	080065fb 	.word	0x080065fb
 800642c:	080065fb 	.word	0x080065fb
 8006430:	080064b5 	.word	0x080064b5
 8006434:	080065fb 	.word	0x080065fb
 8006438:	080065fb 	.word	0x080065fb
 800643c:	080065fb 	.word	0x080065fb
 8006440:	080064f7 	.word	0x080064f7
 8006444:	080065fb 	.word	0x080065fb
 8006448:	080065fb 	.word	0x080065fb
 800644c:	080065fb 	.word	0x080065fb
 8006450:	08006537 	.word	0x08006537
 8006454:	080065fb 	.word	0x080065fb
 8006458:	080065fb 	.word	0x080065fb
 800645c:	080065fb 	.word	0x080065fb
 8006460:	08006579 	.word	0x08006579
 8006464:	080065fb 	.word	0x080065fb
 8006468:	080065fb 	.word	0x080065fb
 800646c:	080065fb 	.word	0x080065fb
 8006470:	080065b9 	.word	0x080065b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68b9      	ldr	r1, [r7, #8]
 800647a:	4618      	mov	r0, r3
 800647c:	f000 fad2 	bl	8006a24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	699a      	ldr	r2, [r3, #24]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 0208 	orr.w	r2, r2, #8
 800648e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	699a      	ldr	r2, [r3, #24]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 0204 	bic.w	r2, r2, #4
 800649e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6999      	ldr	r1, [r3, #24]
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	691a      	ldr	r2, [r3, #16]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	619a      	str	r2, [r3, #24]
      break;
 80064b2:	e0a5      	b.n	8006600 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68b9      	ldr	r1, [r7, #8]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 fb42 	bl	8006b44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	699a      	ldr	r2, [r3, #24]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	699a      	ldr	r2, [r3, #24]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6999      	ldr	r1, [r3, #24]
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	021a      	lsls	r2, r3, #8
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	619a      	str	r2, [r3, #24]
      break;
 80064f4:	e084      	b.n	8006600 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68b9      	ldr	r1, [r7, #8]
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 fbab 	bl	8006c58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	69da      	ldr	r2, [r3, #28]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f042 0208 	orr.w	r2, r2, #8
 8006510:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69da      	ldr	r2, [r3, #28]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 0204 	bic.w	r2, r2, #4
 8006520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	69d9      	ldr	r1, [r3, #28]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	691a      	ldr	r2, [r3, #16]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	430a      	orrs	r2, r1
 8006532:	61da      	str	r2, [r3, #28]
      break;
 8006534:	e064      	b.n	8006600 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68b9      	ldr	r1, [r7, #8]
 800653c:	4618      	mov	r0, r3
 800653e:	f000 fc13 	bl	8006d68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	69da      	ldr	r2, [r3, #28]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	69da      	ldr	r2, [r3, #28]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	69d9      	ldr	r1, [r3, #28]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	021a      	lsls	r2, r3, #8
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	61da      	str	r2, [r3, #28]
      break;
 8006576:	e043      	b.n	8006600 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68b9      	ldr	r1, [r7, #8]
 800657e:	4618      	mov	r0, r3
 8006580:	f000 fc5c 	bl	8006e3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0208 	orr.w	r2, r2, #8
 8006592:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0204 	bic.w	r2, r2, #4
 80065a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	691a      	ldr	r2, [r3, #16]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80065b6:	e023      	b.n	8006600 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68b9      	ldr	r1, [r7, #8]
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 fca0 	bl	8006f04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	021a      	lsls	r2, r3, #8
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	430a      	orrs	r2, r1
 80065f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80065f8:	e002      	b.n	8006600 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	75fb      	strb	r3, [r7, #23]
      break;
 80065fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006608:	7dfb      	ldrb	r3, [r7, #23]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3718      	adds	r7, #24
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop

08006614 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800661e:	2300      	movs	r3, #0
 8006620:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006628:	2b01      	cmp	r3, #1
 800662a:	d101      	bne.n	8006630 <HAL_TIM_ConfigClockSource+0x1c>
 800662c:	2302      	movs	r3, #2
 800662e:	e0b6      	b.n	800679e <HAL_TIM_ConfigClockSource+0x18a>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2202      	movs	r2, #2
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800664e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006652:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800665a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800666c:	d03e      	beq.n	80066ec <HAL_TIM_ConfigClockSource+0xd8>
 800666e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006672:	f200 8087 	bhi.w	8006784 <HAL_TIM_ConfigClockSource+0x170>
 8006676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800667a:	f000 8086 	beq.w	800678a <HAL_TIM_ConfigClockSource+0x176>
 800667e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006682:	d87f      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x170>
 8006684:	2b70      	cmp	r3, #112	; 0x70
 8006686:	d01a      	beq.n	80066be <HAL_TIM_ConfigClockSource+0xaa>
 8006688:	2b70      	cmp	r3, #112	; 0x70
 800668a:	d87b      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x170>
 800668c:	2b60      	cmp	r3, #96	; 0x60
 800668e:	d050      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0x11e>
 8006690:	2b60      	cmp	r3, #96	; 0x60
 8006692:	d877      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x170>
 8006694:	2b50      	cmp	r3, #80	; 0x50
 8006696:	d03c      	beq.n	8006712 <HAL_TIM_ConfigClockSource+0xfe>
 8006698:	2b50      	cmp	r3, #80	; 0x50
 800669a:	d873      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x170>
 800669c:	2b40      	cmp	r3, #64	; 0x40
 800669e:	d058      	beq.n	8006752 <HAL_TIM_ConfigClockSource+0x13e>
 80066a0:	2b40      	cmp	r3, #64	; 0x40
 80066a2:	d86f      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x170>
 80066a4:	2b30      	cmp	r3, #48	; 0x30
 80066a6:	d064      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0x15e>
 80066a8:	2b30      	cmp	r3, #48	; 0x30
 80066aa:	d86b      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x170>
 80066ac:	2b20      	cmp	r3, #32
 80066ae:	d060      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0x15e>
 80066b0:	2b20      	cmp	r3, #32
 80066b2:	d867      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x170>
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d05c      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0x15e>
 80066b8:	2b10      	cmp	r3, #16
 80066ba:	d05a      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0x15e>
 80066bc:	e062      	b.n	8006784 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066ce:	f000 feb1 	bl	8007434 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	609a      	str	r2, [r3, #8]
      break;
 80066ea:	e04f      	b.n	800678c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066fc:	f000 fe9a 	bl	8007434 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689a      	ldr	r2, [r3, #8]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800670e:	609a      	str	r2, [r3, #8]
      break;
 8006710:	e03c      	b.n	800678c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800671e:	461a      	mov	r2, r3
 8006720:	f000 fd58 	bl	80071d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2150      	movs	r1, #80	; 0x50
 800672a:	4618      	mov	r0, r3
 800672c:	f000 fe67 	bl	80073fe <TIM_ITRx_SetConfig>
      break;
 8006730:	e02c      	b.n	800678c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800673e:	461a      	mov	r2, r3
 8006740:	f000 fdb4 	bl	80072ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2160      	movs	r1, #96	; 0x60
 800674a:	4618      	mov	r0, r3
 800674c:	f000 fe57 	bl	80073fe <TIM_ITRx_SetConfig>
      break;
 8006750:	e01c      	b.n	800678c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800675e:	461a      	mov	r2, r3
 8006760:	f000 fd38 	bl	80071d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2140      	movs	r1, #64	; 0x40
 800676a:	4618      	mov	r0, r3
 800676c:	f000 fe47 	bl	80073fe <TIM_ITRx_SetConfig>
      break;
 8006770:	e00c      	b.n	800678c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4619      	mov	r1, r3
 800677c:	4610      	mov	r0, r2
 800677e:	f000 fe3e 	bl	80073fe <TIM_ITRx_SetConfig>
      break;
 8006782:	e003      	b.n	800678c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	73fb      	strb	r3, [r7, #15]
      break;
 8006788:	e000      	b.n	800678c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800678a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800679c:	7bfb      	ldrb	r3, [r7, #15]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b082      	sub	sp, #8
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d101      	bne.n	80067be <HAL_TIM_SlaveConfigSynchro+0x18>
 80067ba:	2302      	movs	r3, #2
 80067bc:	e031      	b.n	8006822 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2202      	movs	r2, #2
 80067ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 fbfd 	bl	8006fd0 <TIM_SlaveTimer_SetConfig>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d009      	beq.n	80067f0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e018      	b.n	8006822 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68da      	ldr	r2, [r3, #12]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067fe:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68da      	ldr	r2, [r3, #12]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800680e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
	...

0800682c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006836:	2300      	movs	r3, #0
 8006838:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2b0c      	cmp	r3, #12
 800683e:	d831      	bhi.n	80068a4 <HAL_TIM_ReadCapturedValue+0x78>
 8006840:	a201      	add	r2, pc, #4	; (adr r2, 8006848 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006846:	bf00      	nop
 8006848:	0800687d 	.word	0x0800687d
 800684c:	080068a5 	.word	0x080068a5
 8006850:	080068a5 	.word	0x080068a5
 8006854:	080068a5 	.word	0x080068a5
 8006858:	08006887 	.word	0x08006887
 800685c:	080068a5 	.word	0x080068a5
 8006860:	080068a5 	.word	0x080068a5
 8006864:	080068a5 	.word	0x080068a5
 8006868:	08006891 	.word	0x08006891
 800686c:	080068a5 	.word	0x080068a5
 8006870:	080068a5 	.word	0x080068a5
 8006874:	080068a5 	.word	0x080068a5
 8006878:	0800689b 	.word	0x0800689b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006882:	60fb      	str	r3, [r7, #12]

      break;
 8006884:	e00f      	b.n	80068a6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688c:	60fb      	str	r3, [r7, #12]

      break;
 800688e:	e00a      	b.n	80068a6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006896:	60fb      	str	r3, [r7, #12]

      break;
 8006898:	e005      	b.n	80068a6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a0:	60fb      	str	r3, [r7, #12]

      break;
 80068a2:	e000      	b.n	80068a6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80068a4:	bf00      	nop
  }

  return tmpreg;
 80068a6:	68fb      	ldr	r3, [r7, #12]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a40      	ldr	r2, [pc, #256]	; (8006a04 <TIM_Base_SetConfig+0x114>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d013      	beq.n	8006930 <TIM_Base_SetConfig+0x40>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800690e:	d00f      	beq.n	8006930 <TIM_Base_SetConfig+0x40>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a3d      	ldr	r2, [pc, #244]	; (8006a08 <TIM_Base_SetConfig+0x118>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d00b      	beq.n	8006930 <TIM_Base_SetConfig+0x40>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a3c      	ldr	r2, [pc, #240]	; (8006a0c <TIM_Base_SetConfig+0x11c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d007      	beq.n	8006930 <TIM_Base_SetConfig+0x40>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a3b      	ldr	r2, [pc, #236]	; (8006a10 <TIM_Base_SetConfig+0x120>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d003      	beq.n	8006930 <TIM_Base_SetConfig+0x40>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a3a      	ldr	r2, [pc, #232]	; (8006a14 <TIM_Base_SetConfig+0x124>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d108      	bne.n	8006942 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	4313      	orrs	r3, r2
 8006940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a2f      	ldr	r2, [pc, #188]	; (8006a04 <TIM_Base_SetConfig+0x114>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d01f      	beq.n	800698a <TIM_Base_SetConfig+0x9a>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006950:	d01b      	beq.n	800698a <TIM_Base_SetConfig+0x9a>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a2c      	ldr	r2, [pc, #176]	; (8006a08 <TIM_Base_SetConfig+0x118>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d017      	beq.n	800698a <TIM_Base_SetConfig+0x9a>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a2b      	ldr	r2, [pc, #172]	; (8006a0c <TIM_Base_SetConfig+0x11c>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d013      	beq.n	800698a <TIM_Base_SetConfig+0x9a>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a2a      	ldr	r2, [pc, #168]	; (8006a10 <TIM_Base_SetConfig+0x120>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00f      	beq.n	800698a <TIM_Base_SetConfig+0x9a>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a29      	ldr	r2, [pc, #164]	; (8006a14 <TIM_Base_SetConfig+0x124>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d00b      	beq.n	800698a <TIM_Base_SetConfig+0x9a>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a28      	ldr	r2, [pc, #160]	; (8006a18 <TIM_Base_SetConfig+0x128>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d007      	beq.n	800698a <TIM_Base_SetConfig+0x9a>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a27      	ldr	r2, [pc, #156]	; (8006a1c <TIM_Base_SetConfig+0x12c>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d003      	beq.n	800698a <TIM_Base_SetConfig+0x9a>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a26      	ldr	r2, [pc, #152]	; (8006a20 <TIM_Base_SetConfig+0x130>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d108      	bne.n	800699c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	4313      	orrs	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	689a      	ldr	r2, [r3, #8]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a10      	ldr	r2, [pc, #64]	; (8006a04 <TIM_Base_SetConfig+0x114>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d00f      	beq.n	80069e8 <TIM_Base_SetConfig+0xf8>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a12      	ldr	r2, [pc, #72]	; (8006a14 <TIM_Base_SetConfig+0x124>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d00b      	beq.n	80069e8 <TIM_Base_SetConfig+0xf8>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a11      	ldr	r2, [pc, #68]	; (8006a18 <TIM_Base_SetConfig+0x128>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d007      	beq.n	80069e8 <TIM_Base_SetConfig+0xf8>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a10      	ldr	r2, [pc, #64]	; (8006a1c <TIM_Base_SetConfig+0x12c>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d003      	beq.n	80069e8 <TIM_Base_SetConfig+0xf8>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a0f      	ldr	r2, [pc, #60]	; (8006a20 <TIM_Base_SetConfig+0x130>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d103      	bne.n	80069f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	691a      	ldr	r2, [r3, #16]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	615a      	str	r2, [r3, #20]
}
 80069f6:	bf00      	nop
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	40012c00 	.word	0x40012c00
 8006a08:	40000400 	.word	0x40000400
 8006a0c:	40000800 	.word	0x40000800
 8006a10:	40000c00 	.word	0x40000c00
 8006a14:	40013400 	.word	0x40013400
 8006a18:	40014000 	.word	0x40014000
 8006a1c:	40014400 	.word	0x40014400
 8006a20:	40014800 	.word	0x40014800

08006a24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b087      	sub	sp, #28
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a1b      	ldr	r3, [r3, #32]
 8006a38:	f023 0201 	bic.w	r2, r3, #1
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f023 0303 	bic.w	r3, r3, #3
 8006a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f023 0302 	bic.w	r3, r3, #2
 8006a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a2c      	ldr	r2, [pc, #176]	; (8006b30 <TIM_OC1_SetConfig+0x10c>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d00f      	beq.n	8006aa4 <TIM_OC1_SetConfig+0x80>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a2b      	ldr	r2, [pc, #172]	; (8006b34 <TIM_OC1_SetConfig+0x110>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d00b      	beq.n	8006aa4 <TIM_OC1_SetConfig+0x80>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a2a      	ldr	r2, [pc, #168]	; (8006b38 <TIM_OC1_SetConfig+0x114>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d007      	beq.n	8006aa4 <TIM_OC1_SetConfig+0x80>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a29      	ldr	r2, [pc, #164]	; (8006b3c <TIM_OC1_SetConfig+0x118>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d003      	beq.n	8006aa4 <TIM_OC1_SetConfig+0x80>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a28      	ldr	r2, [pc, #160]	; (8006b40 <TIM_OC1_SetConfig+0x11c>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d10c      	bne.n	8006abe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	f023 0308 	bic.w	r3, r3, #8
 8006aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	f023 0304 	bic.w	r3, r3, #4
 8006abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a1b      	ldr	r2, [pc, #108]	; (8006b30 <TIM_OC1_SetConfig+0x10c>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d00f      	beq.n	8006ae6 <TIM_OC1_SetConfig+0xc2>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a1a      	ldr	r2, [pc, #104]	; (8006b34 <TIM_OC1_SetConfig+0x110>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d00b      	beq.n	8006ae6 <TIM_OC1_SetConfig+0xc2>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a19      	ldr	r2, [pc, #100]	; (8006b38 <TIM_OC1_SetConfig+0x114>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d007      	beq.n	8006ae6 <TIM_OC1_SetConfig+0xc2>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a18      	ldr	r2, [pc, #96]	; (8006b3c <TIM_OC1_SetConfig+0x118>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d003      	beq.n	8006ae6 <TIM_OC1_SetConfig+0xc2>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a17      	ldr	r2, [pc, #92]	; (8006b40 <TIM_OC1_SetConfig+0x11c>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d111      	bne.n	8006b0a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	685a      	ldr	r2, [r3, #4]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	621a      	str	r2, [r3, #32]
}
 8006b24:	bf00      	nop
 8006b26:	371c      	adds	r7, #28
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	40012c00 	.word	0x40012c00
 8006b34:	40013400 	.word	0x40013400
 8006b38:	40014000 	.word	0x40014000
 8006b3c:	40014400 	.word	0x40014400
 8006b40:	40014800 	.word	0x40014800

08006b44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b087      	sub	sp, #28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	f023 0210 	bic.w	r2, r3, #16
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	021b      	lsls	r3, r3, #8
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	f023 0320 	bic.w	r3, r3, #32
 8006b92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	011b      	lsls	r3, r3, #4
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a28      	ldr	r2, [pc, #160]	; (8006c44 <TIM_OC2_SetConfig+0x100>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d003      	beq.n	8006bb0 <TIM_OC2_SetConfig+0x6c>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a27      	ldr	r2, [pc, #156]	; (8006c48 <TIM_OC2_SetConfig+0x104>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d10d      	bne.n	8006bcc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	011b      	lsls	r3, r3, #4
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a1d      	ldr	r2, [pc, #116]	; (8006c44 <TIM_OC2_SetConfig+0x100>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d00f      	beq.n	8006bf4 <TIM_OC2_SetConfig+0xb0>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a1c      	ldr	r2, [pc, #112]	; (8006c48 <TIM_OC2_SetConfig+0x104>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d00b      	beq.n	8006bf4 <TIM_OC2_SetConfig+0xb0>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a1b      	ldr	r2, [pc, #108]	; (8006c4c <TIM_OC2_SetConfig+0x108>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d007      	beq.n	8006bf4 <TIM_OC2_SetConfig+0xb0>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a1a      	ldr	r2, [pc, #104]	; (8006c50 <TIM_OC2_SetConfig+0x10c>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d003      	beq.n	8006bf4 <TIM_OC2_SetConfig+0xb0>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a19      	ldr	r2, [pc, #100]	; (8006c54 <TIM_OC2_SetConfig+0x110>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d113      	bne.n	8006c1c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	695b      	ldr	r3, [r3, #20]
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	621a      	str	r2, [r3, #32]
}
 8006c36:	bf00      	nop
 8006c38:	371c      	adds	r7, #28
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	40012c00 	.word	0x40012c00
 8006c48:	40013400 	.word	0x40013400
 8006c4c:	40014000 	.word	0x40014000
 8006c50:	40014400 	.word	0x40014400
 8006c54:	40014800 	.word	0x40014800

08006c58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b087      	sub	sp, #28
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f023 0303 	bic.w	r3, r3, #3
 8006c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ca4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	021b      	lsls	r3, r3, #8
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a27      	ldr	r2, [pc, #156]	; (8006d54 <TIM_OC3_SetConfig+0xfc>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d003      	beq.n	8006cc2 <TIM_OC3_SetConfig+0x6a>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a26      	ldr	r2, [pc, #152]	; (8006d58 <TIM_OC3_SetConfig+0x100>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d10d      	bne.n	8006cde <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	021b      	lsls	r3, r3, #8
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a1c      	ldr	r2, [pc, #112]	; (8006d54 <TIM_OC3_SetConfig+0xfc>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d00f      	beq.n	8006d06 <TIM_OC3_SetConfig+0xae>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a1b      	ldr	r2, [pc, #108]	; (8006d58 <TIM_OC3_SetConfig+0x100>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d00b      	beq.n	8006d06 <TIM_OC3_SetConfig+0xae>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a1a      	ldr	r2, [pc, #104]	; (8006d5c <TIM_OC3_SetConfig+0x104>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d007      	beq.n	8006d06 <TIM_OC3_SetConfig+0xae>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a19      	ldr	r2, [pc, #100]	; (8006d60 <TIM_OC3_SetConfig+0x108>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d003      	beq.n	8006d06 <TIM_OC3_SetConfig+0xae>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a18      	ldr	r2, [pc, #96]	; (8006d64 <TIM_OC3_SetConfig+0x10c>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d113      	bne.n	8006d2e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	011b      	lsls	r3, r3, #4
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	011b      	lsls	r3, r3, #4
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	693a      	ldr	r2, [r7, #16]
 8006d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	621a      	str	r2, [r3, #32]
}
 8006d48:	bf00      	nop
 8006d4a:	371c      	adds	r7, #28
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr
 8006d54:	40012c00 	.word	0x40012c00
 8006d58:	40013400 	.word	0x40013400
 8006d5c:	40014000 	.word	0x40014000
 8006d60:	40014400 	.word	0x40014400
 8006d64:	40014800 	.word	0x40014800

08006d68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b087      	sub	sp, #28
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	021b      	lsls	r3, r3, #8
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006db6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	031b      	lsls	r3, r3, #12
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a18      	ldr	r2, [pc, #96]	; (8006e28 <TIM_OC4_SetConfig+0xc0>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d00f      	beq.n	8006dec <TIM_OC4_SetConfig+0x84>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a17      	ldr	r2, [pc, #92]	; (8006e2c <TIM_OC4_SetConfig+0xc4>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d00b      	beq.n	8006dec <TIM_OC4_SetConfig+0x84>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a16      	ldr	r2, [pc, #88]	; (8006e30 <TIM_OC4_SetConfig+0xc8>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d007      	beq.n	8006dec <TIM_OC4_SetConfig+0x84>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a15      	ldr	r2, [pc, #84]	; (8006e34 <TIM_OC4_SetConfig+0xcc>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d003      	beq.n	8006dec <TIM_OC4_SetConfig+0x84>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a14      	ldr	r2, [pc, #80]	; (8006e38 <TIM_OC4_SetConfig+0xd0>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d109      	bne.n	8006e00 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006df2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	695b      	ldr	r3, [r3, #20]
 8006df8:	019b      	lsls	r3, r3, #6
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	621a      	str	r2, [r3, #32]
}
 8006e1a:	bf00      	nop
 8006e1c:	371c      	adds	r7, #28
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	40012c00 	.word	0x40012c00
 8006e2c:	40013400 	.word	0x40013400
 8006e30:	40014000 	.word	0x40014000
 8006e34:	40014400 	.word	0x40014400
 8006e38:	40014800 	.word	0x40014800

08006e3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
 8006e50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006e80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	041b      	lsls	r3, r3, #16
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a17      	ldr	r2, [pc, #92]	; (8006ef0 <TIM_OC5_SetConfig+0xb4>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d00f      	beq.n	8006eb6 <TIM_OC5_SetConfig+0x7a>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a16      	ldr	r2, [pc, #88]	; (8006ef4 <TIM_OC5_SetConfig+0xb8>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d00b      	beq.n	8006eb6 <TIM_OC5_SetConfig+0x7a>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a15      	ldr	r2, [pc, #84]	; (8006ef8 <TIM_OC5_SetConfig+0xbc>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d007      	beq.n	8006eb6 <TIM_OC5_SetConfig+0x7a>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a14      	ldr	r2, [pc, #80]	; (8006efc <TIM_OC5_SetConfig+0xc0>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d003      	beq.n	8006eb6 <TIM_OC5_SetConfig+0x7a>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a13      	ldr	r2, [pc, #76]	; (8006f00 <TIM_OC5_SetConfig+0xc4>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d109      	bne.n	8006eca <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	021b      	lsls	r3, r3, #8
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	685a      	ldr	r2, [r3, #4]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	621a      	str	r2, [r3, #32]
}
 8006ee4:	bf00      	nop
 8006ee6:	371c      	adds	r7, #28
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr
 8006ef0:	40012c00 	.word	0x40012c00
 8006ef4:	40013400 	.word	0x40013400
 8006ef8:	40014000 	.word	0x40014000
 8006efc:	40014400 	.word	0x40014400
 8006f00:	40014800 	.word	0x40014800

08006f04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b087      	sub	sp, #28
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a1b      	ldr	r3, [r3, #32]
 8006f18:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	021b      	lsls	r3, r3, #8
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	051b      	lsls	r3, r3, #20
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a18      	ldr	r2, [pc, #96]	; (8006fbc <TIM_OC6_SetConfig+0xb8>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d00f      	beq.n	8006f80 <TIM_OC6_SetConfig+0x7c>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a17      	ldr	r2, [pc, #92]	; (8006fc0 <TIM_OC6_SetConfig+0xbc>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d00b      	beq.n	8006f80 <TIM_OC6_SetConfig+0x7c>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a16      	ldr	r2, [pc, #88]	; (8006fc4 <TIM_OC6_SetConfig+0xc0>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d007      	beq.n	8006f80 <TIM_OC6_SetConfig+0x7c>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a15      	ldr	r2, [pc, #84]	; (8006fc8 <TIM_OC6_SetConfig+0xc4>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d003      	beq.n	8006f80 <TIM_OC6_SetConfig+0x7c>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a14      	ldr	r2, [pc, #80]	; (8006fcc <TIM_OC6_SetConfig+0xc8>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d109      	bne.n	8006f94 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	695b      	ldr	r3, [r3, #20]
 8006f8c:	029b      	lsls	r3, r3, #10
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	685a      	ldr	r2, [r3, #4]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	621a      	str	r2, [r3, #32]
}
 8006fae:	bf00      	nop
 8006fb0:	371c      	adds	r7, #28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	40012c00 	.word	0x40012c00
 8006fc0:	40013400 	.word	0x40013400
 8006fc4:	40014000 	.word	0x40014000
 8006fc8:	40014400 	.word	0x40014400
 8006fcc:	40014800 	.word	0x40014800

08006fd0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fec:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ffe:	f023 0307 	bic.w	r3, r3, #7
 8007002:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	4313      	orrs	r3, r2
 800700c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	2b70      	cmp	r3, #112	; 0x70
 800701c:	d01a      	beq.n	8007054 <TIM_SlaveTimer_SetConfig+0x84>
 800701e:	2b70      	cmp	r3, #112	; 0x70
 8007020:	d860      	bhi.n	80070e4 <TIM_SlaveTimer_SetConfig+0x114>
 8007022:	2b60      	cmp	r3, #96	; 0x60
 8007024:	d054      	beq.n	80070d0 <TIM_SlaveTimer_SetConfig+0x100>
 8007026:	2b60      	cmp	r3, #96	; 0x60
 8007028:	d85c      	bhi.n	80070e4 <TIM_SlaveTimer_SetConfig+0x114>
 800702a:	2b50      	cmp	r3, #80	; 0x50
 800702c:	d046      	beq.n	80070bc <TIM_SlaveTimer_SetConfig+0xec>
 800702e:	2b50      	cmp	r3, #80	; 0x50
 8007030:	d858      	bhi.n	80070e4 <TIM_SlaveTimer_SetConfig+0x114>
 8007032:	2b40      	cmp	r3, #64	; 0x40
 8007034:	d019      	beq.n	800706a <TIM_SlaveTimer_SetConfig+0x9a>
 8007036:	2b40      	cmp	r3, #64	; 0x40
 8007038:	d854      	bhi.n	80070e4 <TIM_SlaveTimer_SetConfig+0x114>
 800703a:	2b30      	cmp	r3, #48	; 0x30
 800703c:	d055      	beq.n	80070ea <TIM_SlaveTimer_SetConfig+0x11a>
 800703e:	2b30      	cmp	r3, #48	; 0x30
 8007040:	d850      	bhi.n	80070e4 <TIM_SlaveTimer_SetConfig+0x114>
 8007042:	2b20      	cmp	r3, #32
 8007044:	d051      	beq.n	80070ea <TIM_SlaveTimer_SetConfig+0x11a>
 8007046:	2b20      	cmp	r3, #32
 8007048:	d84c      	bhi.n	80070e4 <TIM_SlaveTimer_SetConfig+0x114>
 800704a:	2b00      	cmp	r3, #0
 800704c:	d04d      	beq.n	80070ea <TIM_SlaveTimer_SetConfig+0x11a>
 800704e:	2b10      	cmp	r3, #16
 8007050:	d04b      	beq.n	80070ea <TIM_SlaveTimer_SetConfig+0x11a>
 8007052:	e047      	b.n	80070e4 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8007064:	f000 f9e6 	bl	8007434 <TIM_ETR_SetConfig>
      break;
 8007068:	e040      	b.n	80070ec <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b05      	cmp	r3, #5
 8007070:	d101      	bne.n	8007076 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e03b      	b.n	80070ee <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	6a1a      	ldr	r2, [r3, #32]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f022 0201 	bic.w	r2, r2, #1
 800708c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800709c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	68ba      	ldr	r2, [r7, #8]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	621a      	str	r2, [r3, #32]
      break;
 80070ba:	e017      	b.n	80070ec <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070c8:	461a      	mov	r2, r3
 80070ca:	f000 f883 	bl	80071d4 <TIM_TI1_ConfigInputStage>
      break;
 80070ce:	e00d      	b.n	80070ec <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80070dc:	461a      	mov	r2, r3
 80070de:	f000 f8e5 	bl	80072ac <TIM_TI2_ConfigInputStage>
      break;
 80070e2:	e003      	b.n	80070ec <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	75fb      	strb	r3, [r7, #23]
      break;
 80070e8:	e000      	b.n	80070ec <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 80070ea:	bf00      	nop
  }

  return status;
 80070ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3718      	adds	r7, #24
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
	...

080070f8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
 8007104:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	f023 0201 	bic.w	r2, r3, #1
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	4a26      	ldr	r2, [pc, #152]	; (80071bc <TIM_TI1_SetConfig+0xc4>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d017      	beq.n	8007156 <TIM_TI1_SetConfig+0x5e>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800712c:	d013      	beq.n	8007156 <TIM_TI1_SetConfig+0x5e>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	4a23      	ldr	r2, [pc, #140]	; (80071c0 <TIM_TI1_SetConfig+0xc8>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d00f      	beq.n	8007156 <TIM_TI1_SetConfig+0x5e>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	4a22      	ldr	r2, [pc, #136]	; (80071c4 <TIM_TI1_SetConfig+0xcc>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d00b      	beq.n	8007156 <TIM_TI1_SetConfig+0x5e>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	4a21      	ldr	r2, [pc, #132]	; (80071c8 <TIM_TI1_SetConfig+0xd0>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d007      	beq.n	8007156 <TIM_TI1_SetConfig+0x5e>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	4a20      	ldr	r2, [pc, #128]	; (80071cc <TIM_TI1_SetConfig+0xd4>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d003      	beq.n	8007156 <TIM_TI1_SetConfig+0x5e>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	4a1f      	ldr	r2, [pc, #124]	; (80071d0 <TIM_TI1_SetConfig+0xd8>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d101      	bne.n	800715a <TIM_TI1_SetConfig+0x62>
 8007156:	2301      	movs	r3, #1
 8007158:	e000      	b.n	800715c <TIM_TI1_SetConfig+0x64>
 800715a:	2300      	movs	r3, #0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d008      	beq.n	8007172 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f023 0303 	bic.w	r3, r3, #3
 8007166:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4313      	orrs	r3, r2
 800716e:	617b      	str	r3, [r7, #20]
 8007170:	e003      	b.n	800717a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f043 0301 	orr.w	r3, r3, #1
 8007178:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007180:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	011b      	lsls	r3, r3, #4
 8007186:	b2db      	uxtb	r3, r3
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	4313      	orrs	r3, r2
 800718c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	f023 030a 	bic.w	r3, r3, #10
 8007194:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	f003 030a 	and.w	r3, r3, #10
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	4313      	orrs	r3, r2
 80071a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	621a      	str	r2, [r3, #32]
}
 80071ae:	bf00      	nop
 80071b0:	371c      	adds	r7, #28
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	40012c00 	.word	0x40012c00
 80071c0:	40000400 	.word	0x40000400
 80071c4:	40000800 	.word	0x40000800
 80071c8:	40000c00 	.word	0x40000c00
 80071cc:	40013400 	.word	0x40013400
 80071d0:	40014000 	.word	0x40014000

080071d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	f023 0201 	bic.w	r2, r3, #1
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	011b      	lsls	r3, r3, #4
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	4313      	orrs	r3, r2
 8007208:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f023 030a 	bic.w	r3, r3, #10
 8007210:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	4313      	orrs	r3, r2
 8007218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	621a      	str	r2, [r3, #32]
}
 8007226:	bf00      	nop
 8007228:	371c      	adds	r7, #28
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007232:	b480      	push	{r7}
 8007234:	b087      	sub	sp, #28
 8007236:	af00      	add	r7, sp, #0
 8007238:	60f8      	str	r0, [r7, #12]
 800723a:	60b9      	str	r1, [r7, #8]
 800723c:	607a      	str	r2, [r7, #4]
 800723e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6a1b      	ldr	r3, [r3, #32]
 8007244:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	f023 0210 	bic.w	r2, r3, #16
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800725e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	021b      	lsls	r3, r3, #8
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	4313      	orrs	r3, r2
 8007268:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007270:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	031b      	lsls	r3, r3, #12
 8007276:	b29b      	uxth	r3, r3
 8007278:	693a      	ldr	r2, [r7, #16]
 800727a:	4313      	orrs	r3, r2
 800727c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007284:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	011b      	lsls	r3, r3, #4
 800728a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	4313      	orrs	r3, r2
 8007292:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	621a      	str	r2, [r3, #32]
}
 80072a0:	bf00      	nop
 80072a2:	371c      	adds	r7, #28
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b087      	sub	sp, #28
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6a1b      	ldr	r3, [r3, #32]
 80072bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	f023 0210 	bic.w	r2, r3, #16
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	031b      	lsls	r3, r3, #12
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	4313      	orrs	r3, r2
 80072e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072e8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	011b      	lsls	r3, r3, #4
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	693a      	ldr	r2, [r7, #16]
 80072f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	697a      	ldr	r2, [r7, #20]
 80072fe:	621a      	str	r2, [r3, #32]
}
 8007300:	bf00      	nop
 8007302:	371c      	adds	r7, #28
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800730c:	b480      	push	{r7}
 800730e:	b087      	sub	sp, #28
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
 8007318:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6a1b      	ldr	r3, [r3, #32]
 8007324:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	69db      	ldr	r3, [r3, #28]
 8007330:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	f023 0303 	bic.w	r3, r3, #3
 8007338:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4313      	orrs	r3, r2
 8007340:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007348:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	011b      	lsls	r3, r3, #4
 800734e:	b2db      	uxtb	r3, r3
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	4313      	orrs	r3, r2
 8007354:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800735c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	021b      	lsls	r3, r3, #8
 8007362:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	4313      	orrs	r3, r2
 800736a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	621a      	str	r2, [r3, #32]
}
 8007378:	bf00      	nop
 800737a:	371c      	adds	r7, #28
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007384:	b480      	push	{r7}
 8007386:	b087      	sub	sp, #28
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
 8007390:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6a1b      	ldr	r3, [r3, #32]
 800739c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	69db      	ldr	r3, [r3, #28]
 80073a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073b0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	021b      	lsls	r3, r3, #8
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073c2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	031b      	lsls	r3, r3, #12
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80073d6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	031b      	lsls	r3, r3, #12
 80073dc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	621a      	str	r2, [r3, #32]
}
 80073f2:	bf00      	nop
 80073f4:	371c      	adds	r7, #28
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073fe:	b480      	push	{r7}
 8007400:	b085      	sub	sp, #20
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007414:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	4313      	orrs	r3, r2
 800741c:	f043 0307 	orr.w	r3, r3, #7
 8007420:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	609a      	str	r2, [r3, #8]
}
 8007428:	bf00      	nop
 800742a:	3714      	adds	r7, #20
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007434:	b480      	push	{r7}
 8007436:	b087      	sub	sp, #28
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
 8007440:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800744e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	021a      	lsls	r2, r3, #8
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	431a      	orrs	r2, r3
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	4313      	orrs	r3, r2
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	4313      	orrs	r3, r2
 8007460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	609a      	str	r2, [r3, #8]
}
 8007468:	bf00      	nop
 800746a:	371c      	adds	r7, #28
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007474:	b480      	push	{r7}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	f003 031f 	and.w	r3, r3, #31
 8007486:	2201      	movs	r2, #1
 8007488:	fa02 f303 	lsl.w	r3, r2, r3
 800748c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6a1a      	ldr	r2, [r3, #32]
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	43db      	mvns	r3, r3
 8007496:	401a      	ands	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6a1a      	ldr	r2, [r3, #32]
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	f003 031f 	and.w	r3, r3, #31
 80074a6:	6879      	ldr	r1, [r7, #4]
 80074a8:	fa01 f303 	lsl.w	r3, r1, r3
 80074ac:	431a      	orrs	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	621a      	str	r2, [r3, #32]
}
 80074b2:	bf00      	nop
 80074b4:	371c      	adds	r7, #28
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
	...

080074c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d101      	bne.n	80074d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074d4:	2302      	movs	r3, #2
 80074d6:	e068      	b.n	80075aa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2202      	movs	r2, #2
 80074e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a2e      	ldr	r2, [pc, #184]	; (80075b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d004      	beq.n	800750c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a2d      	ldr	r2, [pc, #180]	; (80075bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d108      	bne.n	800751e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007512:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	4313      	orrs	r3, r2
 800751c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007524:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	4313      	orrs	r3, r2
 800752e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a1e      	ldr	r2, [pc, #120]	; (80075b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d01d      	beq.n	800757e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800754a:	d018      	beq.n	800757e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a1b      	ldr	r2, [pc, #108]	; (80075c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d013      	beq.n	800757e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a1a      	ldr	r2, [pc, #104]	; (80075c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d00e      	beq.n	800757e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a18      	ldr	r2, [pc, #96]	; (80075c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d009      	beq.n	800757e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a13      	ldr	r2, [pc, #76]	; (80075bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d004      	beq.n	800757e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a14      	ldr	r2, [pc, #80]	; (80075cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d10c      	bne.n	8007598 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007584:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	4313      	orrs	r3, r2
 800758e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	40012c00 	.word	0x40012c00
 80075bc:	40013400 	.word	0x40013400
 80075c0:	40000400 	.word	0x40000400
 80075c4:	40000800 	.word	0x40000800
 80075c8:	40000c00 	.word	0x40000c00
 80075cc:	40014000 	.word	0x40014000

080075d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80075da:	2300      	movs	r3, #0
 80075dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d101      	bne.n	80075ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80075e8:	2302      	movs	r3, #2
 80075ea:	e065      	b.n	80076b8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	4313      	orrs	r3, r2
 8007600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	4313      	orrs	r3, r2
 800760e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	4313      	orrs	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4313      	orrs	r3, r2
 800762a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	4313      	orrs	r3, r2
 8007638:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	695b      	ldr	r3, [r3, #20]
 8007644:	4313      	orrs	r3, r2
 8007646:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007652:	4313      	orrs	r3, r2
 8007654:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	041b      	lsls	r3, r3, #16
 8007662:	4313      	orrs	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a16      	ldr	r2, [pc, #88]	; (80076c4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d004      	beq.n	800767a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a14      	ldr	r2, [pc, #80]	; (80076c8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d115      	bne.n	80076a6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007684:	051b      	lsls	r3, r3, #20
 8007686:	4313      	orrs	r3, r2
 8007688:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	69db      	ldr	r3, [r3, #28]
 8007694:	4313      	orrs	r3, r2
 8007696:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3714      	adds	r7, #20
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	40012c00 	.word	0x40012c00
 80076c8:	40013400 	.word	0x40013400

080076cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d101      	bne.n	800771a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e040      	b.n	800779c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800771e:	2b00      	cmp	r3, #0
 8007720:	d106      	bne.n	8007730 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f7fa fc88 	bl	8002040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2224      	movs	r2, #36	; 0x24
 8007734:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f022 0201 	bic.w	r2, r2, #1
 8007744:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774a:	2b00      	cmp	r3, #0
 800774c:	d002      	beq.n	8007754 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fb6a 	bl	8007e28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 f8af 	bl	80078b8 <UART_SetConfig>
 800775a:	4603      	mov	r3, r0
 800775c:	2b01      	cmp	r3, #1
 800775e:	d101      	bne.n	8007764 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e01b      	b.n	800779c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685a      	ldr	r2, [r3, #4]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007772:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	689a      	ldr	r2, [r3, #8]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007782:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f042 0201 	orr.w	r2, r2, #1
 8007792:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fbe9 	bl	8007f6c <UART_CheckIdleState>
 800779a:	4603      	mov	r3, r0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b08a      	sub	sp, #40	; 0x28
 80077a8:	af02      	add	r7, sp, #8
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	603b      	str	r3, [r7, #0]
 80077b0:	4613      	mov	r3, r2
 80077b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077b8:	2b20      	cmp	r3, #32
 80077ba:	d178      	bne.n	80078ae <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d002      	beq.n	80077c8 <HAL_UART_Transmit+0x24>
 80077c2:	88fb      	ldrh	r3, [r7, #6]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e071      	b.n	80078b0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2221      	movs	r2, #33	; 0x21
 80077d8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077da:	f7fa fe4f 	bl	800247c <HAL_GetTick>
 80077de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	88fa      	ldrh	r2, [r7, #6]
 80077e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	88fa      	ldrh	r2, [r7, #6]
 80077ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077f8:	d108      	bne.n	800780c <HAL_UART_Transmit+0x68>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d104      	bne.n	800780c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007802:	2300      	movs	r3, #0
 8007804:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	61bb      	str	r3, [r7, #24]
 800780a:	e003      	b.n	8007814 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007810:	2300      	movs	r3, #0
 8007812:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007814:	e030      	b.n	8007878 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	9300      	str	r3, [sp, #0]
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	2200      	movs	r2, #0
 800781e:	2180      	movs	r1, #128	; 0x80
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f000 fc4b 	bl	80080bc <UART_WaitOnFlagUntilTimeout>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d004      	beq.n	8007836 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2220      	movs	r2, #32
 8007830:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e03c      	b.n	80078b0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d10b      	bne.n	8007854 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	881a      	ldrh	r2, [r3, #0]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007848:	b292      	uxth	r2, r2
 800784a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	3302      	adds	r3, #2
 8007850:	61bb      	str	r3, [r7, #24]
 8007852:	e008      	b.n	8007866 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	781a      	ldrb	r2, [r3, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	b292      	uxth	r2, r2
 800785e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	3301      	adds	r3, #1
 8007864:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800786c:	b29b      	uxth	r3, r3
 800786e:	3b01      	subs	r3, #1
 8007870:	b29a      	uxth	r2, r3
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800787e:	b29b      	uxth	r3, r3
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1c8      	bne.n	8007816 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	2200      	movs	r2, #0
 800788c:	2140      	movs	r1, #64	; 0x40
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f000 fc14 	bl	80080bc <UART_WaitOnFlagUntilTimeout>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d004      	beq.n	80078a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2220      	movs	r2, #32
 800789e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e005      	b.n	80078b0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2220      	movs	r2, #32
 80078a8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80078aa:	2300      	movs	r3, #0
 80078ac:	e000      	b.n	80078b0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80078ae:	2302      	movs	r3, #2
  }
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3720      	adds	r7, #32
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078bc:	b08a      	sub	sp, #40	; 0x28
 80078be:	af00      	add	r7, sp, #0
 80078c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	689a      	ldr	r2, [r3, #8]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	431a      	orrs	r2, r3
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	695b      	ldr	r3, [r3, #20]
 80078d6:	431a      	orrs	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	69db      	ldr	r3, [r3, #28]
 80078dc:	4313      	orrs	r3, r2
 80078de:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	4ba4      	ldr	r3, [pc, #656]	; (8007b78 <UART_SetConfig+0x2c0>)
 80078e8:	4013      	ands	r3, r2
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	6812      	ldr	r2, [r2, #0]
 80078ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078f0:	430b      	orrs	r3, r1
 80078f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	68da      	ldr	r2, [r3, #12]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	430a      	orrs	r2, r1
 8007908:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a99      	ldr	r2, [pc, #612]	; (8007b7c <UART_SetConfig+0x2c4>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d004      	beq.n	8007924 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007920:	4313      	orrs	r3, r2
 8007922:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007934:	430a      	orrs	r2, r1
 8007936:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a90      	ldr	r2, [pc, #576]	; (8007b80 <UART_SetConfig+0x2c8>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d126      	bne.n	8007990 <UART_SetConfig+0xd8>
 8007942:	4b90      	ldr	r3, [pc, #576]	; (8007b84 <UART_SetConfig+0x2cc>)
 8007944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007948:	f003 0303 	and.w	r3, r3, #3
 800794c:	2b03      	cmp	r3, #3
 800794e:	d81b      	bhi.n	8007988 <UART_SetConfig+0xd0>
 8007950:	a201      	add	r2, pc, #4	; (adr r2, 8007958 <UART_SetConfig+0xa0>)
 8007952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007956:	bf00      	nop
 8007958:	08007969 	.word	0x08007969
 800795c:	08007979 	.word	0x08007979
 8007960:	08007971 	.word	0x08007971
 8007964:	08007981 	.word	0x08007981
 8007968:	2301      	movs	r3, #1
 800796a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800796e:	e116      	b.n	8007b9e <UART_SetConfig+0x2e6>
 8007970:	2302      	movs	r3, #2
 8007972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007976:	e112      	b.n	8007b9e <UART_SetConfig+0x2e6>
 8007978:	2304      	movs	r3, #4
 800797a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800797e:	e10e      	b.n	8007b9e <UART_SetConfig+0x2e6>
 8007980:	2308      	movs	r3, #8
 8007982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007986:	e10a      	b.n	8007b9e <UART_SetConfig+0x2e6>
 8007988:	2310      	movs	r3, #16
 800798a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800798e:	e106      	b.n	8007b9e <UART_SetConfig+0x2e6>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a7c      	ldr	r2, [pc, #496]	; (8007b88 <UART_SetConfig+0x2d0>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d138      	bne.n	8007a0c <UART_SetConfig+0x154>
 800799a:	4b7a      	ldr	r3, [pc, #488]	; (8007b84 <UART_SetConfig+0x2cc>)
 800799c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079a0:	f003 030c 	and.w	r3, r3, #12
 80079a4:	2b0c      	cmp	r3, #12
 80079a6:	d82d      	bhi.n	8007a04 <UART_SetConfig+0x14c>
 80079a8:	a201      	add	r2, pc, #4	; (adr r2, 80079b0 <UART_SetConfig+0xf8>)
 80079aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ae:	bf00      	nop
 80079b0:	080079e5 	.word	0x080079e5
 80079b4:	08007a05 	.word	0x08007a05
 80079b8:	08007a05 	.word	0x08007a05
 80079bc:	08007a05 	.word	0x08007a05
 80079c0:	080079f5 	.word	0x080079f5
 80079c4:	08007a05 	.word	0x08007a05
 80079c8:	08007a05 	.word	0x08007a05
 80079cc:	08007a05 	.word	0x08007a05
 80079d0:	080079ed 	.word	0x080079ed
 80079d4:	08007a05 	.word	0x08007a05
 80079d8:	08007a05 	.word	0x08007a05
 80079dc:	08007a05 	.word	0x08007a05
 80079e0:	080079fd 	.word	0x080079fd
 80079e4:	2300      	movs	r3, #0
 80079e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079ea:	e0d8      	b.n	8007b9e <UART_SetConfig+0x2e6>
 80079ec:	2302      	movs	r3, #2
 80079ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079f2:	e0d4      	b.n	8007b9e <UART_SetConfig+0x2e6>
 80079f4:	2304      	movs	r3, #4
 80079f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079fa:	e0d0      	b.n	8007b9e <UART_SetConfig+0x2e6>
 80079fc:	2308      	movs	r3, #8
 80079fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a02:	e0cc      	b.n	8007b9e <UART_SetConfig+0x2e6>
 8007a04:	2310      	movs	r3, #16
 8007a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a0a:	e0c8      	b.n	8007b9e <UART_SetConfig+0x2e6>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a5e      	ldr	r2, [pc, #376]	; (8007b8c <UART_SetConfig+0x2d4>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d125      	bne.n	8007a62 <UART_SetConfig+0x1aa>
 8007a16:	4b5b      	ldr	r3, [pc, #364]	; (8007b84 <UART_SetConfig+0x2cc>)
 8007a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007a20:	2b30      	cmp	r3, #48	; 0x30
 8007a22:	d016      	beq.n	8007a52 <UART_SetConfig+0x19a>
 8007a24:	2b30      	cmp	r3, #48	; 0x30
 8007a26:	d818      	bhi.n	8007a5a <UART_SetConfig+0x1a2>
 8007a28:	2b20      	cmp	r3, #32
 8007a2a:	d00a      	beq.n	8007a42 <UART_SetConfig+0x18a>
 8007a2c:	2b20      	cmp	r3, #32
 8007a2e:	d814      	bhi.n	8007a5a <UART_SetConfig+0x1a2>
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d002      	beq.n	8007a3a <UART_SetConfig+0x182>
 8007a34:	2b10      	cmp	r3, #16
 8007a36:	d008      	beq.n	8007a4a <UART_SetConfig+0x192>
 8007a38:	e00f      	b.n	8007a5a <UART_SetConfig+0x1a2>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a40:	e0ad      	b.n	8007b9e <UART_SetConfig+0x2e6>
 8007a42:	2302      	movs	r3, #2
 8007a44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a48:	e0a9      	b.n	8007b9e <UART_SetConfig+0x2e6>
 8007a4a:	2304      	movs	r3, #4
 8007a4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a50:	e0a5      	b.n	8007b9e <UART_SetConfig+0x2e6>
 8007a52:	2308      	movs	r3, #8
 8007a54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a58:	e0a1      	b.n	8007b9e <UART_SetConfig+0x2e6>
 8007a5a:	2310      	movs	r3, #16
 8007a5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a60:	e09d      	b.n	8007b9e <UART_SetConfig+0x2e6>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a4a      	ldr	r2, [pc, #296]	; (8007b90 <UART_SetConfig+0x2d8>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d125      	bne.n	8007ab8 <UART_SetConfig+0x200>
 8007a6c:	4b45      	ldr	r3, [pc, #276]	; (8007b84 <UART_SetConfig+0x2cc>)
 8007a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a76:	2bc0      	cmp	r3, #192	; 0xc0
 8007a78:	d016      	beq.n	8007aa8 <UART_SetConfig+0x1f0>
 8007a7a:	2bc0      	cmp	r3, #192	; 0xc0
 8007a7c:	d818      	bhi.n	8007ab0 <UART_SetConfig+0x1f8>
 8007a7e:	2b80      	cmp	r3, #128	; 0x80
 8007a80:	d00a      	beq.n	8007a98 <UART_SetConfig+0x1e0>
 8007a82:	2b80      	cmp	r3, #128	; 0x80
 8007a84:	d814      	bhi.n	8007ab0 <UART_SetConfig+0x1f8>
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d002      	beq.n	8007a90 <UART_SetConfig+0x1d8>
 8007a8a:	2b40      	cmp	r3, #64	; 0x40
 8007a8c:	d008      	beq.n	8007aa0 <UART_SetConfig+0x1e8>
 8007a8e:	e00f      	b.n	8007ab0 <UART_SetConfig+0x1f8>
 8007a90:	2300      	movs	r3, #0
 8007a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a96:	e082      	b.n	8007b9e <UART_SetConfig+0x2e6>
 8007a98:	2302      	movs	r3, #2
 8007a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a9e:	e07e      	b.n	8007b9e <UART_SetConfig+0x2e6>
 8007aa0:	2304      	movs	r3, #4
 8007aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007aa6:	e07a      	b.n	8007b9e <UART_SetConfig+0x2e6>
 8007aa8:	2308      	movs	r3, #8
 8007aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007aae:	e076      	b.n	8007b9e <UART_SetConfig+0x2e6>
 8007ab0:	2310      	movs	r3, #16
 8007ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ab6:	e072      	b.n	8007b9e <UART_SetConfig+0x2e6>
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a35      	ldr	r2, [pc, #212]	; (8007b94 <UART_SetConfig+0x2dc>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d12a      	bne.n	8007b18 <UART_SetConfig+0x260>
 8007ac2:	4b30      	ldr	r3, [pc, #192]	; (8007b84 <UART_SetConfig+0x2cc>)
 8007ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ac8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007acc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ad0:	d01a      	beq.n	8007b08 <UART_SetConfig+0x250>
 8007ad2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ad6:	d81b      	bhi.n	8007b10 <UART_SetConfig+0x258>
 8007ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007adc:	d00c      	beq.n	8007af8 <UART_SetConfig+0x240>
 8007ade:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ae2:	d815      	bhi.n	8007b10 <UART_SetConfig+0x258>
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d003      	beq.n	8007af0 <UART_SetConfig+0x238>
 8007ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aec:	d008      	beq.n	8007b00 <UART_SetConfig+0x248>
 8007aee:	e00f      	b.n	8007b10 <UART_SetConfig+0x258>
 8007af0:	2300      	movs	r3, #0
 8007af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007af6:	e052      	b.n	8007b9e <UART_SetConfig+0x2e6>
 8007af8:	2302      	movs	r3, #2
 8007afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007afe:	e04e      	b.n	8007b9e <UART_SetConfig+0x2e6>
 8007b00:	2304      	movs	r3, #4
 8007b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b06:	e04a      	b.n	8007b9e <UART_SetConfig+0x2e6>
 8007b08:	2308      	movs	r3, #8
 8007b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b0e:	e046      	b.n	8007b9e <UART_SetConfig+0x2e6>
 8007b10:	2310      	movs	r3, #16
 8007b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b16:	e042      	b.n	8007b9e <UART_SetConfig+0x2e6>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a17      	ldr	r2, [pc, #92]	; (8007b7c <UART_SetConfig+0x2c4>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d13a      	bne.n	8007b98 <UART_SetConfig+0x2e0>
 8007b22:	4b18      	ldr	r3, [pc, #96]	; (8007b84 <UART_SetConfig+0x2cc>)
 8007b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007b2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b30:	d01a      	beq.n	8007b68 <UART_SetConfig+0x2b0>
 8007b32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b36:	d81b      	bhi.n	8007b70 <UART_SetConfig+0x2b8>
 8007b38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b3c:	d00c      	beq.n	8007b58 <UART_SetConfig+0x2a0>
 8007b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b42:	d815      	bhi.n	8007b70 <UART_SetConfig+0x2b8>
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d003      	beq.n	8007b50 <UART_SetConfig+0x298>
 8007b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b4c:	d008      	beq.n	8007b60 <UART_SetConfig+0x2a8>
 8007b4e:	e00f      	b.n	8007b70 <UART_SetConfig+0x2b8>
 8007b50:	2300      	movs	r3, #0
 8007b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b56:	e022      	b.n	8007b9e <UART_SetConfig+0x2e6>
 8007b58:	2302      	movs	r3, #2
 8007b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b5e:	e01e      	b.n	8007b9e <UART_SetConfig+0x2e6>
 8007b60:	2304      	movs	r3, #4
 8007b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b66:	e01a      	b.n	8007b9e <UART_SetConfig+0x2e6>
 8007b68:	2308      	movs	r3, #8
 8007b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b6e:	e016      	b.n	8007b9e <UART_SetConfig+0x2e6>
 8007b70:	2310      	movs	r3, #16
 8007b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b76:	e012      	b.n	8007b9e <UART_SetConfig+0x2e6>
 8007b78:	efff69f3 	.word	0xefff69f3
 8007b7c:	40008000 	.word	0x40008000
 8007b80:	40013800 	.word	0x40013800
 8007b84:	40021000 	.word	0x40021000
 8007b88:	40004400 	.word	0x40004400
 8007b8c:	40004800 	.word	0x40004800
 8007b90:	40004c00 	.word	0x40004c00
 8007b94:	40005000 	.word	0x40005000
 8007b98:	2310      	movs	r3, #16
 8007b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a9f      	ldr	r2, [pc, #636]	; (8007e20 <UART_SetConfig+0x568>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d17a      	bne.n	8007c9e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007ba8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bac:	2b08      	cmp	r3, #8
 8007bae:	d824      	bhi.n	8007bfa <UART_SetConfig+0x342>
 8007bb0:	a201      	add	r2, pc, #4	; (adr r2, 8007bb8 <UART_SetConfig+0x300>)
 8007bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb6:	bf00      	nop
 8007bb8:	08007bdd 	.word	0x08007bdd
 8007bbc:	08007bfb 	.word	0x08007bfb
 8007bc0:	08007be5 	.word	0x08007be5
 8007bc4:	08007bfb 	.word	0x08007bfb
 8007bc8:	08007beb 	.word	0x08007beb
 8007bcc:	08007bfb 	.word	0x08007bfb
 8007bd0:	08007bfb 	.word	0x08007bfb
 8007bd4:	08007bfb 	.word	0x08007bfb
 8007bd8:	08007bf3 	.word	0x08007bf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bdc:	f7fd f94e 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
 8007be0:	61f8      	str	r0, [r7, #28]
        break;
 8007be2:	e010      	b.n	8007c06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007be4:	4b8f      	ldr	r3, [pc, #572]	; (8007e24 <UART_SetConfig+0x56c>)
 8007be6:	61fb      	str	r3, [r7, #28]
        break;
 8007be8:	e00d      	b.n	8007c06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bea:	f7fd f8af 	bl	8004d4c <HAL_RCC_GetSysClockFreq>
 8007bee:	61f8      	str	r0, [r7, #28]
        break;
 8007bf0:	e009      	b.n	8007c06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bf6:	61fb      	str	r3, [r7, #28]
        break;
 8007bf8:	e005      	b.n	8007c06 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007c04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 80fb 	beq.w	8007e04 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	685a      	ldr	r2, [r3, #4]
 8007c12:	4613      	mov	r3, r2
 8007c14:	005b      	lsls	r3, r3, #1
 8007c16:	4413      	add	r3, r2
 8007c18:	69fa      	ldr	r2, [r7, #28]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d305      	bcc.n	8007c2a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007c24:	69fa      	ldr	r2, [r7, #28]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d903      	bls.n	8007c32 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007c30:	e0e8      	b.n	8007e04 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	2200      	movs	r2, #0
 8007c36:	461c      	mov	r4, r3
 8007c38:	4615      	mov	r5, r2
 8007c3a:	f04f 0200 	mov.w	r2, #0
 8007c3e:	f04f 0300 	mov.w	r3, #0
 8007c42:	022b      	lsls	r3, r5, #8
 8007c44:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007c48:	0222      	lsls	r2, r4, #8
 8007c4a:	68f9      	ldr	r1, [r7, #12]
 8007c4c:	6849      	ldr	r1, [r1, #4]
 8007c4e:	0849      	lsrs	r1, r1, #1
 8007c50:	2000      	movs	r0, #0
 8007c52:	4688      	mov	r8, r1
 8007c54:	4681      	mov	r9, r0
 8007c56:	eb12 0a08 	adds.w	sl, r2, r8
 8007c5a:	eb43 0b09 	adc.w	fp, r3, r9
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	603b      	str	r3, [r7, #0]
 8007c66:	607a      	str	r2, [r7, #4]
 8007c68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c6c:	4650      	mov	r0, sl
 8007c6e:	4659      	mov	r1, fp
 8007c70:	f7f9 f80a 	bl	8000c88 <__aeabi_uldivmod>
 8007c74:	4602      	mov	r2, r0
 8007c76:	460b      	mov	r3, r1
 8007c78:	4613      	mov	r3, r2
 8007c7a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c82:	d308      	bcc.n	8007c96 <UART_SetConfig+0x3de>
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c8a:	d204      	bcs.n	8007c96 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	69ba      	ldr	r2, [r7, #24]
 8007c92:	60da      	str	r2, [r3, #12]
 8007c94:	e0b6      	b.n	8007e04 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007c9c:	e0b2      	b.n	8007e04 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	69db      	ldr	r3, [r3, #28]
 8007ca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ca6:	d15e      	bne.n	8007d66 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007ca8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007cac:	2b08      	cmp	r3, #8
 8007cae:	d828      	bhi.n	8007d02 <UART_SetConfig+0x44a>
 8007cb0:	a201      	add	r2, pc, #4	; (adr r2, 8007cb8 <UART_SetConfig+0x400>)
 8007cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb6:	bf00      	nop
 8007cb8:	08007cdd 	.word	0x08007cdd
 8007cbc:	08007ce5 	.word	0x08007ce5
 8007cc0:	08007ced 	.word	0x08007ced
 8007cc4:	08007d03 	.word	0x08007d03
 8007cc8:	08007cf3 	.word	0x08007cf3
 8007ccc:	08007d03 	.word	0x08007d03
 8007cd0:	08007d03 	.word	0x08007d03
 8007cd4:	08007d03 	.word	0x08007d03
 8007cd8:	08007cfb 	.word	0x08007cfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cdc:	f7fd f8ce 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
 8007ce0:	61f8      	str	r0, [r7, #28]
        break;
 8007ce2:	e014      	b.n	8007d0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ce4:	f7fd f8e0 	bl	8004ea8 <HAL_RCC_GetPCLK2Freq>
 8007ce8:	61f8      	str	r0, [r7, #28]
        break;
 8007cea:	e010      	b.n	8007d0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cec:	4b4d      	ldr	r3, [pc, #308]	; (8007e24 <UART_SetConfig+0x56c>)
 8007cee:	61fb      	str	r3, [r7, #28]
        break;
 8007cf0:	e00d      	b.n	8007d0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cf2:	f7fd f82b 	bl	8004d4c <HAL_RCC_GetSysClockFreq>
 8007cf6:	61f8      	str	r0, [r7, #28]
        break;
 8007cf8:	e009      	b.n	8007d0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cfe:	61fb      	str	r3, [r7, #28]
        break;
 8007d00:	e005      	b.n	8007d0e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007d02:	2300      	movs	r3, #0
 8007d04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007d0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d077      	beq.n	8007e04 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	005a      	lsls	r2, r3, #1
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	085b      	lsrs	r3, r3, #1
 8007d1e:	441a      	add	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d28:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	2b0f      	cmp	r3, #15
 8007d2e:	d916      	bls.n	8007d5e <UART_SetConfig+0x4a6>
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d36:	d212      	bcs.n	8007d5e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	f023 030f 	bic.w	r3, r3, #15
 8007d40:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	085b      	lsrs	r3, r3, #1
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	f003 0307 	and.w	r3, r3, #7
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	8afb      	ldrh	r3, [r7, #22]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	8afa      	ldrh	r2, [r7, #22]
 8007d5a:	60da      	str	r2, [r3, #12]
 8007d5c:	e052      	b.n	8007e04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007d64:	e04e      	b.n	8007e04 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d6a:	2b08      	cmp	r3, #8
 8007d6c:	d827      	bhi.n	8007dbe <UART_SetConfig+0x506>
 8007d6e:	a201      	add	r2, pc, #4	; (adr r2, 8007d74 <UART_SetConfig+0x4bc>)
 8007d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d74:	08007d99 	.word	0x08007d99
 8007d78:	08007da1 	.word	0x08007da1
 8007d7c:	08007da9 	.word	0x08007da9
 8007d80:	08007dbf 	.word	0x08007dbf
 8007d84:	08007daf 	.word	0x08007daf
 8007d88:	08007dbf 	.word	0x08007dbf
 8007d8c:	08007dbf 	.word	0x08007dbf
 8007d90:	08007dbf 	.word	0x08007dbf
 8007d94:	08007db7 	.word	0x08007db7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d98:	f7fd f870 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
 8007d9c:	61f8      	str	r0, [r7, #28]
        break;
 8007d9e:	e014      	b.n	8007dca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007da0:	f7fd f882 	bl	8004ea8 <HAL_RCC_GetPCLK2Freq>
 8007da4:	61f8      	str	r0, [r7, #28]
        break;
 8007da6:	e010      	b.n	8007dca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007da8:	4b1e      	ldr	r3, [pc, #120]	; (8007e24 <UART_SetConfig+0x56c>)
 8007daa:	61fb      	str	r3, [r7, #28]
        break;
 8007dac:	e00d      	b.n	8007dca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dae:	f7fc ffcd 	bl	8004d4c <HAL_RCC_GetSysClockFreq>
 8007db2:	61f8      	str	r0, [r7, #28]
        break;
 8007db4:	e009      	b.n	8007dca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dba:	61fb      	str	r3, [r7, #28]
        break;
 8007dbc:	e005      	b.n	8007dca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007dc8:	bf00      	nop
    }

    if (pclk != 0U)
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d019      	beq.n	8007e04 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	085a      	lsrs	r2, r3, #1
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	441a      	add	r2, r3
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8007de2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	2b0f      	cmp	r3, #15
 8007de8:	d909      	bls.n	8007dfe <UART_SetConfig+0x546>
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007df0:	d205      	bcs.n	8007dfe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	60da      	str	r2, [r3, #12]
 8007dfc:	e002      	b.n	8007e04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007e10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3728      	adds	r7, #40	; 0x28
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e1e:	bf00      	nop
 8007e20:	40008000 	.word	0x40008000
 8007e24:	00f42400 	.word	0x00f42400

08007e28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e34:	f003 0308 	and.w	r3, r3, #8
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00a      	beq.n	8007e52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00a      	beq.n	8007e74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	430a      	orrs	r2, r1
 8007e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e78:	f003 0302 	and.w	r3, r3, #2
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00a      	beq.n	8007e96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	430a      	orrs	r2, r1
 8007e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9a:	f003 0304 	and.w	r3, r3, #4
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00a      	beq.n	8007eb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	430a      	orrs	r2, r1
 8007eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ebc:	f003 0310 	and.w	r3, r3, #16
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00a      	beq.n	8007eda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ede:	f003 0320 	and.w	r3, r3, #32
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00a      	beq.n	8007efc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	430a      	orrs	r2, r1
 8007efa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d01a      	beq.n	8007f3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	430a      	orrs	r2, r1
 8007f1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f26:	d10a      	bne.n	8007f3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	430a      	orrs	r2, r1
 8007f3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00a      	beq.n	8007f60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	430a      	orrs	r2, r1
 8007f5e:	605a      	str	r2, [r3, #4]
  }
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b098      	sub	sp, #96	; 0x60
 8007f70:	af02      	add	r7, sp, #8
 8007f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f7c:	f7fa fa7e 	bl	800247c <HAL_GetTick>
 8007f80:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 0308 	and.w	r3, r3, #8
 8007f8c:	2b08      	cmp	r3, #8
 8007f8e:	d12e      	bne.n	8007fee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f94:	9300      	str	r3, [sp, #0]
 8007f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f88c 	bl	80080bc <UART_WaitOnFlagUntilTimeout>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d021      	beq.n	8007fee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb2:	e853 3f00 	ldrex	r3, [r3]
 8007fb6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fbe:	653b      	str	r3, [r7, #80]	; 0x50
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fc8:	647b      	str	r3, [r7, #68]	; 0x44
 8007fca:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fcc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007fce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fd0:	e841 2300 	strex	r3, r2, [r1]
 8007fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1e6      	bne.n	8007faa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2220      	movs	r2, #32
 8007fe0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fea:	2303      	movs	r3, #3
 8007fec:	e062      	b.n	80080b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 0304 	and.w	r3, r3, #4
 8007ff8:	2b04      	cmp	r3, #4
 8007ffa:	d149      	bne.n	8008090 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ffc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008000:	9300      	str	r3, [sp, #0]
 8008002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008004:	2200      	movs	r2, #0
 8008006:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f856 	bl	80080bc <UART_WaitOnFlagUntilTimeout>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d03c      	beq.n	8008090 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801e:	e853 3f00 	ldrex	r3, [r3]
 8008022:	623b      	str	r3, [r7, #32]
   return(result);
 8008024:	6a3b      	ldr	r3, [r7, #32]
 8008026:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800802a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	461a      	mov	r2, r3
 8008032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008034:	633b      	str	r3, [r7, #48]	; 0x30
 8008036:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008038:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800803a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800803c:	e841 2300 	strex	r3, r2, [r1]
 8008040:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1e6      	bne.n	8008016 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3308      	adds	r3, #8
 800804e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	e853 3f00 	ldrex	r3, [r3]
 8008056:	60fb      	str	r3, [r7, #12]
   return(result);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f023 0301 	bic.w	r3, r3, #1
 800805e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	3308      	adds	r3, #8
 8008066:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008068:	61fa      	str	r2, [r7, #28]
 800806a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806c:	69b9      	ldr	r1, [r7, #24]
 800806e:	69fa      	ldr	r2, [r7, #28]
 8008070:	e841 2300 	strex	r3, r2, [r1]
 8008074:	617b      	str	r3, [r7, #20]
   return(result);
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1e5      	bne.n	8008048 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2220      	movs	r2, #32
 8008080:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800808c:	2303      	movs	r3, #3
 800808e:	e011      	b.n	80080b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2220      	movs	r2, #32
 8008094:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2220      	movs	r2, #32
 800809a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3758      	adds	r7, #88	; 0x58
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	603b      	str	r3, [r7, #0]
 80080c8:	4613      	mov	r3, r2
 80080ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080cc:	e049      	b.n	8008162 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d4:	d045      	beq.n	8008162 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080d6:	f7fa f9d1 	bl	800247c <HAL_GetTick>
 80080da:	4602      	mov	r2, r0
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	1ad3      	subs	r3, r2, r3
 80080e0:	69ba      	ldr	r2, [r7, #24]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d302      	bcc.n	80080ec <UART_WaitOnFlagUntilTimeout+0x30>
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d101      	bne.n	80080f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80080ec:	2303      	movs	r3, #3
 80080ee:	e048      	b.n	8008182 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0304 	and.w	r3, r3, #4
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d031      	beq.n	8008162 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	69db      	ldr	r3, [r3, #28]
 8008104:	f003 0308 	and.w	r3, r3, #8
 8008108:	2b08      	cmp	r3, #8
 800810a:	d110      	bne.n	800812e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2208      	movs	r2, #8
 8008112:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f000 f838 	bl	800818a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2208      	movs	r2, #8
 800811e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e029      	b.n	8008182 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	69db      	ldr	r3, [r3, #28]
 8008134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008138:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800813c:	d111      	bne.n	8008162 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008146:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f000 f81e 	bl	800818a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2220      	movs	r2, #32
 8008152:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	e00f      	b.n	8008182 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	69da      	ldr	r2, [r3, #28]
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	4013      	ands	r3, r2
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	429a      	cmp	r2, r3
 8008170:	bf0c      	ite	eq
 8008172:	2301      	moveq	r3, #1
 8008174:	2300      	movne	r3, #0
 8008176:	b2db      	uxtb	r3, r3
 8008178:	461a      	mov	r2, r3
 800817a:	79fb      	ldrb	r3, [r7, #7]
 800817c:	429a      	cmp	r2, r3
 800817e:	d0a6      	beq.n	80080ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800818a:	b480      	push	{r7}
 800818c:	b095      	sub	sp, #84	; 0x54
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800819a:	e853 3f00 	ldrex	r3, [r3]
 800819e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80081a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	461a      	mov	r2, r3
 80081ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081b0:	643b      	str	r3, [r7, #64]	; 0x40
 80081b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081b8:	e841 2300 	strex	r3, r2, [r1]
 80081bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1e6      	bne.n	8008192 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	3308      	adds	r3, #8
 80081ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081cc:	6a3b      	ldr	r3, [r7, #32]
 80081ce:	e853 3f00 	ldrex	r3, [r3]
 80081d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	f023 0301 	bic.w	r3, r3, #1
 80081da:	64bb      	str	r3, [r7, #72]	; 0x48
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	3308      	adds	r3, #8
 80081e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081ec:	e841 2300 	strex	r3, r2, [r1]
 80081f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1e5      	bne.n	80081c4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d118      	bne.n	8008232 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	e853 3f00 	ldrex	r3, [r3]
 800820c:	60bb      	str	r3, [r7, #8]
   return(result);
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	f023 0310 	bic.w	r3, r3, #16
 8008214:	647b      	str	r3, [r7, #68]	; 0x44
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	461a      	mov	r2, r3
 800821c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800821e:	61bb      	str	r3, [r7, #24]
 8008220:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008222:	6979      	ldr	r1, [r7, #20]
 8008224:	69ba      	ldr	r2, [r7, #24]
 8008226:	e841 2300 	strex	r3, r2, [r1]
 800822a:	613b      	str	r3, [r7, #16]
   return(result);
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d1e6      	bne.n	8008200 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2220      	movs	r2, #32
 8008236:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008246:	bf00      	nop
 8008248:	3754      	adds	r7, #84	; 0x54
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr

08008252 <__cvt>:
 8008252:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008256:	ec55 4b10 	vmov	r4, r5, d0
 800825a:	2d00      	cmp	r5, #0
 800825c:	460e      	mov	r6, r1
 800825e:	4619      	mov	r1, r3
 8008260:	462b      	mov	r3, r5
 8008262:	bfbb      	ittet	lt
 8008264:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008268:	461d      	movlt	r5, r3
 800826a:	2300      	movge	r3, #0
 800826c:	232d      	movlt	r3, #45	; 0x2d
 800826e:	700b      	strb	r3, [r1, #0]
 8008270:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008272:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008276:	4691      	mov	r9, r2
 8008278:	f023 0820 	bic.w	r8, r3, #32
 800827c:	bfbc      	itt	lt
 800827e:	4622      	movlt	r2, r4
 8008280:	4614      	movlt	r4, r2
 8008282:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008286:	d005      	beq.n	8008294 <__cvt+0x42>
 8008288:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800828c:	d100      	bne.n	8008290 <__cvt+0x3e>
 800828e:	3601      	adds	r6, #1
 8008290:	2102      	movs	r1, #2
 8008292:	e000      	b.n	8008296 <__cvt+0x44>
 8008294:	2103      	movs	r1, #3
 8008296:	ab03      	add	r3, sp, #12
 8008298:	9301      	str	r3, [sp, #4]
 800829a:	ab02      	add	r3, sp, #8
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	ec45 4b10 	vmov	d0, r4, r5
 80082a2:	4653      	mov	r3, sl
 80082a4:	4632      	mov	r2, r6
 80082a6:	f001 f95b 	bl	8009560 <_dtoa_r>
 80082aa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80082ae:	4607      	mov	r7, r0
 80082b0:	d102      	bne.n	80082b8 <__cvt+0x66>
 80082b2:	f019 0f01 	tst.w	r9, #1
 80082b6:	d022      	beq.n	80082fe <__cvt+0xac>
 80082b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80082bc:	eb07 0906 	add.w	r9, r7, r6
 80082c0:	d110      	bne.n	80082e4 <__cvt+0x92>
 80082c2:	783b      	ldrb	r3, [r7, #0]
 80082c4:	2b30      	cmp	r3, #48	; 0x30
 80082c6:	d10a      	bne.n	80082de <__cvt+0x8c>
 80082c8:	2200      	movs	r2, #0
 80082ca:	2300      	movs	r3, #0
 80082cc:	4620      	mov	r0, r4
 80082ce:	4629      	mov	r1, r5
 80082d0:	f7f8 fbfa 	bl	8000ac8 <__aeabi_dcmpeq>
 80082d4:	b918      	cbnz	r0, 80082de <__cvt+0x8c>
 80082d6:	f1c6 0601 	rsb	r6, r6, #1
 80082da:	f8ca 6000 	str.w	r6, [sl]
 80082de:	f8da 3000 	ldr.w	r3, [sl]
 80082e2:	4499      	add	r9, r3
 80082e4:	2200      	movs	r2, #0
 80082e6:	2300      	movs	r3, #0
 80082e8:	4620      	mov	r0, r4
 80082ea:	4629      	mov	r1, r5
 80082ec:	f7f8 fbec 	bl	8000ac8 <__aeabi_dcmpeq>
 80082f0:	b108      	cbz	r0, 80082f6 <__cvt+0xa4>
 80082f2:	f8cd 900c 	str.w	r9, [sp, #12]
 80082f6:	2230      	movs	r2, #48	; 0x30
 80082f8:	9b03      	ldr	r3, [sp, #12]
 80082fa:	454b      	cmp	r3, r9
 80082fc:	d307      	bcc.n	800830e <__cvt+0xbc>
 80082fe:	9b03      	ldr	r3, [sp, #12]
 8008300:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008302:	1bdb      	subs	r3, r3, r7
 8008304:	4638      	mov	r0, r7
 8008306:	6013      	str	r3, [r2, #0]
 8008308:	b004      	add	sp, #16
 800830a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800830e:	1c59      	adds	r1, r3, #1
 8008310:	9103      	str	r1, [sp, #12]
 8008312:	701a      	strb	r2, [r3, #0]
 8008314:	e7f0      	b.n	80082f8 <__cvt+0xa6>

08008316 <__exponent>:
 8008316:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008318:	4603      	mov	r3, r0
 800831a:	2900      	cmp	r1, #0
 800831c:	bfb8      	it	lt
 800831e:	4249      	neglt	r1, r1
 8008320:	f803 2b02 	strb.w	r2, [r3], #2
 8008324:	bfb4      	ite	lt
 8008326:	222d      	movlt	r2, #45	; 0x2d
 8008328:	222b      	movge	r2, #43	; 0x2b
 800832a:	2909      	cmp	r1, #9
 800832c:	7042      	strb	r2, [r0, #1]
 800832e:	dd2a      	ble.n	8008386 <__exponent+0x70>
 8008330:	f10d 0207 	add.w	r2, sp, #7
 8008334:	4617      	mov	r7, r2
 8008336:	260a      	movs	r6, #10
 8008338:	4694      	mov	ip, r2
 800833a:	fb91 f5f6 	sdiv	r5, r1, r6
 800833e:	fb06 1415 	mls	r4, r6, r5, r1
 8008342:	3430      	adds	r4, #48	; 0x30
 8008344:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008348:	460c      	mov	r4, r1
 800834a:	2c63      	cmp	r4, #99	; 0x63
 800834c:	f102 32ff 	add.w	r2, r2, #4294967295
 8008350:	4629      	mov	r1, r5
 8008352:	dcf1      	bgt.n	8008338 <__exponent+0x22>
 8008354:	3130      	adds	r1, #48	; 0x30
 8008356:	f1ac 0402 	sub.w	r4, ip, #2
 800835a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800835e:	1c41      	adds	r1, r0, #1
 8008360:	4622      	mov	r2, r4
 8008362:	42ba      	cmp	r2, r7
 8008364:	d30a      	bcc.n	800837c <__exponent+0x66>
 8008366:	f10d 0209 	add.w	r2, sp, #9
 800836a:	eba2 020c 	sub.w	r2, r2, ip
 800836e:	42bc      	cmp	r4, r7
 8008370:	bf88      	it	hi
 8008372:	2200      	movhi	r2, #0
 8008374:	4413      	add	r3, r2
 8008376:	1a18      	subs	r0, r3, r0
 8008378:	b003      	add	sp, #12
 800837a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800837c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008380:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008384:	e7ed      	b.n	8008362 <__exponent+0x4c>
 8008386:	2330      	movs	r3, #48	; 0x30
 8008388:	3130      	adds	r1, #48	; 0x30
 800838a:	7083      	strb	r3, [r0, #2]
 800838c:	70c1      	strb	r1, [r0, #3]
 800838e:	1d03      	adds	r3, r0, #4
 8008390:	e7f1      	b.n	8008376 <__exponent+0x60>
	...

08008394 <_printf_float>:
 8008394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008398:	ed2d 8b02 	vpush	{d8}
 800839c:	b08d      	sub	sp, #52	; 0x34
 800839e:	460c      	mov	r4, r1
 80083a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80083a4:	4616      	mov	r6, r2
 80083a6:	461f      	mov	r7, r3
 80083a8:	4605      	mov	r5, r0
 80083aa:	f000 ffd5 	bl	8009358 <_localeconv_r>
 80083ae:	f8d0 a000 	ldr.w	sl, [r0]
 80083b2:	4650      	mov	r0, sl
 80083b4:	f7f7 ff5c 	bl	8000270 <strlen>
 80083b8:	2300      	movs	r3, #0
 80083ba:	930a      	str	r3, [sp, #40]	; 0x28
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	9305      	str	r3, [sp, #20]
 80083c0:	f8d8 3000 	ldr.w	r3, [r8]
 80083c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80083c8:	3307      	adds	r3, #7
 80083ca:	f023 0307 	bic.w	r3, r3, #7
 80083ce:	f103 0208 	add.w	r2, r3, #8
 80083d2:	f8c8 2000 	str.w	r2, [r8]
 80083d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80083de:	9307      	str	r3, [sp, #28]
 80083e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80083e4:	ee08 0a10 	vmov	s16, r0
 80083e8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80083ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083f0:	4b9e      	ldr	r3, [pc, #632]	; (800866c <_printf_float+0x2d8>)
 80083f2:	f04f 32ff 	mov.w	r2, #4294967295
 80083f6:	f7f8 fb99 	bl	8000b2c <__aeabi_dcmpun>
 80083fa:	bb88      	cbnz	r0, 8008460 <_printf_float+0xcc>
 80083fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008400:	4b9a      	ldr	r3, [pc, #616]	; (800866c <_printf_float+0x2d8>)
 8008402:	f04f 32ff 	mov.w	r2, #4294967295
 8008406:	f7f8 fb73 	bl	8000af0 <__aeabi_dcmple>
 800840a:	bb48      	cbnz	r0, 8008460 <_printf_float+0xcc>
 800840c:	2200      	movs	r2, #0
 800840e:	2300      	movs	r3, #0
 8008410:	4640      	mov	r0, r8
 8008412:	4649      	mov	r1, r9
 8008414:	f7f8 fb62 	bl	8000adc <__aeabi_dcmplt>
 8008418:	b110      	cbz	r0, 8008420 <_printf_float+0x8c>
 800841a:	232d      	movs	r3, #45	; 0x2d
 800841c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008420:	4a93      	ldr	r2, [pc, #588]	; (8008670 <_printf_float+0x2dc>)
 8008422:	4b94      	ldr	r3, [pc, #592]	; (8008674 <_printf_float+0x2e0>)
 8008424:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008428:	bf94      	ite	ls
 800842a:	4690      	movls	r8, r2
 800842c:	4698      	movhi	r8, r3
 800842e:	2303      	movs	r3, #3
 8008430:	6123      	str	r3, [r4, #16]
 8008432:	9b05      	ldr	r3, [sp, #20]
 8008434:	f023 0304 	bic.w	r3, r3, #4
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	f04f 0900 	mov.w	r9, #0
 800843e:	9700      	str	r7, [sp, #0]
 8008440:	4633      	mov	r3, r6
 8008442:	aa0b      	add	r2, sp, #44	; 0x2c
 8008444:	4621      	mov	r1, r4
 8008446:	4628      	mov	r0, r5
 8008448:	f000 f9da 	bl	8008800 <_printf_common>
 800844c:	3001      	adds	r0, #1
 800844e:	f040 8090 	bne.w	8008572 <_printf_float+0x1de>
 8008452:	f04f 30ff 	mov.w	r0, #4294967295
 8008456:	b00d      	add	sp, #52	; 0x34
 8008458:	ecbd 8b02 	vpop	{d8}
 800845c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008460:	4642      	mov	r2, r8
 8008462:	464b      	mov	r3, r9
 8008464:	4640      	mov	r0, r8
 8008466:	4649      	mov	r1, r9
 8008468:	f7f8 fb60 	bl	8000b2c <__aeabi_dcmpun>
 800846c:	b140      	cbz	r0, 8008480 <_printf_float+0xec>
 800846e:	464b      	mov	r3, r9
 8008470:	2b00      	cmp	r3, #0
 8008472:	bfbc      	itt	lt
 8008474:	232d      	movlt	r3, #45	; 0x2d
 8008476:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800847a:	4a7f      	ldr	r2, [pc, #508]	; (8008678 <_printf_float+0x2e4>)
 800847c:	4b7f      	ldr	r3, [pc, #508]	; (800867c <_printf_float+0x2e8>)
 800847e:	e7d1      	b.n	8008424 <_printf_float+0x90>
 8008480:	6863      	ldr	r3, [r4, #4]
 8008482:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008486:	9206      	str	r2, [sp, #24]
 8008488:	1c5a      	adds	r2, r3, #1
 800848a:	d13f      	bne.n	800850c <_printf_float+0x178>
 800848c:	2306      	movs	r3, #6
 800848e:	6063      	str	r3, [r4, #4]
 8008490:	9b05      	ldr	r3, [sp, #20]
 8008492:	6861      	ldr	r1, [r4, #4]
 8008494:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008498:	2300      	movs	r3, #0
 800849a:	9303      	str	r3, [sp, #12]
 800849c:	ab0a      	add	r3, sp, #40	; 0x28
 800849e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80084a2:	ab09      	add	r3, sp, #36	; 0x24
 80084a4:	ec49 8b10 	vmov	d0, r8, r9
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	6022      	str	r2, [r4, #0]
 80084ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80084b0:	4628      	mov	r0, r5
 80084b2:	f7ff fece 	bl	8008252 <__cvt>
 80084b6:	9b06      	ldr	r3, [sp, #24]
 80084b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084ba:	2b47      	cmp	r3, #71	; 0x47
 80084bc:	4680      	mov	r8, r0
 80084be:	d108      	bne.n	80084d2 <_printf_float+0x13e>
 80084c0:	1cc8      	adds	r0, r1, #3
 80084c2:	db02      	blt.n	80084ca <_printf_float+0x136>
 80084c4:	6863      	ldr	r3, [r4, #4]
 80084c6:	4299      	cmp	r1, r3
 80084c8:	dd41      	ble.n	800854e <_printf_float+0x1ba>
 80084ca:	f1ab 0302 	sub.w	r3, fp, #2
 80084ce:	fa5f fb83 	uxtb.w	fp, r3
 80084d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80084d6:	d820      	bhi.n	800851a <_printf_float+0x186>
 80084d8:	3901      	subs	r1, #1
 80084da:	465a      	mov	r2, fp
 80084dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80084e0:	9109      	str	r1, [sp, #36]	; 0x24
 80084e2:	f7ff ff18 	bl	8008316 <__exponent>
 80084e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084e8:	1813      	adds	r3, r2, r0
 80084ea:	2a01      	cmp	r2, #1
 80084ec:	4681      	mov	r9, r0
 80084ee:	6123      	str	r3, [r4, #16]
 80084f0:	dc02      	bgt.n	80084f8 <_printf_float+0x164>
 80084f2:	6822      	ldr	r2, [r4, #0]
 80084f4:	07d2      	lsls	r2, r2, #31
 80084f6:	d501      	bpl.n	80084fc <_printf_float+0x168>
 80084f8:	3301      	adds	r3, #1
 80084fa:	6123      	str	r3, [r4, #16]
 80084fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008500:	2b00      	cmp	r3, #0
 8008502:	d09c      	beq.n	800843e <_printf_float+0xaa>
 8008504:	232d      	movs	r3, #45	; 0x2d
 8008506:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800850a:	e798      	b.n	800843e <_printf_float+0xaa>
 800850c:	9a06      	ldr	r2, [sp, #24]
 800850e:	2a47      	cmp	r2, #71	; 0x47
 8008510:	d1be      	bne.n	8008490 <_printf_float+0xfc>
 8008512:	2b00      	cmp	r3, #0
 8008514:	d1bc      	bne.n	8008490 <_printf_float+0xfc>
 8008516:	2301      	movs	r3, #1
 8008518:	e7b9      	b.n	800848e <_printf_float+0xfa>
 800851a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800851e:	d118      	bne.n	8008552 <_printf_float+0x1be>
 8008520:	2900      	cmp	r1, #0
 8008522:	6863      	ldr	r3, [r4, #4]
 8008524:	dd0b      	ble.n	800853e <_printf_float+0x1aa>
 8008526:	6121      	str	r1, [r4, #16]
 8008528:	b913      	cbnz	r3, 8008530 <_printf_float+0x19c>
 800852a:	6822      	ldr	r2, [r4, #0]
 800852c:	07d0      	lsls	r0, r2, #31
 800852e:	d502      	bpl.n	8008536 <_printf_float+0x1a2>
 8008530:	3301      	adds	r3, #1
 8008532:	440b      	add	r3, r1
 8008534:	6123      	str	r3, [r4, #16]
 8008536:	65a1      	str	r1, [r4, #88]	; 0x58
 8008538:	f04f 0900 	mov.w	r9, #0
 800853c:	e7de      	b.n	80084fc <_printf_float+0x168>
 800853e:	b913      	cbnz	r3, 8008546 <_printf_float+0x1b2>
 8008540:	6822      	ldr	r2, [r4, #0]
 8008542:	07d2      	lsls	r2, r2, #31
 8008544:	d501      	bpl.n	800854a <_printf_float+0x1b6>
 8008546:	3302      	adds	r3, #2
 8008548:	e7f4      	b.n	8008534 <_printf_float+0x1a0>
 800854a:	2301      	movs	r3, #1
 800854c:	e7f2      	b.n	8008534 <_printf_float+0x1a0>
 800854e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008554:	4299      	cmp	r1, r3
 8008556:	db05      	blt.n	8008564 <_printf_float+0x1d0>
 8008558:	6823      	ldr	r3, [r4, #0]
 800855a:	6121      	str	r1, [r4, #16]
 800855c:	07d8      	lsls	r0, r3, #31
 800855e:	d5ea      	bpl.n	8008536 <_printf_float+0x1a2>
 8008560:	1c4b      	adds	r3, r1, #1
 8008562:	e7e7      	b.n	8008534 <_printf_float+0x1a0>
 8008564:	2900      	cmp	r1, #0
 8008566:	bfd4      	ite	le
 8008568:	f1c1 0202 	rsble	r2, r1, #2
 800856c:	2201      	movgt	r2, #1
 800856e:	4413      	add	r3, r2
 8008570:	e7e0      	b.n	8008534 <_printf_float+0x1a0>
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	055a      	lsls	r2, r3, #21
 8008576:	d407      	bmi.n	8008588 <_printf_float+0x1f4>
 8008578:	6923      	ldr	r3, [r4, #16]
 800857a:	4642      	mov	r2, r8
 800857c:	4631      	mov	r1, r6
 800857e:	4628      	mov	r0, r5
 8008580:	47b8      	blx	r7
 8008582:	3001      	adds	r0, #1
 8008584:	d12c      	bne.n	80085e0 <_printf_float+0x24c>
 8008586:	e764      	b.n	8008452 <_printf_float+0xbe>
 8008588:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800858c:	f240 80e0 	bls.w	8008750 <_printf_float+0x3bc>
 8008590:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008594:	2200      	movs	r2, #0
 8008596:	2300      	movs	r3, #0
 8008598:	f7f8 fa96 	bl	8000ac8 <__aeabi_dcmpeq>
 800859c:	2800      	cmp	r0, #0
 800859e:	d034      	beq.n	800860a <_printf_float+0x276>
 80085a0:	4a37      	ldr	r2, [pc, #220]	; (8008680 <_printf_float+0x2ec>)
 80085a2:	2301      	movs	r3, #1
 80085a4:	4631      	mov	r1, r6
 80085a6:	4628      	mov	r0, r5
 80085a8:	47b8      	blx	r7
 80085aa:	3001      	adds	r0, #1
 80085ac:	f43f af51 	beq.w	8008452 <_printf_float+0xbe>
 80085b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085b4:	429a      	cmp	r2, r3
 80085b6:	db02      	blt.n	80085be <_printf_float+0x22a>
 80085b8:	6823      	ldr	r3, [r4, #0]
 80085ba:	07d8      	lsls	r0, r3, #31
 80085bc:	d510      	bpl.n	80085e0 <_printf_float+0x24c>
 80085be:	ee18 3a10 	vmov	r3, s16
 80085c2:	4652      	mov	r2, sl
 80085c4:	4631      	mov	r1, r6
 80085c6:	4628      	mov	r0, r5
 80085c8:	47b8      	blx	r7
 80085ca:	3001      	adds	r0, #1
 80085cc:	f43f af41 	beq.w	8008452 <_printf_float+0xbe>
 80085d0:	f04f 0800 	mov.w	r8, #0
 80085d4:	f104 091a 	add.w	r9, r4, #26
 80085d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085da:	3b01      	subs	r3, #1
 80085dc:	4543      	cmp	r3, r8
 80085de:	dc09      	bgt.n	80085f4 <_printf_float+0x260>
 80085e0:	6823      	ldr	r3, [r4, #0]
 80085e2:	079b      	lsls	r3, r3, #30
 80085e4:	f100 8107 	bmi.w	80087f6 <_printf_float+0x462>
 80085e8:	68e0      	ldr	r0, [r4, #12]
 80085ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085ec:	4298      	cmp	r0, r3
 80085ee:	bfb8      	it	lt
 80085f0:	4618      	movlt	r0, r3
 80085f2:	e730      	b.n	8008456 <_printf_float+0xc2>
 80085f4:	2301      	movs	r3, #1
 80085f6:	464a      	mov	r2, r9
 80085f8:	4631      	mov	r1, r6
 80085fa:	4628      	mov	r0, r5
 80085fc:	47b8      	blx	r7
 80085fe:	3001      	adds	r0, #1
 8008600:	f43f af27 	beq.w	8008452 <_printf_float+0xbe>
 8008604:	f108 0801 	add.w	r8, r8, #1
 8008608:	e7e6      	b.n	80085d8 <_printf_float+0x244>
 800860a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800860c:	2b00      	cmp	r3, #0
 800860e:	dc39      	bgt.n	8008684 <_printf_float+0x2f0>
 8008610:	4a1b      	ldr	r2, [pc, #108]	; (8008680 <_printf_float+0x2ec>)
 8008612:	2301      	movs	r3, #1
 8008614:	4631      	mov	r1, r6
 8008616:	4628      	mov	r0, r5
 8008618:	47b8      	blx	r7
 800861a:	3001      	adds	r0, #1
 800861c:	f43f af19 	beq.w	8008452 <_printf_float+0xbe>
 8008620:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008624:	4313      	orrs	r3, r2
 8008626:	d102      	bne.n	800862e <_printf_float+0x29a>
 8008628:	6823      	ldr	r3, [r4, #0]
 800862a:	07d9      	lsls	r1, r3, #31
 800862c:	d5d8      	bpl.n	80085e0 <_printf_float+0x24c>
 800862e:	ee18 3a10 	vmov	r3, s16
 8008632:	4652      	mov	r2, sl
 8008634:	4631      	mov	r1, r6
 8008636:	4628      	mov	r0, r5
 8008638:	47b8      	blx	r7
 800863a:	3001      	adds	r0, #1
 800863c:	f43f af09 	beq.w	8008452 <_printf_float+0xbe>
 8008640:	f04f 0900 	mov.w	r9, #0
 8008644:	f104 0a1a 	add.w	sl, r4, #26
 8008648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800864a:	425b      	negs	r3, r3
 800864c:	454b      	cmp	r3, r9
 800864e:	dc01      	bgt.n	8008654 <_printf_float+0x2c0>
 8008650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008652:	e792      	b.n	800857a <_printf_float+0x1e6>
 8008654:	2301      	movs	r3, #1
 8008656:	4652      	mov	r2, sl
 8008658:	4631      	mov	r1, r6
 800865a:	4628      	mov	r0, r5
 800865c:	47b8      	blx	r7
 800865e:	3001      	adds	r0, #1
 8008660:	f43f aef7 	beq.w	8008452 <_printf_float+0xbe>
 8008664:	f109 0901 	add.w	r9, r9, #1
 8008668:	e7ee      	b.n	8008648 <_printf_float+0x2b4>
 800866a:	bf00      	nop
 800866c:	7fefffff 	.word	0x7fefffff
 8008670:	0800cb58 	.word	0x0800cb58
 8008674:	0800cb5c 	.word	0x0800cb5c
 8008678:	0800cb60 	.word	0x0800cb60
 800867c:	0800cb64 	.word	0x0800cb64
 8008680:	0800cb68 	.word	0x0800cb68
 8008684:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008686:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008688:	429a      	cmp	r2, r3
 800868a:	bfa8      	it	ge
 800868c:	461a      	movge	r2, r3
 800868e:	2a00      	cmp	r2, #0
 8008690:	4691      	mov	r9, r2
 8008692:	dc37      	bgt.n	8008704 <_printf_float+0x370>
 8008694:	f04f 0b00 	mov.w	fp, #0
 8008698:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800869c:	f104 021a 	add.w	r2, r4, #26
 80086a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086a2:	9305      	str	r3, [sp, #20]
 80086a4:	eba3 0309 	sub.w	r3, r3, r9
 80086a8:	455b      	cmp	r3, fp
 80086aa:	dc33      	bgt.n	8008714 <_printf_float+0x380>
 80086ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086b0:	429a      	cmp	r2, r3
 80086b2:	db3b      	blt.n	800872c <_printf_float+0x398>
 80086b4:	6823      	ldr	r3, [r4, #0]
 80086b6:	07da      	lsls	r2, r3, #31
 80086b8:	d438      	bmi.n	800872c <_printf_float+0x398>
 80086ba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80086be:	eba2 0903 	sub.w	r9, r2, r3
 80086c2:	9b05      	ldr	r3, [sp, #20]
 80086c4:	1ad2      	subs	r2, r2, r3
 80086c6:	4591      	cmp	r9, r2
 80086c8:	bfa8      	it	ge
 80086ca:	4691      	movge	r9, r2
 80086cc:	f1b9 0f00 	cmp.w	r9, #0
 80086d0:	dc35      	bgt.n	800873e <_printf_float+0x3aa>
 80086d2:	f04f 0800 	mov.w	r8, #0
 80086d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086da:	f104 0a1a 	add.w	sl, r4, #26
 80086de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086e2:	1a9b      	subs	r3, r3, r2
 80086e4:	eba3 0309 	sub.w	r3, r3, r9
 80086e8:	4543      	cmp	r3, r8
 80086ea:	f77f af79 	ble.w	80085e0 <_printf_float+0x24c>
 80086ee:	2301      	movs	r3, #1
 80086f0:	4652      	mov	r2, sl
 80086f2:	4631      	mov	r1, r6
 80086f4:	4628      	mov	r0, r5
 80086f6:	47b8      	blx	r7
 80086f8:	3001      	adds	r0, #1
 80086fa:	f43f aeaa 	beq.w	8008452 <_printf_float+0xbe>
 80086fe:	f108 0801 	add.w	r8, r8, #1
 8008702:	e7ec      	b.n	80086de <_printf_float+0x34a>
 8008704:	4613      	mov	r3, r2
 8008706:	4631      	mov	r1, r6
 8008708:	4642      	mov	r2, r8
 800870a:	4628      	mov	r0, r5
 800870c:	47b8      	blx	r7
 800870e:	3001      	adds	r0, #1
 8008710:	d1c0      	bne.n	8008694 <_printf_float+0x300>
 8008712:	e69e      	b.n	8008452 <_printf_float+0xbe>
 8008714:	2301      	movs	r3, #1
 8008716:	4631      	mov	r1, r6
 8008718:	4628      	mov	r0, r5
 800871a:	9205      	str	r2, [sp, #20]
 800871c:	47b8      	blx	r7
 800871e:	3001      	adds	r0, #1
 8008720:	f43f ae97 	beq.w	8008452 <_printf_float+0xbe>
 8008724:	9a05      	ldr	r2, [sp, #20]
 8008726:	f10b 0b01 	add.w	fp, fp, #1
 800872a:	e7b9      	b.n	80086a0 <_printf_float+0x30c>
 800872c:	ee18 3a10 	vmov	r3, s16
 8008730:	4652      	mov	r2, sl
 8008732:	4631      	mov	r1, r6
 8008734:	4628      	mov	r0, r5
 8008736:	47b8      	blx	r7
 8008738:	3001      	adds	r0, #1
 800873a:	d1be      	bne.n	80086ba <_printf_float+0x326>
 800873c:	e689      	b.n	8008452 <_printf_float+0xbe>
 800873e:	9a05      	ldr	r2, [sp, #20]
 8008740:	464b      	mov	r3, r9
 8008742:	4442      	add	r2, r8
 8008744:	4631      	mov	r1, r6
 8008746:	4628      	mov	r0, r5
 8008748:	47b8      	blx	r7
 800874a:	3001      	adds	r0, #1
 800874c:	d1c1      	bne.n	80086d2 <_printf_float+0x33e>
 800874e:	e680      	b.n	8008452 <_printf_float+0xbe>
 8008750:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008752:	2a01      	cmp	r2, #1
 8008754:	dc01      	bgt.n	800875a <_printf_float+0x3c6>
 8008756:	07db      	lsls	r3, r3, #31
 8008758:	d53a      	bpl.n	80087d0 <_printf_float+0x43c>
 800875a:	2301      	movs	r3, #1
 800875c:	4642      	mov	r2, r8
 800875e:	4631      	mov	r1, r6
 8008760:	4628      	mov	r0, r5
 8008762:	47b8      	blx	r7
 8008764:	3001      	adds	r0, #1
 8008766:	f43f ae74 	beq.w	8008452 <_printf_float+0xbe>
 800876a:	ee18 3a10 	vmov	r3, s16
 800876e:	4652      	mov	r2, sl
 8008770:	4631      	mov	r1, r6
 8008772:	4628      	mov	r0, r5
 8008774:	47b8      	blx	r7
 8008776:	3001      	adds	r0, #1
 8008778:	f43f ae6b 	beq.w	8008452 <_printf_float+0xbe>
 800877c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008780:	2200      	movs	r2, #0
 8008782:	2300      	movs	r3, #0
 8008784:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008788:	f7f8 f99e 	bl	8000ac8 <__aeabi_dcmpeq>
 800878c:	b9d8      	cbnz	r0, 80087c6 <_printf_float+0x432>
 800878e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008792:	f108 0201 	add.w	r2, r8, #1
 8008796:	4631      	mov	r1, r6
 8008798:	4628      	mov	r0, r5
 800879a:	47b8      	blx	r7
 800879c:	3001      	adds	r0, #1
 800879e:	d10e      	bne.n	80087be <_printf_float+0x42a>
 80087a0:	e657      	b.n	8008452 <_printf_float+0xbe>
 80087a2:	2301      	movs	r3, #1
 80087a4:	4652      	mov	r2, sl
 80087a6:	4631      	mov	r1, r6
 80087a8:	4628      	mov	r0, r5
 80087aa:	47b8      	blx	r7
 80087ac:	3001      	adds	r0, #1
 80087ae:	f43f ae50 	beq.w	8008452 <_printf_float+0xbe>
 80087b2:	f108 0801 	add.w	r8, r8, #1
 80087b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087b8:	3b01      	subs	r3, #1
 80087ba:	4543      	cmp	r3, r8
 80087bc:	dcf1      	bgt.n	80087a2 <_printf_float+0x40e>
 80087be:	464b      	mov	r3, r9
 80087c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80087c4:	e6da      	b.n	800857c <_printf_float+0x1e8>
 80087c6:	f04f 0800 	mov.w	r8, #0
 80087ca:	f104 0a1a 	add.w	sl, r4, #26
 80087ce:	e7f2      	b.n	80087b6 <_printf_float+0x422>
 80087d0:	2301      	movs	r3, #1
 80087d2:	4642      	mov	r2, r8
 80087d4:	e7df      	b.n	8008796 <_printf_float+0x402>
 80087d6:	2301      	movs	r3, #1
 80087d8:	464a      	mov	r2, r9
 80087da:	4631      	mov	r1, r6
 80087dc:	4628      	mov	r0, r5
 80087de:	47b8      	blx	r7
 80087e0:	3001      	adds	r0, #1
 80087e2:	f43f ae36 	beq.w	8008452 <_printf_float+0xbe>
 80087e6:	f108 0801 	add.w	r8, r8, #1
 80087ea:	68e3      	ldr	r3, [r4, #12]
 80087ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087ee:	1a5b      	subs	r3, r3, r1
 80087f0:	4543      	cmp	r3, r8
 80087f2:	dcf0      	bgt.n	80087d6 <_printf_float+0x442>
 80087f4:	e6f8      	b.n	80085e8 <_printf_float+0x254>
 80087f6:	f04f 0800 	mov.w	r8, #0
 80087fa:	f104 0919 	add.w	r9, r4, #25
 80087fe:	e7f4      	b.n	80087ea <_printf_float+0x456>

08008800 <_printf_common>:
 8008800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008804:	4616      	mov	r6, r2
 8008806:	4699      	mov	r9, r3
 8008808:	688a      	ldr	r2, [r1, #8]
 800880a:	690b      	ldr	r3, [r1, #16]
 800880c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008810:	4293      	cmp	r3, r2
 8008812:	bfb8      	it	lt
 8008814:	4613      	movlt	r3, r2
 8008816:	6033      	str	r3, [r6, #0]
 8008818:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800881c:	4607      	mov	r7, r0
 800881e:	460c      	mov	r4, r1
 8008820:	b10a      	cbz	r2, 8008826 <_printf_common+0x26>
 8008822:	3301      	adds	r3, #1
 8008824:	6033      	str	r3, [r6, #0]
 8008826:	6823      	ldr	r3, [r4, #0]
 8008828:	0699      	lsls	r1, r3, #26
 800882a:	bf42      	ittt	mi
 800882c:	6833      	ldrmi	r3, [r6, #0]
 800882e:	3302      	addmi	r3, #2
 8008830:	6033      	strmi	r3, [r6, #0]
 8008832:	6825      	ldr	r5, [r4, #0]
 8008834:	f015 0506 	ands.w	r5, r5, #6
 8008838:	d106      	bne.n	8008848 <_printf_common+0x48>
 800883a:	f104 0a19 	add.w	sl, r4, #25
 800883e:	68e3      	ldr	r3, [r4, #12]
 8008840:	6832      	ldr	r2, [r6, #0]
 8008842:	1a9b      	subs	r3, r3, r2
 8008844:	42ab      	cmp	r3, r5
 8008846:	dc26      	bgt.n	8008896 <_printf_common+0x96>
 8008848:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800884c:	1e13      	subs	r3, r2, #0
 800884e:	6822      	ldr	r2, [r4, #0]
 8008850:	bf18      	it	ne
 8008852:	2301      	movne	r3, #1
 8008854:	0692      	lsls	r2, r2, #26
 8008856:	d42b      	bmi.n	80088b0 <_printf_common+0xb0>
 8008858:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800885c:	4649      	mov	r1, r9
 800885e:	4638      	mov	r0, r7
 8008860:	47c0      	blx	r8
 8008862:	3001      	adds	r0, #1
 8008864:	d01e      	beq.n	80088a4 <_printf_common+0xa4>
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	6922      	ldr	r2, [r4, #16]
 800886a:	f003 0306 	and.w	r3, r3, #6
 800886e:	2b04      	cmp	r3, #4
 8008870:	bf02      	ittt	eq
 8008872:	68e5      	ldreq	r5, [r4, #12]
 8008874:	6833      	ldreq	r3, [r6, #0]
 8008876:	1aed      	subeq	r5, r5, r3
 8008878:	68a3      	ldr	r3, [r4, #8]
 800887a:	bf0c      	ite	eq
 800887c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008880:	2500      	movne	r5, #0
 8008882:	4293      	cmp	r3, r2
 8008884:	bfc4      	itt	gt
 8008886:	1a9b      	subgt	r3, r3, r2
 8008888:	18ed      	addgt	r5, r5, r3
 800888a:	2600      	movs	r6, #0
 800888c:	341a      	adds	r4, #26
 800888e:	42b5      	cmp	r5, r6
 8008890:	d11a      	bne.n	80088c8 <_printf_common+0xc8>
 8008892:	2000      	movs	r0, #0
 8008894:	e008      	b.n	80088a8 <_printf_common+0xa8>
 8008896:	2301      	movs	r3, #1
 8008898:	4652      	mov	r2, sl
 800889a:	4649      	mov	r1, r9
 800889c:	4638      	mov	r0, r7
 800889e:	47c0      	blx	r8
 80088a0:	3001      	adds	r0, #1
 80088a2:	d103      	bne.n	80088ac <_printf_common+0xac>
 80088a4:	f04f 30ff 	mov.w	r0, #4294967295
 80088a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ac:	3501      	adds	r5, #1
 80088ae:	e7c6      	b.n	800883e <_printf_common+0x3e>
 80088b0:	18e1      	adds	r1, r4, r3
 80088b2:	1c5a      	adds	r2, r3, #1
 80088b4:	2030      	movs	r0, #48	; 0x30
 80088b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088ba:	4422      	add	r2, r4
 80088bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088c4:	3302      	adds	r3, #2
 80088c6:	e7c7      	b.n	8008858 <_printf_common+0x58>
 80088c8:	2301      	movs	r3, #1
 80088ca:	4622      	mov	r2, r4
 80088cc:	4649      	mov	r1, r9
 80088ce:	4638      	mov	r0, r7
 80088d0:	47c0      	blx	r8
 80088d2:	3001      	adds	r0, #1
 80088d4:	d0e6      	beq.n	80088a4 <_printf_common+0xa4>
 80088d6:	3601      	adds	r6, #1
 80088d8:	e7d9      	b.n	800888e <_printf_common+0x8e>
	...

080088dc <_printf_i>:
 80088dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088e0:	7e0f      	ldrb	r7, [r1, #24]
 80088e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088e4:	2f78      	cmp	r7, #120	; 0x78
 80088e6:	4691      	mov	r9, r2
 80088e8:	4680      	mov	r8, r0
 80088ea:	460c      	mov	r4, r1
 80088ec:	469a      	mov	sl, r3
 80088ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80088f2:	d807      	bhi.n	8008904 <_printf_i+0x28>
 80088f4:	2f62      	cmp	r7, #98	; 0x62
 80088f6:	d80a      	bhi.n	800890e <_printf_i+0x32>
 80088f8:	2f00      	cmp	r7, #0
 80088fa:	f000 80d4 	beq.w	8008aa6 <_printf_i+0x1ca>
 80088fe:	2f58      	cmp	r7, #88	; 0x58
 8008900:	f000 80c0 	beq.w	8008a84 <_printf_i+0x1a8>
 8008904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008908:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800890c:	e03a      	b.n	8008984 <_printf_i+0xa8>
 800890e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008912:	2b15      	cmp	r3, #21
 8008914:	d8f6      	bhi.n	8008904 <_printf_i+0x28>
 8008916:	a101      	add	r1, pc, #4	; (adr r1, 800891c <_printf_i+0x40>)
 8008918:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800891c:	08008975 	.word	0x08008975
 8008920:	08008989 	.word	0x08008989
 8008924:	08008905 	.word	0x08008905
 8008928:	08008905 	.word	0x08008905
 800892c:	08008905 	.word	0x08008905
 8008930:	08008905 	.word	0x08008905
 8008934:	08008989 	.word	0x08008989
 8008938:	08008905 	.word	0x08008905
 800893c:	08008905 	.word	0x08008905
 8008940:	08008905 	.word	0x08008905
 8008944:	08008905 	.word	0x08008905
 8008948:	08008a8d 	.word	0x08008a8d
 800894c:	080089b5 	.word	0x080089b5
 8008950:	08008a47 	.word	0x08008a47
 8008954:	08008905 	.word	0x08008905
 8008958:	08008905 	.word	0x08008905
 800895c:	08008aaf 	.word	0x08008aaf
 8008960:	08008905 	.word	0x08008905
 8008964:	080089b5 	.word	0x080089b5
 8008968:	08008905 	.word	0x08008905
 800896c:	08008905 	.word	0x08008905
 8008970:	08008a4f 	.word	0x08008a4f
 8008974:	682b      	ldr	r3, [r5, #0]
 8008976:	1d1a      	adds	r2, r3, #4
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	602a      	str	r2, [r5, #0]
 800897c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008980:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008984:	2301      	movs	r3, #1
 8008986:	e09f      	b.n	8008ac8 <_printf_i+0x1ec>
 8008988:	6820      	ldr	r0, [r4, #0]
 800898a:	682b      	ldr	r3, [r5, #0]
 800898c:	0607      	lsls	r7, r0, #24
 800898e:	f103 0104 	add.w	r1, r3, #4
 8008992:	6029      	str	r1, [r5, #0]
 8008994:	d501      	bpl.n	800899a <_printf_i+0xbe>
 8008996:	681e      	ldr	r6, [r3, #0]
 8008998:	e003      	b.n	80089a2 <_printf_i+0xc6>
 800899a:	0646      	lsls	r6, r0, #25
 800899c:	d5fb      	bpl.n	8008996 <_printf_i+0xba>
 800899e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80089a2:	2e00      	cmp	r6, #0
 80089a4:	da03      	bge.n	80089ae <_printf_i+0xd2>
 80089a6:	232d      	movs	r3, #45	; 0x2d
 80089a8:	4276      	negs	r6, r6
 80089aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089ae:	485a      	ldr	r0, [pc, #360]	; (8008b18 <_printf_i+0x23c>)
 80089b0:	230a      	movs	r3, #10
 80089b2:	e012      	b.n	80089da <_printf_i+0xfe>
 80089b4:	682b      	ldr	r3, [r5, #0]
 80089b6:	6820      	ldr	r0, [r4, #0]
 80089b8:	1d19      	adds	r1, r3, #4
 80089ba:	6029      	str	r1, [r5, #0]
 80089bc:	0605      	lsls	r5, r0, #24
 80089be:	d501      	bpl.n	80089c4 <_printf_i+0xe8>
 80089c0:	681e      	ldr	r6, [r3, #0]
 80089c2:	e002      	b.n	80089ca <_printf_i+0xee>
 80089c4:	0641      	lsls	r1, r0, #25
 80089c6:	d5fb      	bpl.n	80089c0 <_printf_i+0xe4>
 80089c8:	881e      	ldrh	r6, [r3, #0]
 80089ca:	4853      	ldr	r0, [pc, #332]	; (8008b18 <_printf_i+0x23c>)
 80089cc:	2f6f      	cmp	r7, #111	; 0x6f
 80089ce:	bf0c      	ite	eq
 80089d0:	2308      	moveq	r3, #8
 80089d2:	230a      	movne	r3, #10
 80089d4:	2100      	movs	r1, #0
 80089d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089da:	6865      	ldr	r5, [r4, #4]
 80089dc:	60a5      	str	r5, [r4, #8]
 80089de:	2d00      	cmp	r5, #0
 80089e0:	bfa2      	ittt	ge
 80089e2:	6821      	ldrge	r1, [r4, #0]
 80089e4:	f021 0104 	bicge.w	r1, r1, #4
 80089e8:	6021      	strge	r1, [r4, #0]
 80089ea:	b90e      	cbnz	r6, 80089f0 <_printf_i+0x114>
 80089ec:	2d00      	cmp	r5, #0
 80089ee:	d04b      	beq.n	8008a88 <_printf_i+0x1ac>
 80089f0:	4615      	mov	r5, r2
 80089f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80089f6:	fb03 6711 	mls	r7, r3, r1, r6
 80089fa:	5dc7      	ldrb	r7, [r0, r7]
 80089fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a00:	4637      	mov	r7, r6
 8008a02:	42bb      	cmp	r3, r7
 8008a04:	460e      	mov	r6, r1
 8008a06:	d9f4      	bls.n	80089f2 <_printf_i+0x116>
 8008a08:	2b08      	cmp	r3, #8
 8008a0a:	d10b      	bne.n	8008a24 <_printf_i+0x148>
 8008a0c:	6823      	ldr	r3, [r4, #0]
 8008a0e:	07de      	lsls	r6, r3, #31
 8008a10:	d508      	bpl.n	8008a24 <_printf_i+0x148>
 8008a12:	6923      	ldr	r3, [r4, #16]
 8008a14:	6861      	ldr	r1, [r4, #4]
 8008a16:	4299      	cmp	r1, r3
 8008a18:	bfde      	ittt	le
 8008a1a:	2330      	movle	r3, #48	; 0x30
 8008a1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a24:	1b52      	subs	r2, r2, r5
 8008a26:	6122      	str	r2, [r4, #16]
 8008a28:	f8cd a000 	str.w	sl, [sp]
 8008a2c:	464b      	mov	r3, r9
 8008a2e:	aa03      	add	r2, sp, #12
 8008a30:	4621      	mov	r1, r4
 8008a32:	4640      	mov	r0, r8
 8008a34:	f7ff fee4 	bl	8008800 <_printf_common>
 8008a38:	3001      	adds	r0, #1
 8008a3a:	d14a      	bne.n	8008ad2 <_printf_i+0x1f6>
 8008a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a40:	b004      	add	sp, #16
 8008a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a46:	6823      	ldr	r3, [r4, #0]
 8008a48:	f043 0320 	orr.w	r3, r3, #32
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	4833      	ldr	r0, [pc, #204]	; (8008b1c <_printf_i+0x240>)
 8008a50:	2778      	movs	r7, #120	; 0x78
 8008a52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008a56:	6823      	ldr	r3, [r4, #0]
 8008a58:	6829      	ldr	r1, [r5, #0]
 8008a5a:	061f      	lsls	r7, r3, #24
 8008a5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a60:	d402      	bmi.n	8008a68 <_printf_i+0x18c>
 8008a62:	065f      	lsls	r7, r3, #25
 8008a64:	bf48      	it	mi
 8008a66:	b2b6      	uxthmi	r6, r6
 8008a68:	07df      	lsls	r7, r3, #31
 8008a6a:	bf48      	it	mi
 8008a6c:	f043 0320 	orrmi.w	r3, r3, #32
 8008a70:	6029      	str	r1, [r5, #0]
 8008a72:	bf48      	it	mi
 8008a74:	6023      	strmi	r3, [r4, #0]
 8008a76:	b91e      	cbnz	r6, 8008a80 <_printf_i+0x1a4>
 8008a78:	6823      	ldr	r3, [r4, #0]
 8008a7a:	f023 0320 	bic.w	r3, r3, #32
 8008a7e:	6023      	str	r3, [r4, #0]
 8008a80:	2310      	movs	r3, #16
 8008a82:	e7a7      	b.n	80089d4 <_printf_i+0xf8>
 8008a84:	4824      	ldr	r0, [pc, #144]	; (8008b18 <_printf_i+0x23c>)
 8008a86:	e7e4      	b.n	8008a52 <_printf_i+0x176>
 8008a88:	4615      	mov	r5, r2
 8008a8a:	e7bd      	b.n	8008a08 <_printf_i+0x12c>
 8008a8c:	682b      	ldr	r3, [r5, #0]
 8008a8e:	6826      	ldr	r6, [r4, #0]
 8008a90:	6961      	ldr	r1, [r4, #20]
 8008a92:	1d18      	adds	r0, r3, #4
 8008a94:	6028      	str	r0, [r5, #0]
 8008a96:	0635      	lsls	r5, r6, #24
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	d501      	bpl.n	8008aa0 <_printf_i+0x1c4>
 8008a9c:	6019      	str	r1, [r3, #0]
 8008a9e:	e002      	b.n	8008aa6 <_printf_i+0x1ca>
 8008aa0:	0670      	lsls	r0, r6, #25
 8008aa2:	d5fb      	bpl.n	8008a9c <_printf_i+0x1c0>
 8008aa4:	8019      	strh	r1, [r3, #0]
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	6123      	str	r3, [r4, #16]
 8008aaa:	4615      	mov	r5, r2
 8008aac:	e7bc      	b.n	8008a28 <_printf_i+0x14c>
 8008aae:	682b      	ldr	r3, [r5, #0]
 8008ab0:	1d1a      	adds	r2, r3, #4
 8008ab2:	602a      	str	r2, [r5, #0]
 8008ab4:	681d      	ldr	r5, [r3, #0]
 8008ab6:	6862      	ldr	r2, [r4, #4]
 8008ab8:	2100      	movs	r1, #0
 8008aba:	4628      	mov	r0, r5
 8008abc:	f7f7 fb88 	bl	80001d0 <memchr>
 8008ac0:	b108      	cbz	r0, 8008ac6 <_printf_i+0x1ea>
 8008ac2:	1b40      	subs	r0, r0, r5
 8008ac4:	6060      	str	r0, [r4, #4]
 8008ac6:	6863      	ldr	r3, [r4, #4]
 8008ac8:	6123      	str	r3, [r4, #16]
 8008aca:	2300      	movs	r3, #0
 8008acc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ad0:	e7aa      	b.n	8008a28 <_printf_i+0x14c>
 8008ad2:	6923      	ldr	r3, [r4, #16]
 8008ad4:	462a      	mov	r2, r5
 8008ad6:	4649      	mov	r1, r9
 8008ad8:	4640      	mov	r0, r8
 8008ada:	47d0      	blx	sl
 8008adc:	3001      	adds	r0, #1
 8008ade:	d0ad      	beq.n	8008a3c <_printf_i+0x160>
 8008ae0:	6823      	ldr	r3, [r4, #0]
 8008ae2:	079b      	lsls	r3, r3, #30
 8008ae4:	d413      	bmi.n	8008b0e <_printf_i+0x232>
 8008ae6:	68e0      	ldr	r0, [r4, #12]
 8008ae8:	9b03      	ldr	r3, [sp, #12]
 8008aea:	4298      	cmp	r0, r3
 8008aec:	bfb8      	it	lt
 8008aee:	4618      	movlt	r0, r3
 8008af0:	e7a6      	b.n	8008a40 <_printf_i+0x164>
 8008af2:	2301      	movs	r3, #1
 8008af4:	4632      	mov	r2, r6
 8008af6:	4649      	mov	r1, r9
 8008af8:	4640      	mov	r0, r8
 8008afa:	47d0      	blx	sl
 8008afc:	3001      	adds	r0, #1
 8008afe:	d09d      	beq.n	8008a3c <_printf_i+0x160>
 8008b00:	3501      	adds	r5, #1
 8008b02:	68e3      	ldr	r3, [r4, #12]
 8008b04:	9903      	ldr	r1, [sp, #12]
 8008b06:	1a5b      	subs	r3, r3, r1
 8008b08:	42ab      	cmp	r3, r5
 8008b0a:	dcf2      	bgt.n	8008af2 <_printf_i+0x216>
 8008b0c:	e7eb      	b.n	8008ae6 <_printf_i+0x20a>
 8008b0e:	2500      	movs	r5, #0
 8008b10:	f104 0619 	add.w	r6, r4, #25
 8008b14:	e7f5      	b.n	8008b02 <_printf_i+0x226>
 8008b16:	bf00      	nop
 8008b18:	0800cb6a 	.word	0x0800cb6a
 8008b1c:	0800cb7b 	.word	0x0800cb7b

08008b20 <_scanf_float>:
 8008b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b24:	b087      	sub	sp, #28
 8008b26:	4617      	mov	r7, r2
 8008b28:	9303      	str	r3, [sp, #12]
 8008b2a:	688b      	ldr	r3, [r1, #8]
 8008b2c:	1e5a      	subs	r2, r3, #1
 8008b2e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008b32:	bf83      	ittte	hi
 8008b34:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008b38:	195b      	addhi	r3, r3, r5
 8008b3a:	9302      	strhi	r3, [sp, #8]
 8008b3c:	2300      	movls	r3, #0
 8008b3e:	bf86      	itte	hi
 8008b40:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008b44:	608b      	strhi	r3, [r1, #8]
 8008b46:	9302      	strls	r3, [sp, #8]
 8008b48:	680b      	ldr	r3, [r1, #0]
 8008b4a:	468b      	mov	fp, r1
 8008b4c:	2500      	movs	r5, #0
 8008b4e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008b52:	f84b 3b1c 	str.w	r3, [fp], #28
 8008b56:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008b5a:	4680      	mov	r8, r0
 8008b5c:	460c      	mov	r4, r1
 8008b5e:	465e      	mov	r6, fp
 8008b60:	46aa      	mov	sl, r5
 8008b62:	46a9      	mov	r9, r5
 8008b64:	9501      	str	r5, [sp, #4]
 8008b66:	68a2      	ldr	r2, [r4, #8]
 8008b68:	b152      	cbz	r2, 8008b80 <_scanf_float+0x60>
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	2b4e      	cmp	r3, #78	; 0x4e
 8008b70:	d864      	bhi.n	8008c3c <_scanf_float+0x11c>
 8008b72:	2b40      	cmp	r3, #64	; 0x40
 8008b74:	d83c      	bhi.n	8008bf0 <_scanf_float+0xd0>
 8008b76:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008b7a:	b2c8      	uxtb	r0, r1
 8008b7c:	280e      	cmp	r0, #14
 8008b7e:	d93a      	bls.n	8008bf6 <_scanf_float+0xd6>
 8008b80:	f1b9 0f00 	cmp.w	r9, #0
 8008b84:	d003      	beq.n	8008b8e <_scanf_float+0x6e>
 8008b86:	6823      	ldr	r3, [r4, #0]
 8008b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b8c:	6023      	str	r3, [r4, #0]
 8008b8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b92:	f1ba 0f01 	cmp.w	sl, #1
 8008b96:	f200 8113 	bhi.w	8008dc0 <_scanf_float+0x2a0>
 8008b9a:	455e      	cmp	r6, fp
 8008b9c:	f200 8105 	bhi.w	8008daa <_scanf_float+0x28a>
 8008ba0:	2501      	movs	r5, #1
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	b007      	add	sp, #28
 8008ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008baa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008bae:	2a0d      	cmp	r2, #13
 8008bb0:	d8e6      	bhi.n	8008b80 <_scanf_float+0x60>
 8008bb2:	a101      	add	r1, pc, #4	; (adr r1, 8008bb8 <_scanf_float+0x98>)
 8008bb4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008bb8:	08008cf7 	.word	0x08008cf7
 8008bbc:	08008b81 	.word	0x08008b81
 8008bc0:	08008b81 	.word	0x08008b81
 8008bc4:	08008b81 	.word	0x08008b81
 8008bc8:	08008d57 	.word	0x08008d57
 8008bcc:	08008d2f 	.word	0x08008d2f
 8008bd0:	08008b81 	.word	0x08008b81
 8008bd4:	08008b81 	.word	0x08008b81
 8008bd8:	08008d05 	.word	0x08008d05
 8008bdc:	08008b81 	.word	0x08008b81
 8008be0:	08008b81 	.word	0x08008b81
 8008be4:	08008b81 	.word	0x08008b81
 8008be8:	08008b81 	.word	0x08008b81
 8008bec:	08008cbd 	.word	0x08008cbd
 8008bf0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008bf4:	e7db      	b.n	8008bae <_scanf_float+0x8e>
 8008bf6:	290e      	cmp	r1, #14
 8008bf8:	d8c2      	bhi.n	8008b80 <_scanf_float+0x60>
 8008bfa:	a001      	add	r0, pc, #4	; (adr r0, 8008c00 <_scanf_float+0xe0>)
 8008bfc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008c00:	08008caf 	.word	0x08008caf
 8008c04:	08008b81 	.word	0x08008b81
 8008c08:	08008caf 	.word	0x08008caf
 8008c0c:	08008d43 	.word	0x08008d43
 8008c10:	08008b81 	.word	0x08008b81
 8008c14:	08008c5d 	.word	0x08008c5d
 8008c18:	08008c99 	.word	0x08008c99
 8008c1c:	08008c99 	.word	0x08008c99
 8008c20:	08008c99 	.word	0x08008c99
 8008c24:	08008c99 	.word	0x08008c99
 8008c28:	08008c99 	.word	0x08008c99
 8008c2c:	08008c99 	.word	0x08008c99
 8008c30:	08008c99 	.word	0x08008c99
 8008c34:	08008c99 	.word	0x08008c99
 8008c38:	08008c99 	.word	0x08008c99
 8008c3c:	2b6e      	cmp	r3, #110	; 0x6e
 8008c3e:	d809      	bhi.n	8008c54 <_scanf_float+0x134>
 8008c40:	2b60      	cmp	r3, #96	; 0x60
 8008c42:	d8b2      	bhi.n	8008baa <_scanf_float+0x8a>
 8008c44:	2b54      	cmp	r3, #84	; 0x54
 8008c46:	d077      	beq.n	8008d38 <_scanf_float+0x218>
 8008c48:	2b59      	cmp	r3, #89	; 0x59
 8008c4a:	d199      	bne.n	8008b80 <_scanf_float+0x60>
 8008c4c:	2d07      	cmp	r5, #7
 8008c4e:	d197      	bne.n	8008b80 <_scanf_float+0x60>
 8008c50:	2508      	movs	r5, #8
 8008c52:	e029      	b.n	8008ca8 <_scanf_float+0x188>
 8008c54:	2b74      	cmp	r3, #116	; 0x74
 8008c56:	d06f      	beq.n	8008d38 <_scanf_float+0x218>
 8008c58:	2b79      	cmp	r3, #121	; 0x79
 8008c5a:	e7f6      	b.n	8008c4a <_scanf_float+0x12a>
 8008c5c:	6821      	ldr	r1, [r4, #0]
 8008c5e:	05c8      	lsls	r0, r1, #23
 8008c60:	d51a      	bpl.n	8008c98 <_scanf_float+0x178>
 8008c62:	9b02      	ldr	r3, [sp, #8]
 8008c64:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008c68:	6021      	str	r1, [r4, #0]
 8008c6a:	f109 0901 	add.w	r9, r9, #1
 8008c6e:	b11b      	cbz	r3, 8008c78 <_scanf_float+0x158>
 8008c70:	3b01      	subs	r3, #1
 8008c72:	3201      	adds	r2, #1
 8008c74:	9302      	str	r3, [sp, #8]
 8008c76:	60a2      	str	r2, [r4, #8]
 8008c78:	68a3      	ldr	r3, [r4, #8]
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	60a3      	str	r3, [r4, #8]
 8008c7e:	6923      	ldr	r3, [r4, #16]
 8008c80:	3301      	adds	r3, #1
 8008c82:	6123      	str	r3, [r4, #16]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	3b01      	subs	r3, #1
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	607b      	str	r3, [r7, #4]
 8008c8c:	f340 8084 	ble.w	8008d98 <_scanf_float+0x278>
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	3301      	adds	r3, #1
 8008c94:	603b      	str	r3, [r7, #0]
 8008c96:	e766      	b.n	8008b66 <_scanf_float+0x46>
 8008c98:	eb1a 0f05 	cmn.w	sl, r5
 8008c9c:	f47f af70 	bne.w	8008b80 <_scanf_float+0x60>
 8008ca0:	6822      	ldr	r2, [r4, #0]
 8008ca2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008ca6:	6022      	str	r2, [r4, #0]
 8008ca8:	f806 3b01 	strb.w	r3, [r6], #1
 8008cac:	e7e4      	b.n	8008c78 <_scanf_float+0x158>
 8008cae:	6822      	ldr	r2, [r4, #0]
 8008cb0:	0610      	lsls	r0, r2, #24
 8008cb2:	f57f af65 	bpl.w	8008b80 <_scanf_float+0x60>
 8008cb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cba:	e7f4      	b.n	8008ca6 <_scanf_float+0x186>
 8008cbc:	f1ba 0f00 	cmp.w	sl, #0
 8008cc0:	d10e      	bne.n	8008ce0 <_scanf_float+0x1c0>
 8008cc2:	f1b9 0f00 	cmp.w	r9, #0
 8008cc6:	d10e      	bne.n	8008ce6 <_scanf_float+0x1c6>
 8008cc8:	6822      	ldr	r2, [r4, #0]
 8008cca:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008cce:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008cd2:	d108      	bne.n	8008ce6 <_scanf_float+0x1c6>
 8008cd4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008cd8:	6022      	str	r2, [r4, #0]
 8008cda:	f04f 0a01 	mov.w	sl, #1
 8008cde:	e7e3      	b.n	8008ca8 <_scanf_float+0x188>
 8008ce0:	f1ba 0f02 	cmp.w	sl, #2
 8008ce4:	d055      	beq.n	8008d92 <_scanf_float+0x272>
 8008ce6:	2d01      	cmp	r5, #1
 8008ce8:	d002      	beq.n	8008cf0 <_scanf_float+0x1d0>
 8008cea:	2d04      	cmp	r5, #4
 8008cec:	f47f af48 	bne.w	8008b80 <_scanf_float+0x60>
 8008cf0:	3501      	adds	r5, #1
 8008cf2:	b2ed      	uxtb	r5, r5
 8008cf4:	e7d8      	b.n	8008ca8 <_scanf_float+0x188>
 8008cf6:	f1ba 0f01 	cmp.w	sl, #1
 8008cfa:	f47f af41 	bne.w	8008b80 <_scanf_float+0x60>
 8008cfe:	f04f 0a02 	mov.w	sl, #2
 8008d02:	e7d1      	b.n	8008ca8 <_scanf_float+0x188>
 8008d04:	b97d      	cbnz	r5, 8008d26 <_scanf_float+0x206>
 8008d06:	f1b9 0f00 	cmp.w	r9, #0
 8008d0a:	f47f af3c 	bne.w	8008b86 <_scanf_float+0x66>
 8008d0e:	6822      	ldr	r2, [r4, #0]
 8008d10:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008d14:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008d18:	f47f af39 	bne.w	8008b8e <_scanf_float+0x6e>
 8008d1c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008d20:	6022      	str	r2, [r4, #0]
 8008d22:	2501      	movs	r5, #1
 8008d24:	e7c0      	b.n	8008ca8 <_scanf_float+0x188>
 8008d26:	2d03      	cmp	r5, #3
 8008d28:	d0e2      	beq.n	8008cf0 <_scanf_float+0x1d0>
 8008d2a:	2d05      	cmp	r5, #5
 8008d2c:	e7de      	b.n	8008cec <_scanf_float+0x1cc>
 8008d2e:	2d02      	cmp	r5, #2
 8008d30:	f47f af26 	bne.w	8008b80 <_scanf_float+0x60>
 8008d34:	2503      	movs	r5, #3
 8008d36:	e7b7      	b.n	8008ca8 <_scanf_float+0x188>
 8008d38:	2d06      	cmp	r5, #6
 8008d3a:	f47f af21 	bne.w	8008b80 <_scanf_float+0x60>
 8008d3e:	2507      	movs	r5, #7
 8008d40:	e7b2      	b.n	8008ca8 <_scanf_float+0x188>
 8008d42:	6822      	ldr	r2, [r4, #0]
 8008d44:	0591      	lsls	r1, r2, #22
 8008d46:	f57f af1b 	bpl.w	8008b80 <_scanf_float+0x60>
 8008d4a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008d4e:	6022      	str	r2, [r4, #0]
 8008d50:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d54:	e7a8      	b.n	8008ca8 <_scanf_float+0x188>
 8008d56:	6822      	ldr	r2, [r4, #0]
 8008d58:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008d5c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008d60:	d006      	beq.n	8008d70 <_scanf_float+0x250>
 8008d62:	0550      	lsls	r0, r2, #21
 8008d64:	f57f af0c 	bpl.w	8008b80 <_scanf_float+0x60>
 8008d68:	f1b9 0f00 	cmp.w	r9, #0
 8008d6c:	f43f af0f 	beq.w	8008b8e <_scanf_float+0x6e>
 8008d70:	0591      	lsls	r1, r2, #22
 8008d72:	bf58      	it	pl
 8008d74:	9901      	ldrpl	r1, [sp, #4]
 8008d76:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008d7a:	bf58      	it	pl
 8008d7c:	eba9 0101 	subpl.w	r1, r9, r1
 8008d80:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008d84:	bf58      	it	pl
 8008d86:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008d8a:	6022      	str	r2, [r4, #0]
 8008d8c:	f04f 0900 	mov.w	r9, #0
 8008d90:	e78a      	b.n	8008ca8 <_scanf_float+0x188>
 8008d92:	f04f 0a03 	mov.w	sl, #3
 8008d96:	e787      	b.n	8008ca8 <_scanf_float+0x188>
 8008d98:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008d9c:	4639      	mov	r1, r7
 8008d9e:	4640      	mov	r0, r8
 8008da0:	4798      	blx	r3
 8008da2:	2800      	cmp	r0, #0
 8008da4:	f43f aedf 	beq.w	8008b66 <_scanf_float+0x46>
 8008da8:	e6ea      	b.n	8008b80 <_scanf_float+0x60>
 8008daa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008dae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008db2:	463a      	mov	r2, r7
 8008db4:	4640      	mov	r0, r8
 8008db6:	4798      	blx	r3
 8008db8:	6923      	ldr	r3, [r4, #16]
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	6123      	str	r3, [r4, #16]
 8008dbe:	e6ec      	b.n	8008b9a <_scanf_float+0x7a>
 8008dc0:	1e6b      	subs	r3, r5, #1
 8008dc2:	2b06      	cmp	r3, #6
 8008dc4:	d825      	bhi.n	8008e12 <_scanf_float+0x2f2>
 8008dc6:	2d02      	cmp	r5, #2
 8008dc8:	d836      	bhi.n	8008e38 <_scanf_float+0x318>
 8008dca:	455e      	cmp	r6, fp
 8008dcc:	f67f aee8 	bls.w	8008ba0 <_scanf_float+0x80>
 8008dd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008dd4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008dd8:	463a      	mov	r2, r7
 8008dda:	4640      	mov	r0, r8
 8008ddc:	4798      	blx	r3
 8008dde:	6923      	ldr	r3, [r4, #16]
 8008de0:	3b01      	subs	r3, #1
 8008de2:	6123      	str	r3, [r4, #16]
 8008de4:	e7f1      	b.n	8008dca <_scanf_float+0x2aa>
 8008de6:	9802      	ldr	r0, [sp, #8]
 8008de8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008dec:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008df0:	9002      	str	r0, [sp, #8]
 8008df2:	463a      	mov	r2, r7
 8008df4:	4640      	mov	r0, r8
 8008df6:	4798      	blx	r3
 8008df8:	6923      	ldr	r3, [r4, #16]
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	6123      	str	r3, [r4, #16]
 8008dfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e02:	fa5f fa8a 	uxtb.w	sl, sl
 8008e06:	f1ba 0f02 	cmp.w	sl, #2
 8008e0a:	d1ec      	bne.n	8008de6 <_scanf_float+0x2c6>
 8008e0c:	3d03      	subs	r5, #3
 8008e0e:	b2ed      	uxtb	r5, r5
 8008e10:	1b76      	subs	r6, r6, r5
 8008e12:	6823      	ldr	r3, [r4, #0]
 8008e14:	05da      	lsls	r2, r3, #23
 8008e16:	d52f      	bpl.n	8008e78 <_scanf_float+0x358>
 8008e18:	055b      	lsls	r3, r3, #21
 8008e1a:	d510      	bpl.n	8008e3e <_scanf_float+0x31e>
 8008e1c:	455e      	cmp	r6, fp
 8008e1e:	f67f aebf 	bls.w	8008ba0 <_scanf_float+0x80>
 8008e22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e2a:	463a      	mov	r2, r7
 8008e2c:	4640      	mov	r0, r8
 8008e2e:	4798      	blx	r3
 8008e30:	6923      	ldr	r3, [r4, #16]
 8008e32:	3b01      	subs	r3, #1
 8008e34:	6123      	str	r3, [r4, #16]
 8008e36:	e7f1      	b.n	8008e1c <_scanf_float+0x2fc>
 8008e38:	46aa      	mov	sl, r5
 8008e3a:	9602      	str	r6, [sp, #8]
 8008e3c:	e7df      	b.n	8008dfe <_scanf_float+0x2de>
 8008e3e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008e42:	6923      	ldr	r3, [r4, #16]
 8008e44:	2965      	cmp	r1, #101	; 0x65
 8008e46:	f103 33ff 	add.w	r3, r3, #4294967295
 8008e4a:	f106 35ff 	add.w	r5, r6, #4294967295
 8008e4e:	6123      	str	r3, [r4, #16]
 8008e50:	d00c      	beq.n	8008e6c <_scanf_float+0x34c>
 8008e52:	2945      	cmp	r1, #69	; 0x45
 8008e54:	d00a      	beq.n	8008e6c <_scanf_float+0x34c>
 8008e56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e5a:	463a      	mov	r2, r7
 8008e5c:	4640      	mov	r0, r8
 8008e5e:	4798      	blx	r3
 8008e60:	6923      	ldr	r3, [r4, #16]
 8008e62:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008e66:	3b01      	subs	r3, #1
 8008e68:	1eb5      	subs	r5, r6, #2
 8008e6a:	6123      	str	r3, [r4, #16]
 8008e6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e70:	463a      	mov	r2, r7
 8008e72:	4640      	mov	r0, r8
 8008e74:	4798      	blx	r3
 8008e76:	462e      	mov	r6, r5
 8008e78:	6825      	ldr	r5, [r4, #0]
 8008e7a:	f015 0510 	ands.w	r5, r5, #16
 8008e7e:	d158      	bne.n	8008f32 <_scanf_float+0x412>
 8008e80:	7035      	strb	r5, [r6, #0]
 8008e82:	6823      	ldr	r3, [r4, #0]
 8008e84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e8c:	d11c      	bne.n	8008ec8 <_scanf_float+0x3a8>
 8008e8e:	9b01      	ldr	r3, [sp, #4]
 8008e90:	454b      	cmp	r3, r9
 8008e92:	eba3 0209 	sub.w	r2, r3, r9
 8008e96:	d124      	bne.n	8008ee2 <_scanf_float+0x3c2>
 8008e98:	2200      	movs	r2, #0
 8008e9a:	4659      	mov	r1, fp
 8008e9c:	4640      	mov	r0, r8
 8008e9e:	f002 fd0b 	bl	800b8b8 <_strtod_r>
 8008ea2:	9b03      	ldr	r3, [sp, #12]
 8008ea4:	6821      	ldr	r1, [r4, #0]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f011 0f02 	tst.w	r1, #2
 8008eac:	ec57 6b10 	vmov	r6, r7, d0
 8008eb0:	f103 0204 	add.w	r2, r3, #4
 8008eb4:	d020      	beq.n	8008ef8 <_scanf_float+0x3d8>
 8008eb6:	9903      	ldr	r1, [sp, #12]
 8008eb8:	600a      	str	r2, [r1, #0]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	e9c3 6700 	strd	r6, r7, [r3]
 8008ec0:	68e3      	ldr	r3, [r4, #12]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	60e3      	str	r3, [r4, #12]
 8008ec6:	e66c      	b.n	8008ba2 <_scanf_float+0x82>
 8008ec8:	9b04      	ldr	r3, [sp, #16]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d0e4      	beq.n	8008e98 <_scanf_float+0x378>
 8008ece:	9905      	ldr	r1, [sp, #20]
 8008ed0:	230a      	movs	r3, #10
 8008ed2:	462a      	mov	r2, r5
 8008ed4:	3101      	adds	r1, #1
 8008ed6:	4640      	mov	r0, r8
 8008ed8:	f002 fd76 	bl	800b9c8 <_strtol_r>
 8008edc:	9b04      	ldr	r3, [sp, #16]
 8008ede:	9e05      	ldr	r6, [sp, #20]
 8008ee0:	1ac2      	subs	r2, r0, r3
 8008ee2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008ee6:	429e      	cmp	r6, r3
 8008ee8:	bf28      	it	cs
 8008eea:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008eee:	4912      	ldr	r1, [pc, #72]	; (8008f38 <_scanf_float+0x418>)
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	f000 f931 	bl	8009158 <siprintf>
 8008ef6:	e7cf      	b.n	8008e98 <_scanf_float+0x378>
 8008ef8:	f011 0f04 	tst.w	r1, #4
 8008efc:	9903      	ldr	r1, [sp, #12]
 8008efe:	600a      	str	r2, [r1, #0]
 8008f00:	d1db      	bne.n	8008eba <_scanf_float+0x39a>
 8008f02:	f8d3 8000 	ldr.w	r8, [r3]
 8008f06:	ee10 2a10 	vmov	r2, s0
 8008f0a:	ee10 0a10 	vmov	r0, s0
 8008f0e:	463b      	mov	r3, r7
 8008f10:	4639      	mov	r1, r7
 8008f12:	f7f7 fe0b 	bl	8000b2c <__aeabi_dcmpun>
 8008f16:	b128      	cbz	r0, 8008f24 <_scanf_float+0x404>
 8008f18:	4808      	ldr	r0, [pc, #32]	; (8008f3c <_scanf_float+0x41c>)
 8008f1a:	f000 fa93 	bl	8009444 <nanf>
 8008f1e:	ed88 0a00 	vstr	s0, [r8]
 8008f22:	e7cd      	b.n	8008ec0 <_scanf_float+0x3a0>
 8008f24:	4630      	mov	r0, r6
 8008f26:	4639      	mov	r1, r7
 8008f28:	f7f7 fe5e 	bl	8000be8 <__aeabi_d2f>
 8008f2c:	f8c8 0000 	str.w	r0, [r8]
 8008f30:	e7c6      	b.n	8008ec0 <_scanf_float+0x3a0>
 8008f32:	2500      	movs	r5, #0
 8008f34:	e635      	b.n	8008ba2 <_scanf_float+0x82>
 8008f36:	bf00      	nop
 8008f38:	0800cb8c 	.word	0x0800cb8c
 8008f3c:	0800cf1d 	.word	0x0800cf1d

08008f40 <std>:
 8008f40:	2300      	movs	r3, #0
 8008f42:	b510      	push	{r4, lr}
 8008f44:	4604      	mov	r4, r0
 8008f46:	e9c0 3300 	strd	r3, r3, [r0]
 8008f4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f4e:	6083      	str	r3, [r0, #8]
 8008f50:	8181      	strh	r1, [r0, #12]
 8008f52:	6643      	str	r3, [r0, #100]	; 0x64
 8008f54:	81c2      	strh	r2, [r0, #14]
 8008f56:	6183      	str	r3, [r0, #24]
 8008f58:	4619      	mov	r1, r3
 8008f5a:	2208      	movs	r2, #8
 8008f5c:	305c      	adds	r0, #92	; 0x5c
 8008f5e:	f000 f9f3 	bl	8009348 <memset>
 8008f62:	4b05      	ldr	r3, [pc, #20]	; (8008f78 <std+0x38>)
 8008f64:	6263      	str	r3, [r4, #36]	; 0x24
 8008f66:	4b05      	ldr	r3, [pc, #20]	; (8008f7c <std+0x3c>)
 8008f68:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f6a:	4b05      	ldr	r3, [pc, #20]	; (8008f80 <std+0x40>)
 8008f6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f6e:	4b05      	ldr	r3, [pc, #20]	; (8008f84 <std+0x44>)
 8008f70:	6224      	str	r4, [r4, #32]
 8008f72:	6323      	str	r3, [r4, #48]	; 0x30
 8008f74:	bd10      	pop	{r4, pc}
 8008f76:	bf00      	nop
 8008f78:	08009199 	.word	0x08009199
 8008f7c:	080091bb 	.word	0x080091bb
 8008f80:	080091f3 	.word	0x080091f3
 8008f84:	08009217 	.word	0x08009217

08008f88 <stdio_exit_handler>:
 8008f88:	4a02      	ldr	r2, [pc, #8]	; (8008f94 <stdio_exit_handler+0xc>)
 8008f8a:	4903      	ldr	r1, [pc, #12]	; (8008f98 <stdio_exit_handler+0x10>)
 8008f8c:	4803      	ldr	r0, [pc, #12]	; (8008f9c <stdio_exit_handler+0x14>)
 8008f8e:	f000 b869 	b.w	8009064 <_fwalk_sglue>
 8008f92:	bf00      	nop
 8008f94:	2000000c 	.word	0x2000000c
 8008f98:	0800bd89 	.word	0x0800bd89
 8008f9c:	20000018 	.word	0x20000018

08008fa0 <cleanup_stdio>:
 8008fa0:	6841      	ldr	r1, [r0, #4]
 8008fa2:	4b0c      	ldr	r3, [pc, #48]	; (8008fd4 <cleanup_stdio+0x34>)
 8008fa4:	4299      	cmp	r1, r3
 8008fa6:	b510      	push	{r4, lr}
 8008fa8:	4604      	mov	r4, r0
 8008faa:	d001      	beq.n	8008fb0 <cleanup_stdio+0x10>
 8008fac:	f002 feec 	bl	800bd88 <_fflush_r>
 8008fb0:	68a1      	ldr	r1, [r4, #8]
 8008fb2:	4b09      	ldr	r3, [pc, #36]	; (8008fd8 <cleanup_stdio+0x38>)
 8008fb4:	4299      	cmp	r1, r3
 8008fb6:	d002      	beq.n	8008fbe <cleanup_stdio+0x1e>
 8008fb8:	4620      	mov	r0, r4
 8008fba:	f002 fee5 	bl	800bd88 <_fflush_r>
 8008fbe:	68e1      	ldr	r1, [r4, #12]
 8008fc0:	4b06      	ldr	r3, [pc, #24]	; (8008fdc <cleanup_stdio+0x3c>)
 8008fc2:	4299      	cmp	r1, r3
 8008fc4:	d004      	beq.n	8008fd0 <cleanup_stdio+0x30>
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fcc:	f002 bedc 	b.w	800bd88 <_fflush_r>
 8008fd0:	bd10      	pop	{r4, pc}
 8008fd2:	bf00      	nop
 8008fd4:	20000494 	.word	0x20000494
 8008fd8:	200004fc 	.word	0x200004fc
 8008fdc:	20000564 	.word	0x20000564

08008fe0 <global_stdio_init.part.0>:
 8008fe0:	b510      	push	{r4, lr}
 8008fe2:	4b0b      	ldr	r3, [pc, #44]	; (8009010 <global_stdio_init.part.0+0x30>)
 8008fe4:	4c0b      	ldr	r4, [pc, #44]	; (8009014 <global_stdio_init.part.0+0x34>)
 8008fe6:	4a0c      	ldr	r2, [pc, #48]	; (8009018 <global_stdio_init.part.0+0x38>)
 8008fe8:	601a      	str	r2, [r3, #0]
 8008fea:	4620      	mov	r0, r4
 8008fec:	2200      	movs	r2, #0
 8008fee:	2104      	movs	r1, #4
 8008ff0:	f7ff ffa6 	bl	8008f40 <std>
 8008ff4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	2109      	movs	r1, #9
 8008ffc:	f7ff ffa0 	bl	8008f40 <std>
 8009000:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009004:	2202      	movs	r2, #2
 8009006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800900a:	2112      	movs	r1, #18
 800900c:	f7ff bf98 	b.w	8008f40 <std>
 8009010:	200005cc 	.word	0x200005cc
 8009014:	20000494 	.word	0x20000494
 8009018:	08008f89 	.word	0x08008f89

0800901c <__sfp_lock_acquire>:
 800901c:	4801      	ldr	r0, [pc, #4]	; (8009024 <__sfp_lock_acquire+0x8>)
 800901e:	f000 ba0f 	b.w	8009440 <__retarget_lock_acquire_recursive>
 8009022:	bf00      	nop
 8009024:	200005d5 	.word	0x200005d5

08009028 <__sfp_lock_release>:
 8009028:	4801      	ldr	r0, [pc, #4]	; (8009030 <__sfp_lock_release+0x8>)
 800902a:	f000 ba0a 	b.w	8009442 <__retarget_lock_release_recursive>
 800902e:	bf00      	nop
 8009030:	200005d5 	.word	0x200005d5

08009034 <__sinit>:
 8009034:	b510      	push	{r4, lr}
 8009036:	4604      	mov	r4, r0
 8009038:	f7ff fff0 	bl	800901c <__sfp_lock_acquire>
 800903c:	6a23      	ldr	r3, [r4, #32]
 800903e:	b11b      	cbz	r3, 8009048 <__sinit+0x14>
 8009040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009044:	f7ff bff0 	b.w	8009028 <__sfp_lock_release>
 8009048:	4b04      	ldr	r3, [pc, #16]	; (800905c <__sinit+0x28>)
 800904a:	6223      	str	r3, [r4, #32]
 800904c:	4b04      	ldr	r3, [pc, #16]	; (8009060 <__sinit+0x2c>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1f5      	bne.n	8009040 <__sinit+0xc>
 8009054:	f7ff ffc4 	bl	8008fe0 <global_stdio_init.part.0>
 8009058:	e7f2      	b.n	8009040 <__sinit+0xc>
 800905a:	bf00      	nop
 800905c:	08008fa1 	.word	0x08008fa1
 8009060:	200005cc 	.word	0x200005cc

08009064 <_fwalk_sglue>:
 8009064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009068:	4607      	mov	r7, r0
 800906a:	4688      	mov	r8, r1
 800906c:	4614      	mov	r4, r2
 800906e:	2600      	movs	r6, #0
 8009070:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009074:	f1b9 0901 	subs.w	r9, r9, #1
 8009078:	d505      	bpl.n	8009086 <_fwalk_sglue+0x22>
 800907a:	6824      	ldr	r4, [r4, #0]
 800907c:	2c00      	cmp	r4, #0
 800907e:	d1f7      	bne.n	8009070 <_fwalk_sglue+0xc>
 8009080:	4630      	mov	r0, r6
 8009082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009086:	89ab      	ldrh	r3, [r5, #12]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d907      	bls.n	800909c <_fwalk_sglue+0x38>
 800908c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009090:	3301      	adds	r3, #1
 8009092:	d003      	beq.n	800909c <_fwalk_sglue+0x38>
 8009094:	4629      	mov	r1, r5
 8009096:	4638      	mov	r0, r7
 8009098:	47c0      	blx	r8
 800909a:	4306      	orrs	r6, r0
 800909c:	3568      	adds	r5, #104	; 0x68
 800909e:	e7e9      	b.n	8009074 <_fwalk_sglue+0x10>

080090a0 <_puts_r>:
 80090a0:	6a03      	ldr	r3, [r0, #32]
 80090a2:	b570      	push	{r4, r5, r6, lr}
 80090a4:	6884      	ldr	r4, [r0, #8]
 80090a6:	4605      	mov	r5, r0
 80090a8:	460e      	mov	r6, r1
 80090aa:	b90b      	cbnz	r3, 80090b0 <_puts_r+0x10>
 80090ac:	f7ff ffc2 	bl	8009034 <__sinit>
 80090b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090b2:	07db      	lsls	r3, r3, #31
 80090b4:	d405      	bmi.n	80090c2 <_puts_r+0x22>
 80090b6:	89a3      	ldrh	r3, [r4, #12]
 80090b8:	0598      	lsls	r0, r3, #22
 80090ba:	d402      	bmi.n	80090c2 <_puts_r+0x22>
 80090bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090be:	f000 f9bf 	bl	8009440 <__retarget_lock_acquire_recursive>
 80090c2:	89a3      	ldrh	r3, [r4, #12]
 80090c4:	0719      	lsls	r1, r3, #28
 80090c6:	d513      	bpl.n	80090f0 <_puts_r+0x50>
 80090c8:	6923      	ldr	r3, [r4, #16]
 80090ca:	b18b      	cbz	r3, 80090f0 <_puts_r+0x50>
 80090cc:	3e01      	subs	r6, #1
 80090ce:	68a3      	ldr	r3, [r4, #8]
 80090d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80090d4:	3b01      	subs	r3, #1
 80090d6:	60a3      	str	r3, [r4, #8]
 80090d8:	b9e9      	cbnz	r1, 8009116 <_puts_r+0x76>
 80090da:	2b00      	cmp	r3, #0
 80090dc:	da2e      	bge.n	800913c <_puts_r+0x9c>
 80090de:	4622      	mov	r2, r4
 80090e0:	210a      	movs	r1, #10
 80090e2:	4628      	mov	r0, r5
 80090e4:	f000 f89b 	bl	800921e <__swbuf_r>
 80090e8:	3001      	adds	r0, #1
 80090ea:	d007      	beq.n	80090fc <_puts_r+0x5c>
 80090ec:	250a      	movs	r5, #10
 80090ee:	e007      	b.n	8009100 <_puts_r+0x60>
 80090f0:	4621      	mov	r1, r4
 80090f2:	4628      	mov	r0, r5
 80090f4:	f000 f8d0 	bl	8009298 <__swsetup_r>
 80090f8:	2800      	cmp	r0, #0
 80090fa:	d0e7      	beq.n	80090cc <_puts_r+0x2c>
 80090fc:	f04f 35ff 	mov.w	r5, #4294967295
 8009100:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009102:	07da      	lsls	r2, r3, #31
 8009104:	d405      	bmi.n	8009112 <_puts_r+0x72>
 8009106:	89a3      	ldrh	r3, [r4, #12]
 8009108:	059b      	lsls	r3, r3, #22
 800910a:	d402      	bmi.n	8009112 <_puts_r+0x72>
 800910c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800910e:	f000 f998 	bl	8009442 <__retarget_lock_release_recursive>
 8009112:	4628      	mov	r0, r5
 8009114:	bd70      	pop	{r4, r5, r6, pc}
 8009116:	2b00      	cmp	r3, #0
 8009118:	da04      	bge.n	8009124 <_puts_r+0x84>
 800911a:	69a2      	ldr	r2, [r4, #24]
 800911c:	429a      	cmp	r2, r3
 800911e:	dc06      	bgt.n	800912e <_puts_r+0x8e>
 8009120:	290a      	cmp	r1, #10
 8009122:	d004      	beq.n	800912e <_puts_r+0x8e>
 8009124:	6823      	ldr	r3, [r4, #0]
 8009126:	1c5a      	adds	r2, r3, #1
 8009128:	6022      	str	r2, [r4, #0]
 800912a:	7019      	strb	r1, [r3, #0]
 800912c:	e7cf      	b.n	80090ce <_puts_r+0x2e>
 800912e:	4622      	mov	r2, r4
 8009130:	4628      	mov	r0, r5
 8009132:	f000 f874 	bl	800921e <__swbuf_r>
 8009136:	3001      	adds	r0, #1
 8009138:	d1c9      	bne.n	80090ce <_puts_r+0x2e>
 800913a:	e7df      	b.n	80090fc <_puts_r+0x5c>
 800913c:	6823      	ldr	r3, [r4, #0]
 800913e:	250a      	movs	r5, #10
 8009140:	1c5a      	adds	r2, r3, #1
 8009142:	6022      	str	r2, [r4, #0]
 8009144:	701d      	strb	r5, [r3, #0]
 8009146:	e7db      	b.n	8009100 <_puts_r+0x60>

08009148 <puts>:
 8009148:	4b02      	ldr	r3, [pc, #8]	; (8009154 <puts+0xc>)
 800914a:	4601      	mov	r1, r0
 800914c:	6818      	ldr	r0, [r3, #0]
 800914e:	f7ff bfa7 	b.w	80090a0 <_puts_r>
 8009152:	bf00      	nop
 8009154:	20000064 	.word	0x20000064

08009158 <siprintf>:
 8009158:	b40e      	push	{r1, r2, r3}
 800915a:	b500      	push	{lr}
 800915c:	b09c      	sub	sp, #112	; 0x70
 800915e:	ab1d      	add	r3, sp, #116	; 0x74
 8009160:	9002      	str	r0, [sp, #8]
 8009162:	9006      	str	r0, [sp, #24]
 8009164:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009168:	4809      	ldr	r0, [pc, #36]	; (8009190 <siprintf+0x38>)
 800916a:	9107      	str	r1, [sp, #28]
 800916c:	9104      	str	r1, [sp, #16]
 800916e:	4909      	ldr	r1, [pc, #36]	; (8009194 <siprintf+0x3c>)
 8009170:	f853 2b04 	ldr.w	r2, [r3], #4
 8009174:	9105      	str	r1, [sp, #20]
 8009176:	6800      	ldr	r0, [r0, #0]
 8009178:	9301      	str	r3, [sp, #4]
 800917a:	a902      	add	r1, sp, #8
 800917c:	f002 fc80 	bl	800ba80 <_svfiprintf_r>
 8009180:	9b02      	ldr	r3, [sp, #8]
 8009182:	2200      	movs	r2, #0
 8009184:	701a      	strb	r2, [r3, #0]
 8009186:	b01c      	add	sp, #112	; 0x70
 8009188:	f85d eb04 	ldr.w	lr, [sp], #4
 800918c:	b003      	add	sp, #12
 800918e:	4770      	bx	lr
 8009190:	20000064 	.word	0x20000064
 8009194:	ffff0208 	.word	0xffff0208

08009198 <__sread>:
 8009198:	b510      	push	{r4, lr}
 800919a:	460c      	mov	r4, r1
 800919c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091a0:	f000 f900 	bl	80093a4 <_read_r>
 80091a4:	2800      	cmp	r0, #0
 80091a6:	bfab      	itete	ge
 80091a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80091aa:	89a3      	ldrhlt	r3, [r4, #12]
 80091ac:	181b      	addge	r3, r3, r0
 80091ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80091b2:	bfac      	ite	ge
 80091b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80091b6:	81a3      	strhlt	r3, [r4, #12]
 80091b8:	bd10      	pop	{r4, pc}

080091ba <__swrite>:
 80091ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091be:	461f      	mov	r7, r3
 80091c0:	898b      	ldrh	r3, [r1, #12]
 80091c2:	05db      	lsls	r3, r3, #23
 80091c4:	4605      	mov	r5, r0
 80091c6:	460c      	mov	r4, r1
 80091c8:	4616      	mov	r6, r2
 80091ca:	d505      	bpl.n	80091d8 <__swrite+0x1e>
 80091cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091d0:	2302      	movs	r3, #2
 80091d2:	2200      	movs	r2, #0
 80091d4:	f000 f8d4 	bl	8009380 <_lseek_r>
 80091d8:	89a3      	ldrh	r3, [r4, #12]
 80091da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091e2:	81a3      	strh	r3, [r4, #12]
 80091e4:	4632      	mov	r2, r6
 80091e6:	463b      	mov	r3, r7
 80091e8:	4628      	mov	r0, r5
 80091ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091ee:	f000 b8eb 	b.w	80093c8 <_write_r>

080091f2 <__sseek>:
 80091f2:	b510      	push	{r4, lr}
 80091f4:	460c      	mov	r4, r1
 80091f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091fa:	f000 f8c1 	bl	8009380 <_lseek_r>
 80091fe:	1c43      	adds	r3, r0, #1
 8009200:	89a3      	ldrh	r3, [r4, #12]
 8009202:	bf15      	itete	ne
 8009204:	6560      	strne	r0, [r4, #84]	; 0x54
 8009206:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800920a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800920e:	81a3      	strheq	r3, [r4, #12]
 8009210:	bf18      	it	ne
 8009212:	81a3      	strhne	r3, [r4, #12]
 8009214:	bd10      	pop	{r4, pc}

08009216 <__sclose>:
 8009216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800921a:	f000 b8a1 	b.w	8009360 <_close_r>

0800921e <__swbuf_r>:
 800921e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009220:	460e      	mov	r6, r1
 8009222:	4614      	mov	r4, r2
 8009224:	4605      	mov	r5, r0
 8009226:	b118      	cbz	r0, 8009230 <__swbuf_r+0x12>
 8009228:	6a03      	ldr	r3, [r0, #32]
 800922a:	b90b      	cbnz	r3, 8009230 <__swbuf_r+0x12>
 800922c:	f7ff ff02 	bl	8009034 <__sinit>
 8009230:	69a3      	ldr	r3, [r4, #24]
 8009232:	60a3      	str	r3, [r4, #8]
 8009234:	89a3      	ldrh	r3, [r4, #12]
 8009236:	071a      	lsls	r2, r3, #28
 8009238:	d525      	bpl.n	8009286 <__swbuf_r+0x68>
 800923a:	6923      	ldr	r3, [r4, #16]
 800923c:	b31b      	cbz	r3, 8009286 <__swbuf_r+0x68>
 800923e:	6823      	ldr	r3, [r4, #0]
 8009240:	6922      	ldr	r2, [r4, #16]
 8009242:	1a98      	subs	r0, r3, r2
 8009244:	6963      	ldr	r3, [r4, #20]
 8009246:	b2f6      	uxtb	r6, r6
 8009248:	4283      	cmp	r3, r0
 800924a:	4637      	mov	r7, r6
 800924c:	dc04      	bgt.n	8009258 <__swbuf_r+0x3a>
 800924e:	4621      	mov	r1, r4
 8009250:	4628      	mov	r0, r5
 8009252:	f002 fd99 	bl	800bd88 <_fflush_r>
 8009256:	b9e0      	cbnz	r0, 8009292 <__swbuf_r+0x74>
 8009258:	68a3      	ldr	r3, [r4, #8]
 800925a:	3b01      	subs	r3, #1
 800925c:	60a3      	str	r3, [r4, #8]
 800925e:	6823      	ldr	r3, [r4, #0]
 8009260:	1c5a      	adds	r2, r3, #1
 8009262:	6022      	str	r2, [r4, #0]
 8009264:	701e      	strb	r6, [r3, #0]
 8009266:	6962      	ldr	r2, [r4, #20]
 8009268:	1c43      	adds	r3, r0, #1
 800926a:	429a      	cmp	r2, r3
 800926c:	d004      	beq.n	8009278 <__swbuf_r+0x5a>
 800926e:	89a3      	ldrh	r3, [r4, #12]
 8009270:	07db      	lsls	r3, r3, #31
 8009272:	d506      	bpl.n	8009282 <__swbuf_r+0x64>
 8009274:	2e0a      	cmp	r6, #10
 8009276:	d104      	bne.n	8009282 <__swbuf_r+0x64>
 8009278:	4621      	mov	r1, r4
 800927a:	4628      	mov	r0, r5
 800927c:	f002 fd84 	bl	800bd88 <_fflush_r>
 8009280:	b938      	cbnz	r0, 8009292 <__swbuf_r+0x74>
 8009282:	4638      	mov	r0, r7
 8009284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009286:	4621      	mov	r1, r4
 8009288:	4628      	mov	r0, r5
 800928a:	f000 f805 	bl	8009298 <__swsetup_r>
 800928e:	2800      	cmp	r0, #0
 8009290:	d0d5      	beq.n	800923e <__swbuf_r+0x20>
 8009292:	f04f 37ff 	mov.w	r7, #4294967295
 8009296:	e7f4      	b.n	8009282 <__swbuf_r+0x64>

08009298 <__swsetup_r>:
 8009298:	b538      	push	{r3, r4, r5, lr}
 800929a:	4b2a      	ldr	r3, [pc, #168]	; (8009344 <__swsetup_r+0xac>)
 800929c:	4605      	mov	r5, r0
 800929e:	6818      	ldr	r0, [r3, #0]
 80092a0:	460c      	mov	r4, r1
 80092a2:	b118      	cbz	r0, 80092ac <__swsetup_r+0x14>
 80092a4:	6a03      	ldr	r3, [r0, #32]
 80092a6:	b90b      	cbnz	r3, 80092ac <__swsetup_r+0x14>
 80092a8:	f7ff fec4 	bl	8009034 <__sinit>
 80092ac:	89a3      	ldrh	r3, [r4, #12]
 80092ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092b2:	0718      	lsls	r0, r3, #28
 80092b4:	d422      	bmi.n	80092fc <__swsetup_r+0x64>
 80092b6:	06d9      	lsls	r1, r3, #27
 80092b8:	d407      	bmi.n	80092ca <__swsetup_r+0x32>
 80092ba:	2309      	movs	r3, #9
 80092bc:	602b      	str	r3, [r5, #0]
 80092be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80092c2:	81a3      	strh	r3, [r4, #12]
 80092c4:	f04f 30ff 	mov.w	r0, #4294967295
 80092c8:	e034      	b.n	8009334 <__swsetup_r+0x9c>
 80092ca:	0758      	lsls	r0, r3, #29
 80092cc:	d512      	bpl.n	80092f4 <__swsetup_r+0x5c>
 80092ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092d0:	b141      	cbz	r1, 80092e4 <__swsetup_r+0x4c>
 80092d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092d6:	4299      	cmp	r1, r3
 80092d8:	d002      	beq.n	80092e0 <__swsetup_r+0x48>
 80092da:	4628      	mov	r0, r5
 80092dc:	f000 ff32 	bl	800a144 <_free_r>
 80092e0:	2300      	movs	r3, #0
 80092e2:	6363      	str	r3, [r4, #52]	; 0x34
 80092e4:	89a3      	ldrh	r3, [r4, #12]
 80092e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80092ea:	81a3      	strh	r3, [r4, #12]
 80092ec:	2300      	movs	r3, #0
 80092ee:	6063      	str	r3, [r4, #4]
 80092f0:	6923      	ldr	r3, [r4, #16]
 80092f2:	6023      	str	r3, [r4, #0]
 80092f4:	89a3      	ldrh	r3, [r4, #12]
 80092f6:	f043 0308 	orr.w	r3, r3, #8
 80092fa:	81a3      	strh	r3, [r4, #12]
 80092fc:	6923      	ldr	r3, [r4, #16]
 80092fe:	b94b      	cbnz	r3, 8009314 <__swsetup_r+0x7c>
 8009300:	89a3      	ldrh	r3, [r4, #12]
 8009302:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800930a:	d003      	beq.n	8009314 <__swsetup_r+0x7c>
 800930c:	4621      	mov	r1, r4
 800930e:	4628      	mov	r0, r5
 8009310:	f002 fd88 	bl	800be24 <__smakebuf_r>
 8009314:	89a0      	ldrh	r0, [r4, #12]
 8009316:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800931a:	f010 0301 	ands.w	r3, r0, #1
 800931e:	d00a      	beq.n	8009336 <__swsetup_r+0x9e>
 8009320:	2300      	movs	r3, #0
 8009322:	60a3      	str	r3, [r4, #8]
 8009324:	6963      	ldr	r3, [r4, #20]
 8009326:	425b      	negs	r3, r3
 8009328:	61a3      	str	r3, [r4, #24]
 800932a:	6923      	ldr	r3, [r4, #16]
 800932c:	b943      	cbnz	r3, 8009340 <__swsetup_r+0xa8>
 800932e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009332:	d1c4      	bne.n	80092be <__swsetup_r+0x26>
 8009334:	bd38      	pop	{r3, r4, r5, pc}
 8009336:	0781      	lsls	r1, r0, #30
 8009338:	bf58      	it	pl
 800933a:	6963      	ldrpl	r3, [r4, #20]
 800933c:	60a3      	str	r3, [r4, #8]
 800933e:	e7f4      	b.n	800932a <__swsetup_r+0x92>
 8009340:	2000      	movs	r0, #0
 8009342:	e7f7      	b.n	8009334 <__swsetup_r+0x9c>
 8009344:	20000064 	.word	0x20000064

08009348 <memset>:
 8009348:	4402      	add	r2, r0
 800934a:	4603      	mov	r3, r0
 800934c:	4293      	cmp	r3, r2
 800934e:	d100      	bne.n	8009352 <memset+0xa>
 8009350:	4770      	bx	lr
 8009352:	f803 1b01 	strb.w	r1, [r3], #1
 8009356:	e7f9      	b.n	800934c <memset+0x4>

08009358 <_localeconv_r>:
 8009358:	4800      	ldr	r0, [pc, #0]	; (800935c <_localeconv_r+0x4>)
 800935a:	4770      	bx	lr
 800935c:	20000158 	.word	0x20000158

08009360 <_close_r>:
 8009360:	b538      	push	{r3, r4, r5, lr}
 8009362:	4d06      	ldr	r5, [pc, #24]	; (800937c <_close_r+0x1c>)
 8009364:	2300      	movs	r3, #0
 8009366:	4604      	mov	r4, r0
 8009368:	4608      	mov	r0, r1
 800936a:	602b      	str	r3, [r5, #0]
 800936c:	f7f8 ff6f 	bl	800224e <_close>
 8009370:	1c43      	adds	r3, r0, #1
 8009372:	d102      	bne.n	800937a <_close_r+0x1a>
 8009374:	682b      	ldr	r3, [r5, #0]
 8009376:	b103      	cbz	r3, 800937a <_close_r+0x1a>
 8009378:	6023      	str	r3, [r4, #0]
 800937a:	bd38      	pop	{r3, r4, r5, pc}
 800937c:	200005d0 	.word	0x200005d0

08009380 <_lseek_r>:
 8009380:	b538      	push	{r3, r4, r5, lr}
 8009382:	4d07      	ldr	r5, [pc, #28]	; (80093a0 <_lseek_r+0x20>)
 8009384:	4604      	mov	r4, r0
 8009386:	4608      	mov	r0, r1
 8009388:	4611      	mov	r1, r2
 800938a:	2200      	movs	r2, #0
 800938c:	602a      	str	r2, [r5, #0]
 800938e:	461a      	mov	r2, r3
 8009390:	f7f8 ff84 	bl	800229c <_lseek>
 8009394:	1c43      	adds	r3, r0, #1
 8009396:	d102      	bne.n	800939e <_lseek_r+0x1e>
 8009398:	682b      	ldr	r3, [r5, #0]
 800939a:	b103      	cbz	r3, 800939e <_lseek_r+0x1e>
 800939c:	6023      	str	r3, [r4, #0]
 800939e:	bd38      	pop	{r3, r4, r5, pc}
 80093a0:	200005d0 	.word	0x200005d0

080093a4 <_read_r>:
 80093a4:	b538      	push	{r3, r4, r5, lr}
 80093a6:	4d07      	ldr	r5, [pc, #28]	; (80093c4 <_read_r+0x20>)
 80093a8:	4604      	mov	r4, r0
 80093aa:	4608      	mov	r0, r1
 80093ac:	4611      	mov	r1, r2
 80093ae:	2200      	movs	r2, #0
 80093b0:	602a      	str	r2, [r5, #0]
 80093b2:	461a      	mov	r2, r3
 80093b4:	f7f8 ff12 	bl	80021dc <_read>
 80093b8:	1c43      	adds	r3, r0, #1
 80093ba:	d102      	bne.n	80093c2 <_read_r+0x1e>
 80093bc:	682b      	ldr	r3, [r5, #0]
 80093be:	b103      	cbz	r3, 80093c2 <_read_r+0x1e>
 80093c0:	6023      	str	r3, [r4, #0]
 80093c2:	bd38      	pop	{r3, r4, r5, pc}
 80093c4:	200005d0 	.word	0x200005d0

080093c8 <_write_r>:
 80093c8:	b538      	push	{r3, r4, r5, lr}
 80093ca:	4d07      	ldr	r5, [pc, #28]	; (80093e8 <_write_r+0x20>)
 80093cc:	4604      	mov	r4, r0
 80093ce:	4608      	mov	r0, r1
 80093d0:	4611      	mov	r1, r2
 80093d2:	2200      	movs	r2, #0
 80093d4:	602a      	str	r2, [r5, #0]
 80093d6:	461a      	mov	r2, r3
 80093d8:	f7f8 ff1d 	bl	8002216 <_write>
 80093dc:	1c43      	adds	r3, r0, #1
 80093de:	d102      	bne.n	80093e6 <_write_r+0x1e>
 80093e0:	682b      	ldr	r3, [r5, #0]
 80093e2:	b103      	cbz	r3, 80093e6 <_write_r+0x1e>
 80093e4:	6023      	str	r3, [r4, #0]
 80093e6:	bd38      	pop	{r3, r4, r5, pc}
 80093e8:	200005d0 	.word	0x200005d0

080093ec <__errno>:
 80093ec:	4b01      	ldr	r3, [pc, #4]	; (80093f4 <__errno+0x8>)
 80093ee:	6818      	ldr	r0, [r3, #0]
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	20000064 	.word	0x20000064

080093f8 <__libc_init_array>:
 80093f8:	b570      	push	{r4, r5, r6, lr}
 80093fa:	4d0d      	ldr	r5, [pc, #52]	; (8009430 <__libc_init_array+0x38>)
 80093fc:	4c0d      	ldr	r4, [pc, #52]	; (8009434 <__libc_init_array+0x3c>)
 80093fe:	1b64      	subs	r4, r4, r5
 8009400:	10a4      	asrs	r4, r4, #2
 8009402:	2600      	movs	r6, #0
 8009404:	42a6      	cmp	r6, r4
 8009406:	d109      	bne.n	800941c <__libc_init_array+0x24>
 8009408:	4d0b      	ldr	r5, [pc, #44]	; (8009438 <__libc_init_array+0x40>)
 800940a:	4c0c      	ldr	r4, [pc, #48]	; (800943c <__libc_init_array+0x44>)
 800940c:	f003 fb3e 	bl	800ca8c <_init>
 8009410:	1b64      	subs	r4, r4, r5
 8009412:	10a4      	asrs	r4, r4, #2
 8009414:	2600      	movs	r6, #0
 8009416:	42a6      	cmp	r6, r4
 8009418:	d105      	bne.n	8009426 <__libc_init_array+0x2e>
 800941a:	bd70      	pop	{r4, r5, r6, pc}
 800941c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009420:	4798      	blx	r3
 8009422:	3601      	adds	r6, #1
 8009424:	e7ee      	b.n	8009404 <__libc_init_array+0xc>
 8009426:	f855 3b04 	ldr.w	r3, [r5], #4
 800942a:	4798      	blx	r3
 800942c:	3601      	adds	r6, #1
 800942e:	e7f2      	b.n	8009416 <__libc_init_array+0x1e>
 8009430:	0800cf88 	.word	0x0800cf88
 8009434:	0800cf88 	.word	0x0800cf88
 8009438:	0800cf88 	.word	0x0800cf88
 800943c:	0800cf8c 	.word	0x0800cf8c

08009440 <__retarget_lock_acquire_recursive>:
 8009440:	4770      	bx	lr

08009442 <__retarget_lock_release_recursive>:
 8009442:	4770      	bx	lr

08009444 <nanf>:
 8009444:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800944c <nanf+0x8>
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	7fc00000 	.word	0x7fc00000

08009450 <quorem>:
 8009450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009454:	6903      	ldr	r3, [r0, #16]
 8009456:	690c      	ldr	r4, [r1, #16]
 8009458:	42a3      	cmp	r3, r4
 800945a:	4607      	mov	r7, r0
 800945c:	db7e      	blt.n	800955c <quorem+0x10c>
 800945e:	3c01      	subs	r4, #1
 8009460:	f101 0814 	add.w	r8, r1, #20
 8009464:	f100 0514 	add.w	r5, r0, #20
 8009468:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800946c:	9301      	str	r3, [sp, #4]
 800946e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009472:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009476:	3301      	adds	r3, #1
 8009478:	429a      	cmp	r2, r3
 800947a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800947e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009482:	fbb2 f6f3 	udiv	r6, r2, r3
 8009486:	d331      	bcc.n	80094ec <quorem+0x9c>
 8009488:	f04f 0e00 	mov.w	lr, #0
 800948c:	4640      	mov	r0, r8
 800948e:	46ac      	mov	ip, r5
 8009490:	46f2      	mov	sl, lr
 8009492:	f850 2b04 	ldr.w	r2, [r0], #4
 8009496:	b293      	uxth	r3, r2
 8009498:	fb06 e303 	mla	r3, r6, r3, lr
 800949c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80094a0:	0c1a      	lsrs	r2, r3, #16
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	ebaa 0303 	sub.w	r3, sl, r3
 80094a8:	f8dc a000 	ldr.w	sl, [ip]
 80094ac:	fa13 f38a 	uxtah	r3, r3, sl
 80094b0:	fb06 220e 	mla	r2, r6, lr, r2
 80094b4:	9300      	str	r3, [sp, #0]
 80094b6:	9b00      	ldr	r3, [sp, #0]
 80094b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80094bc:	b292      	uxth	r2, r2
 80094be:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80094c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80094c6:	f8bd 3000 	ldrh.w	r3, [sp]
 80094ca:	4581      	cmp	r9, r0
 80094cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094d0:	f84c 3b04 	str.w	r3, [ip], #4
 80094d4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80094d8:	d2db      	bcs.n	8009492 <quorem+0x42>
 80094da:	f855 300b 	ldr.w	r3, [r5, fp]
 80094de:	b92b      	cbnz	r3, 80094ec <quorem+0x9c>
 80094e0:	9b01      	ldr	r3, [sp, #4]
 80094e2:	3b04      	subs	r3, #4
 80094e4:	429d      	cmp	r5, r3
 80094e6:	461a      	mov	r2, r3
 80094e8:	d32c      	bcc.n	8009544 <quorem+0xf4>
 80094ea:	613c      	str	r4, [r7, #16]
 80094ec:	4638      	mov	r0, r7
 80094ee:	f001 f9ef 	bl	800a8d0 <__mcmp>
 80094f2:	2800      	cmp	r0, #0
 80094f4:	db22      	blt.n	800953c <quorem+0xec>
 80094f6:	3601      	adds	r6, #1
 80094f8:	4629      	mov	r1, r5
 80094fa:	2000      	movs	r0, #0
 80094fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8009500:	f8d1 c000 	ldr.w	ip, [r1]
 8009504:	b293      	uxth	r3, r2
 8009506:	1ac3      	subs	r3, r0, r3
 8009508:	0c12      	lsrs	r2, r2, #16
 800950a:	fa13 f38c 	uxtah	r3, r3, ip
 800950e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009512:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009516:	b29b      	uxth	r3, r3
 8009518:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800951c:	45c1      	cmp	r9, r8
 800951e:	f841 3b04 	str.w	r3, [r1], #4
 8009522:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009526:	d2e9      	bcs.n	80094fc <quorem+0xac>
 8009528:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800952c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009530:	b922      	cbnz	r2, 800953c <quorem+0xec>
 8009532:	3b04      	subs	r3, #4
 8009534:	429d      	cmp	r5, r3
 8009536:	461a      	mov	r2, r3
 8009538:	d30a      	bcc.n	8009550 <quorem+0x100>
 800953a:	613c      	str	r4, [r7, #16]
 800953c:	4630      	mov	r0, r6
 800953e:	b003      	add	sp, #12
 8009540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009544:	6812      	ldr	r2, [r2, #0]
 8009546:	3b04      	subs	r3, #4
 8009548:	2a00      	cmp	r2, #0
 800954a:	d1ce      	bne.n	80094ea <quorem+0x9a>
 800954c:	3c01      	subs	r4, #1
 800954e:	e7c9      	b.n	80094e4 <quorem+0x94>
 8009550:	6812      	ldr	r2, [r2, #0]
 8009552:	3b04      	subs	r3, #4
 8009554:	2a00      	cmp	r2, #0
 8009556:	d1f0      	bne.n	800953a <quorem+0xea>
 8009558:	3c01      	subs	r4, #1
 800955a:	e7eb      	b.n	8009534 <quorem+0xe4>
 800955c:	2000      	movs	r0, #0
 800955e:	e7ee      	b.n	800953e <quorem+0xee>

08009560 <_dtoa_r>:
 8009560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009564:	ed2d 8b04 	vpush	{d8-d9}
 8009568:	69c5      	ldr	r5, [r0, #28]
 800956a:	b093      	sub	sp, #76	; 0x4c
 800956c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009570:	ec57 6b10 	vmov	r6, r7, d0
 8009574:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009578:	9107      	str	r1, [sp, #28]
 800957a:	4604      	mov	r4, r0
 800957c:	920a      	str	r2, [sp, #40]	; 0x28
 800957e:	930d      	str	r3, [sp, #52]	; 0x34
 8009580:	b975      	cbnz	r5, 80095a0 <_dtoa_r+0x40>
 8009582:	2010      	movs	r0, #16
 8009584:	f000 fe2a 	bl	800a1dc <malloc>
 8009588:	4602      	mov	r2, r0
 800958a:	61e0      	str	r0, [r4, #28]
 800958c:	b920      	cbnz	r0, 8009598 <_dtoa_r+0x38>
 800958e:	4bae      	ldr	r3, [pc, #696]	; (8009848 <_dtoa_r+0x2e8>)
 8009590:	21ef      	movs	r1, #239	; 0xef
 8009592:	48ae      	ldr	r0, [pc, #696]	; (800984c <_dtoa_r+0x2ec>)
 8009594:	f002 fcf8 	bl	800bf88 <__assert_func>
 8009598:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800959c:	6005      	str	r5, [r0, #0]
 800959e:	60c5      	str	r5, [r0, #12]
 80095a0:	69e3      	ldr	r3, [r4, #28]
 80095a2:	6819      	ldr	r1, [r3, #0]
 80095a4:	b151      	cbz	r1, 80095bc <_dtoa_r+0x5c>
 80095a6:	685a      	ldr	r2, [r3, #4]
 80095a8:	604a      	str	r2, [r1, #4]
 80095aa:	2301      	movs	r3, #1
 80095ac:	4093      	lsls	r3, r2
 80095ae:	608b      	str	r3, [r1, #8]
 80095b0:	4620      	mov	r0, r4
 80095b2:	f000 ff07 	bl	800a3c4 <_Bfree>
 80095b6:	69e3      	ldr	r3, [r4, #28]
 80095b8:	2200      	movs	r2, #0
 80095ba:	601a      	str	r2, [r3, #0]
 80095bc:	1e3b      	subs	r3, r7, #0
 80095be:	bfbb      	ittet	lt
 80095c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80095c4:	9303      	strlt	r3, [sp, #12]
 80095c6:	2300      	movge	r3, #0
 80095c8:	2201      	movlt	r2, #1
 80095ca:	bfac      	ite	ge
 80095cc:	f8c8 3000 	strge.w	r3, [r8]
 80095d0:	f8c8 2000 	strlt.w	r2, [r8]
 80095d4:	4b9e      	ldr	r3, [pc, #632]	; (8009850 <_dtoa_r+0x2f0>)
 80095d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80095da:	ea33 0308 	bics.w	r3, r3, r8
 80095de:	d11b      	bne.n	8009618 <_dtoa_r+0xb8>
 80095e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80095e6:	6013      	str	r3, [r2, #0]
 80095e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80095ec:	4333      	orrs	r3, r6
 80095ee:	f000 8593 	beq.w	800a118 <_dtoa_r+0xbb8>
 80095f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095f4:	b963      	cbnz	r3, 8009610 <_dtoa_r+0xb0>
 80095f6:	4b97      	ldr	r3, [pc, #604]	; (8009854 <_dtoa_r+0x2f4>)
 80095f8:	e027      	b.n	800964a <_dtoa_r+0xea>
 80095fa:	4b97      	ldr	r3, [pc, #604]	; (8009858 <_dtoa_r+0x2f8>)
 80095fc:	9300      	str	r3, [sp, #0]
 80095fe:	3308      	adds	r3, #8
 8009600:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009602:	6013      	str	r3, [r2, #0]
 8009604:	9800      	ldr	r0, [sp, #0]
 8009606:	b013      	add	sp, #76	; 0x4c
 8009608:	ecbd 8b04 	vpop	{d8-d9}
 800960c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009610:	4b90      	ldr	r3, [pc, #576]	; (8009854 <_dtoa_r+0x2f4>)
 8009612:	9300      	str	r3, [sp, #0]
 8009614:	3303      	adds	r3, #3
 8009616:	e7f3      	b.n	8009600 <_dtoa_r+0xa0>
 8009618:	ed9d 7b02 	vldr	d7, [sp, #8]
 800961c:	2200      	movs	r2, #0
 800961e:	ec51 0b17 	vmov	r0, r1, d7
 8009622:	eeb0 8a47 	vmov.f32	s16, s14
 8009626:	eef0 8a67 	vmov.f32	s17, s15
 800962a:	2300      	movs	r3, #0
 800962c:	f7f7 fa4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009630:	4681      	mov	r9, r0
 8009632:	b160      	cbz	r0, 800964e <_dtoa_r+0xee>
 8009634:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009636:	2301      	movs	r3, #1
 8009638:	6013      	str	r3, [r2, #0]
 800963a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800963c:	2b00      	cmp	r3, #0
 800963e:	f000 8568 	beq.w	800a112 <_dtoa_r+0xbb2>
 8009642:	4b86      	ldr	r3, [pc, #536]	; (800985c <_dtoa_r+0x2fc>)
 8009644:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009646:	6013      	str	r3, [r2, #0]
 8009648:	3b01      	subs	r3, #1
 800964a:	9300      	str	r3, [sp, #0]
 800964c:	e7da      	b.n	8009604 <_dtoa_r+0xa4>
 800964e:	aa10      	add	r2, sp, #64	; 0x40
 8009650:	a911      	add	r1, sp, #68	; 0x44
 8009652:	4620      	mov	r0, r4
 8009654:	eeb0 0a48 	vmov.f32	s0, s16
 8009658:	eef0 0a68 	vmov.f32	s1, s17
 800965c:	f001 fa4e 	bl	800aafc <__d2b>
 8009660:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009664:	4682      	mov	sl, r0
 8009666:	2d00      	cmp	r5, #0
 8009668:	d07f      	beq.n	800976a <_dtoa_r+0x20a>
 800966a:	ee18 3a90 	vmov	r3, s17
 800966e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009672:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009676:	ec51 0b18 	vmov	r0, r1, d8
 800967a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800967e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009682:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009686:	4619      	mov	r1, r3
 8009688:	2200      	movs	r2, #0
 800968a:	4b75      	ldr	r3, [pc, #468]	; (8009860 <_dtoa_r+0x300>)
 800968c:	f7f6 fdfc 	bl	8000288 <__aeabi_dsub>
 8009690:	a367      	add	r3, pc, #412	; (adr r3, 8009830 <_dtoa_r+0x2d0>)
 8009692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009696:	f7f6 ffaf 	bl	80005f8 <__aeabi_dmul>
 800969a:	a367      	add	r3, pc, #412	; (adr r3, 8009838 <_dtoa_r+0x2d8>)
 800969c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a0:	f7f6 fdf4 	bl	800028c <__adddf3>
 80096a4:	4606      	mov	r6, r0
 80096a6:	4628      	mov	r0, r5
 80096a8:	460f      	mov	r7, r1
 80096aa:	f7f6 ff3b 	bl	8000524 <__aeabi_i2d>
 80096ae:	a364      	add	r3, pc, #400	; (adr r3, 8009840 <_dtoa_r+0x2e0>)
 80096b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b4:	f7f6 ffa0 	bl	80005f8 <__aeabi_dmul>
 80096b8:	4602      	mov	r2, r0
 80096ba:	460b      	mov	r3, r1
 80096bc:	4630      	mov	r0, r6
 80096be:	4639      	mov	r1, r7
 80096c0:	f7f6 fde4 	bl	800028c <__adddf3>
 80096c4:	4606      	mov	r6, r0
 80096c6:	460f      	mov	r7, r1
 80096c8:	f7f7 fa46 	bl	8000b58 <__aeabi_d2iz>
 80096cc:	2200      	movs	r2, #0
 80096ce:	4683      	mov	fp, r0
 80096d0:	2300      	movs	r3, #0
 80096d2:	4630      	mov	r0, r6
 80096d4:	4639      	mov	r1, r7
 80096d6:	f7f7 fa01 	bl	8000adc <__aeabi_dcmplt>
 80096da:	b148      	cbz	r0, 80096f0 <_dtoa_r+0x190>
 80096dc:	4658      	mov	r0, fp
 80096de:	f7f6 ff21 	bl	8000524 <__aeabi_i2d>
 80096e2:	4632      	mov	r2, r6
 80096e4:	463b      	mov	r3, r7
 80096e6:	f7f7 f9ef 	bl	8000ac8 <__aeabi_dcmpeq>
 80096ea:	b908      	cbnz	r0, 80096f0 <_dtoa_r+0x190>
 80096ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80096f0:	f1bb 0f16 	cmp.w	fp, #22
 80096f4:	d857      	bhi.n	80097a6 <_dtoa_r+0x246>
 80096f6:	4b5b      	ldr	r3, [pc, #364]	; (8009864 <_dtoa_r+0x304>)
 80096f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80096fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009700:	ec51 0b18 	vmov	r0, r1, d8
 8009704:	f7f7 f9ea 	bl	8000adc <__aeabi_dcmplt>
 8009708:	2800      	cmp	r0, #0
 800970a:	d04e      	beq.n	80097aa <_dtoa_r+0x24a>
 800970c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009710:	2300      	movs	r3, #0
 8009712:	930c      	str	r3, [sp, #48]	; 0x30
 8009714:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009716:	1b5b      	subs	r3, r3, r5
 8009718:	1e5a      	subs	r2, r3, #1
 800971a:	bf45      	ittet	mi
 800971c:	f1c3 0301 	rsbmi	r3, r3, #1
 8009720:	9305      	strmi	r3, [sp, #20]
 8009722:	2300      	movpl	r3, #0
 8009724:	2300      	movmi	r3, #0
 8009726:	9206      	str	r2, [sp, #24]
 8009728:	bf54      	ite	pl
 800972a:	9305      	strpl	r3, [sp, #20]
 800972c:	9306      	strmi	r3, [sp, #24]
 800972e:	f1bb 0f00 	cmp.w	fp, #0
 8009732:	db3c      	blt.n	80097ae <_dtoa_r+0x24e>
 8009734:	9b06      	ldr	r3, [sp, #24]
 8009736:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800973a:	445b      	add	r3, fp
 800973c:	9306      	str	r3, [sp, #24]
 800973e:	2300      	movs	r3, #0
 8009740:	9308      	str	r3, [sp, #32]
 8009742:	9b07      	ldr	r3, [sp, #28]
 8009744:	2b09      	cmp	r3, #9
 8009746:	d868      	bhi.n	800981a <_dtoa_r+0x2ba>
 8009748:	2b05      	cmp	r3, #5
 800974a:	bfc4      	itt	gt
 800974c:	3b04      	subgt	r3, #4
 800974e:	9307      	strgt	r3, [sp, #28]
 8009750:	9b07      	ldr	r3, [sp, #28]
 8009752:	f1a3 0302 	sub.w	r3, r3, #2
 8009756:	bfcc      	ite	gt
 8009758:	2500      	movgt	r5, #0
 800975a:	2501      	movle	r5, #1
 800975c:	2b03      	cmp	r3, #3
 800975e:	f200 8085 	bhi.w	800986c <_dtoa_r+0x30c>
 8009762:	e8df f003 	tbb	[pc, r3]
 8009766:	3b2e      	.short	0x3b2e
 8009768:	5839      	.short	0x5839
 800976a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800976e:	441d      	add	r5, r3
 8009770:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009774:	2b20      	cmp	r3, #32
 8009776:	bfc1      	itttt	gt
 8009778:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800977c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009780:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009784:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009788:	bfd6      	itet	le
 800978a:	f1c3 0320 	rsble	r3, r3, #32
 800978e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009792:	fa06 f003 	lslle.w	r0, r6, r3
 8009796:	f7f6 feb5 	bl	8000504 <__aeabi_ui2d>
 800979a:	2201      	movs	r2, #1
 800979c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80097a0:	3d01      	subs	r5, #1
 80097a2:	920e      	str	r2, [sp, #56]	; 0x38
 80097a4:	e76f      	b.n	8009686 <_dtoa_r+0x126>
 80097a6:	2301      	movs	r3, #1
 80097a8:	e7b3      	b.n	8009712 <_dtoa_r+0x1b2>
 80097aa:	900c      	str	r0, [sp, #48]	; 0x30
 80097ac:	e7b2      	b.n	8009714 <_dtoa_r+0x1b4>
 80097ae:	9b05      	ldr	r3, [sp, #20]
 80097b0:	eba3 030b 	sub.w	r3, r3, fp
 80097b4:	9305      	str	r3, [sp, #20]
 80097b6:	f1cb 0300 	rsb	r3, fp, #0
 80097ba:	9308      	str	r3, [sp, #32]
 80097bc:	2300      	movs	r3, #0
 80097be:	930b      	str	r3, [sp, #44]	; 0x2c
 80097c0:	e7bf      	b.n	8009742 <_dtoa_r+0x1e2>
 80097c2:	2300      	movs	r3, #0
 80097c4:	9309      	str	r3, [sp, #36]	; 0x24
 80097c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	dc52      	bgt.n	8009872 <_dtoa_r+0x312>
 80097cc:	2301      	movs	r3, #1
 80097ce:	9301      	str	r3, [sp, #4]
 80097d0:	9304      	str	r3, [sp, #16]
 80097d2:	461a      	mov	r2, r3
 80097d4:	920a      	str	r2, [sp, #40]	; 0x28
 80097d6:	e00b      	b.n	80097f0 <_dtoa_r+0x290>
 80097d8:	2301      	movs	r3, #1
 80097da:	e7f3      	b.n	80097c4 <_dtoa_r+0x264>
 80097dc:	2300      	movs	r3, #0
 80097de:	9309      	str	r3, [sp, #36]	; 0x24
 80097e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097e2:	445b      	add	r3, fp
 80097e4:	9301      	str	r3, [sp, #4]
 80097e6:	3301      	adds	r3, #1
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	9304      	str	r3, [sp, #16]
 80097ec:	bfb8      	it	lt
 80097ee:	2301      	movlt	r3, #1
 80097f0:	69e0      	ldr	r0, [r4, #28]
 80097f2:	2100      	movs	r1, #0
 80097f4:	2204      	movs	r2, #4
 80097f6:	f102 0614 	add.w	r6, r2, #20
 80097fa:	429e      	cmp	r6, r3
 80097fc:	d93d      	bls.n	800987a <_dtoa_r+0x31a>
 80097fe:	6041      	str	r1, [r0, #4]
 8009800:	4620      	mov	r0, r4
 8009802:	f000 fd9f 	bl	800a344 <_Balloc>
 8009806:	9000      	str	r0, [sp, #0]
 8009808:	2800      	cmp	r0, #0
 800980a:	d139      	bne.n	8009880 <_dtoa_r+0x320>
 800980c:	4b16      	ldr	r3, [pc, #88]	; (8009868 <_dtoa_r+0x308>)
 800980e:	4602      	mov	r2, r0
 8009810:	f240 11af 	movw	r1, #431	; 0x1af
 8009814:	e6bd      	b.n	8009592 <_dtoa_r+0x32>
 8009816:	2301      	movs	r3, #1
 8009818:	e7e1      	b.n	80097de <_dtoa_r+0x27e>
 800981a:	2501      	movs	r5, #1
 800981c:	2300      	movs	r3, #0
 800981e:	9307      	str	r3, [sp, #28]
 8009820:	9509      	str	r5, [sp, #36]	; 0x24
 8009822:	f04f 33ff 	mov.w	r3, #4294967295
 8009826:	9301      	str	r3, [sp, #4]
 8009828:	9304      	str	r3, [sp, #16]
 800982a:	2200      	movs	r2, #0
 800982c:	2312      	movs	r3, #18
 800982e:	e7d1      	b.n	80097d4 <_dtoa_r+0x274>
 8009830:	636f4361 	.word	0x636f4361
 8009834:	3fd287a7 	.word	0x3fd287a7
 8009838:	8b60c8b3 	.word	0x8b60c8b3
 800983c:	3fc68a28 	.word	0x3fc68a28
 8009840:	509f79fb 	.word	0x509f79fb
 8009844:	3fd34413 	.word	0x3fd34413
 8009848:	0800cb9e 	.word	0x0800cb9e
 800984c:	0800cbb5 	.word	0x0800cbb5
 8009850:	7ff00000 	.word	0x7ff00000
 8009854:	0800cb9a 	.word	0x0800cb9a
 8009858:	0800cb91 	.word	0x0800cb91
 800985c:	0800cb69 	.word	0x0800cb69
 8009860:	3ff80000 	.word	0x3ff80000
 8009864:	0800cca0 	.word	0x0800cca0
 8009868:	0800cc0d 	.word	0x0800cc0d
 800986c:	2301      	movs	r3, #1
 800986e:	9309      	str	r3, [sp, #36]	; 0x24
 8009870:	e7d7      	b.n	8009822 <_dtoa_r+0x2c2>
 8009872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009874:	9301      	str	r3, [sp, #4]
 8009876:	9304      	str	r3, [sp, #16]
 8009878:	e7ba      	b.n	80097f0 <_dtoa_r+0x290>
 800987a:	3101      	adds	r1, #1
 800987c:	0052      	lsls	r2, r2, #1
 800987e:	e7ba      	b.n	80097f6 <_dtoa_r+0x296>
 8009880:	69e3      	ldr	r3, [r4, #28]
 8009882:	9a00      	ldr	r2, [sp, #0]
 8009884:	601a      	str	r2, [r3, #0]
 8009886:	9b04      	ldr	r3, [sp, #16]
 8009888:	2b0e      	cmp	r3, #14
 800988a:	f200 80a8 	bhi.w	80099de <_dtoa_r+0x47e>
 800988e:	2d00      	cmp	r5, #0
 8009890:	f000 80a5 	beq.w	80099de <_dtoa_r+0x47e>
 8009894:	f1bb 0f00 	cmp.w	fp, #0
 8009898:	dd38      	ble.n	800990c <_dtoa_r+0x3ac>
 800989a:	4bc0      	ldr	r3, [pc, #768]	; (8009b9c <_dtoa_r+0x63c>)
 800989c:	f00b 020f 	and.w	r2, fp, #15
 80098a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80098a8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80098ac:	ea4f 182b 	mov.w	r8, fp, asr #4
 80098b0:	d019      	beq.n	80098e6 <_dtoa_r+0x386>
 80098b2:	4bbb      	ldr	r3, [pc, #748]	; (8009ba0 <_dtoa_r+0x640>)
 80098b4:	ec51 0b18 	vmov	r0, r1, d8
 80098b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80098bc:	f7f6 ffc6 	bl	800084c <__aeabi_ddiv>
 80098c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098c4:	f008 080f 	and.w	r8, r8, #15
 80098c8:	2503      	movs	r5, #3
 80098ca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009ba0 <_dtoa_r+0x640>
 80098ce:	f1b8 0f00 	cmp.w	r8, #0
 80098d2:	d10a      	bne.n	80098ea <_dtoa_r+0x38a>
 80098d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098d8:	4632      	mov	r2, r6
 80098da:	463b      	mov	r3, r7
 80098dc:	f7f6 ffb6 	bl	800084c <__aeabi_ddiv>
 80098e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098e4:	e02b      	b.n	800993e <_dtoa_r+0x3de>
 80098e6:	2502      	movs	r5, #2
 80098e8:	e7ef      	b.n	80098ca <_dtoa_r+0x36a>
 80098ea:	f018 0f01 	tst.w	r8, #1
 80098ee:	d008      	beq.n	8009902 <_dtoa_r+0x3a2>
 80098f0:	4630      	mov	r0, r6
 80098f2:	4639      	mov	r1, r7
 80098f4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80098f8:	f7f6 fe7e 	bl	80005f8 <__aeabi_dmul>
 80098fc:	3501      	adds	r5, #1
 80098fe:	4606      	mov	r6, r0
 8009900:	460f      	mov	r7, r1
 8009902:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009906:	f109 0908 	add.w	r9, r9, #8
 800990a:	e7e0      	b.n	80098ce <_dtoa_r+0x36e>
 800990c:	f000 809f 	beq.w	8009a4e <_dtoa_r+0x4ee>
 8009910:	f1cb 0600 	rsb	r6, fp, #0
 8009914:	4ba1      	ldr	r3, [pc, #644]	; (8009b9c <_dtoa_r+0x63c>)
 8009916:	4fa2      	ldr	r7, [pc, #648]	; (8009ba0 <_dtoa_r+0x640>)
 8009918:	f006 020f 	and.w	r2, r6, #15
 800991c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009924:	ec51 0b18 	vmov	r0, r1, d8
 8009928:	f7f6 fe66 	bl	80005f8 <__aeabi_dmul>
 800992c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009930:	1136      	asrs	r6, r6, #4
 8009932:	2300      	movs	r3, #0
 8009934:	2502      	movs	r5, #2
 8009936:	2e00      	cmp	r6, #0
 8009938:	d17e      	bne.n	8009a38 <_dtoa_r+0x4d8>
 800993a:	2b00      	cmp	r3, #0
 800993c:	d1d0      	bne.n	80098e0 <_dtoa_r+0x380>
 800993e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009940:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009944:	2b00      	cmp	r3, #0
 8009946:	f000 8084 	beq.w	8009a52 <_dtoa_r+0x4f2>
 800994a:	4b96      	ldr	r3, [pc, #600]	; (8009ba4 <_dtoa_r+0x644>)
 800994c:	2200      	movs	r2, #0
 800994e:	4640      	mov	r0, r8
 8009950:	4649      	mov	r1, r9
 8009952:	f7f7 f8c3 	bl	8000adc <__aeabi_dcmplt>
 8009956:	2800      	cmp	r0, #0
 8009958:	d07b      	beq.n	8009a52 <_dtoa_r+0x4f2>
 800995a:	9b04      	ldr	r3, [sp, #16]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d078      	beq.n	8009a52 <_dtoa_r+0x4f2>
 8009960:	9b01      	ldr	r3, [sp, #4]
 8009962:	2b00      	cmp	r3, #0
 8009964:	dd39      	ble.n	80099da <_dtoa_r+0x47a>
 8009966:	4b90      	ldr	r3, [pc, #576]	; (8009ba8 <_dtoa_r+0x648>)
 8009968:	2200      	movs	r2, #0
 800996a:	4640      	mov	r0, r8
 800996c:	4649      	mov	r1, r9
 800996e:	f7f6 fe43 	bl	80005f8 <__aeabi_dmul>
 8009972:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009976:	9e01      	ldr	r6, [sp, #4]
 8009978:	f10b 37ff 	add.w	r7, fp, #4294967295
 800997c:	3501      	adds	r5, #1
 800997e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009982:	4628      	mov	r0, r5
 8009984:	f7f6 fdce 	bl	8000524 <__aeabi_i2d>
 8009988:	4642      	mov	r2, r8
 800998a:	464b      	mov	r3, r9
 800998c:	f7f6 fe34 	bl	80005f8 <__aeabi_dmul>
 8009990:	4b86      	ldr	r3, [pc, #536]	; (8009bac <_dtoa_r+0x64c>)
 8009992:	2200      	movs	r2, #0
 8009994:	f7f6 fc7a 	bl	800028c <__adddf3>
 8009998:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800999c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099a0:	9303      	str	r3, [sp, #12]
 80099a2:	2e00      	cmp	r6, #0
 80099a4:	d158      	bne.n	8009a58 <_dtoa_r+0x4f8>
 80099a6:	4b82      	ldr	r3, [pc, #520]	; (8009bb0 <_dtoa_r+0x650>)
 80099a8:	2200      	movs	r2, #0
 80099aa:	4640      	mov	r0, r8
 80099ac:	4649      	mov	r1, r9
 80099ae:	f7f6 fc6b 	bl	8000288 <__aeabi_dsub>
 80099b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099b6:	4680      	mov	r8, r0
 80099b8:	4689      	mov	r9, r1
 80099ba:	f7f7 f8ad 	bl	8000b18 <__aeabi_dcmpgt>
 80099be:	2800      	cmp	r0, #0
 80099c0:	f040 8296 	bne.w	8009ef0 <_dtoa_r+0x990>
 80099c4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80099c8:	4640      	mov	r0, r8
 80099ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099ce:	4649      	mov	r1, r9
 80099d0:	f7f7 f884 	bl	8000adc <__aeabi_dcmplt>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	f040 8289 	bne.w	8009eec <_dtoa_r+0x98c>
 80099da:	ed8d 8b02 	vstr	d8, [sp, #8]
 80099de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	f2c0 814e 	blt.w	8009c82 <_dtoa_r+0x722>
 80099e6:	f1bb 0f0e 	cmp.w	fp, #14
 80099ea:	f300 814a 	bgt.w	8009c82 <_dtoa_r+0x722>
 80099ee:	4b6b      	ldr	r3, [pc, #428]	; (8009b9c <_dtoa_r+0x63c>)
 80099f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80099f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f280 80dc 	bge.w	8009bb8 <_dtoa_r+0x658>
 8009a00:	9b04      	ldr	r3, [sp, #16]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f300 80d8 	bgt.w	8009bb8 <_dtoa_r+0x658>
 8009a08:	f040 826f 	bne.w	8009eea <_dtoa_r+0x98a>
 8009a0c:	4b68      	ldr	r3, [pc, #416]	; (8009bb0 <_dtoa_r+0x650>)
 8009a0e:	2200      	movs	r2, #0
 8009a10:	4640      	mov	r0, r8
 8009a12:	4649      	mov	r1, r9
 8009a14:	f7f6 fdf0 	bl	80005f8 <__aeabi_dmul>
 8009a18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a1c:	f7f7 f872 	bl	8000b04 <__aeabi_dcmpge>
 8009a20:	9e04      	ldr	r6, [sp, #16]
 8009a22:	4637      	mov	r7, r6
 8009a24:	2800      	cmp	r0, #0
 8009a26:	f040 8245 	bne.w	8009eb4 <_dtoa_r+0x954>
 8009a2a:	9d00      	ldr	r5, [sp, #0]
 8009a2c:	2331      	movs	r3, #49	; 0x31
 8009a2e:	f805 3b01 	strb.w	r3, [r5], #1
 8009a32:	f10b 0b01 	add.w	fp, fp, #1
 8009a36:	e241      	b.n	8009ebc <_dtoa_r+0x95c>
 8009a38:	07f2      	lsls	r2, r6, #31
 8009a3a:	d505      	bpl.n	8009a48 <_dtoa_r+0x4e8>
 8009a3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a40:	f7f6 fdda 	bl	80005f8 <__aeabi_dmul>
 8009a44:	3501      	adds	r5, #1
 8009a46:	2301      	movs	r3, #1
 8009a48:	1076      	asrs	r6, r6, #1
 8009a4a:	3708      	adds	r7, #8
 8009a4c:	e773      	b.n	8009936 <_dtoa_r+0x3d6>
 8009a4e:	2502      	movs	r5, #2
 8009a50:	e775      	b.n	800993e <_dtoa_r+0x3de>
 8009a52:	9e04      	ldr	r6, [sp, #16]
 8009a54:	465f      	mov	r7, fp
 8009a56:	e792      	b.n	800997e <_dtoa_r+0x41e>
 8009a58:	9900      	ldr	r1, [sp, #0]
 8009a5a:	4b50      	ldr	r3, [pc, #320]	; (8009b9c <_dtoa_r+0x63c>)
 8009a5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a60:	4431      	add	r1, r6
 8009a62:	9102      	str	r1, [sp, #8]
 8009a64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a66:	eeb0 9a47 	vmov.f32	s18, s14
 8009a6a:	eef0 9a67 	vmov.f32	s19, s15
 8009a6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009a72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a76:	2900      	cmp	r1, #0
 8009a78:	d044      	beq.n	8009b04 <_dtoa_r+0x5a4>
 8009a7a:	494e      	ldr	r1, [pc, #312]	; (8009bb4 <_dtoa_r+0x654>)
 8009a7c:	2000      	movs	r0, #0
 8009a7e:	f7f6 fee5 	bl	800084c <__aeabi_ddiv>
 8009a82:	ec53 2b19 	vmov	r2, r3, d9
 8009a86:	f7f6 fbff 	bl	8000288 <__aeabi_dsub>
 8009a8a:	9d00      	ldr	r5, [sp, #0]
 8009a8c:	ec41 0b19 	vmov	d9, r0, r1
 8009a90:	4649      	mov	r1, r9
 8009a92:	4640      	mov	r0, r8
 8009a94:	f7f7 f860 	bl	8000b58 <__aeabi_d2iz>
 8009a98:	4606      	mov	r6, r0
 8009a9a:	f7f6 fd43 	bl	8000524 <__aeabi_i2d>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	4640      	mov	r0, r8
 8009aa4:	4649      	mov	r1, r9
 8009aa6:	f7f6 fbef 	bl	8000288 <__aeabi_dsub>
 8009aaa:	3630      	adds	r6, #48	; 0x30
 8009aac:	f805 6b01 	strb.w	r6, [r5], #1
 8009ab0:	ec53 2b19 	vmov	r2, r3, d9
 8009ab4:	4680      	mov	r8, r0
 8009ab6:	4689      	mov	r9, r1
 8009ab8:	f7f7 f810 	bl	8000adc <__aeabi_dcmplt>
 8009abc:	2800      	cmp	r0, #0
 8009abe:	d164      	bne.n	8009b8a <_dtoa_r+0x62a>
 8009ac0:	4642      	mov	r2, r8
 8009ac2:	464b      	mov	r3, r9
 8009ac4:	4937      	ldr	r1, [pc, #220]	; (8009ba4 <_dtoa_r+0x644>)
 8009ac6:	2000      	movs	r0, #0
 8009ac8:	f7f6 fbde 	bl	8000288 <__aeabi_dsub>
 8009acc:	ec53 2b19 	vmov	r2, r3, d9
 8009ad0:	f7f7 f804 	bl	8000adc <__aeabi_dcmplt>
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	f040 80b6 	bne.w	8009c46 <_dtoa_r+0x6e6>
 8009ada:	9b02      	ldr	r3, [sp, #8]
 8009adc:	429d      	cmp	r5, r3
 8009ade:	f43f af7c 	beq.w	80099da <_dtoa_r+0x47a>
 8009ae2:	4b31      	ldr	r3, [pc, #196]	; (8009ba8 <_dtoa_r+0x648>)
 8009ae4:	ec51 0b19 	vmov	r0, r1, d9
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f7f6 fd85 	bl	80005f8 <__aeabi_dmul>
 8009aee:	4b2e      	ldr	r3, [pc, #184]	; (8009ba8 <_dtoa_r+0x648>)
 8009af0:	ec41 0b19 	vmov	d9, r0, r1
 8009af4:	2200      	movs	r2, #0
 8009af6:	4640      	mov	r0, r8
 8009af8:	4649      	mov	r1, r9
 8009afa:	f7f6 fd7d 	bl	80005f8 <__aeabi_dmul>
 8009afe:	4680      	mov	r8, r0
 8009b00:	4689      	mov	r9, r1
 8009b02:	e7c5      	b.n	8009a90 <_dtoa_r+0x530>
 8009b04:	ec51 0b17 	vmov	r0, r1, d7
 8009b08:	f7f6 fd76 	bl	80005f8 <__aeabi_dmul>
 8009b0c:	9b02      	ldr	r3, [sp, #8]
 8009b0e:	9d00      	ldr	r5, [sp, #0]
 8009b10:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b12:	ec41 0b19 	vmov	d9, r0, r1
 8009b16:	4649      	mov	r1, r9
 8009b18:	4640      	mov	r0, r8
 8009b1a:	f7f7 f81d 	bl	8000b58 <__aeabi_d2iz>
 8009b1e:	4606      	mov	r6, r0
 8009b20:	f7f6 fd00 	bl	8000524 <__aeabi_i2d>
 8009b24:	3630      	adds	r6, #48	; 0x30
 8009b26:	4602      	mov	r2, r0
 8009b28:	460b      	mov	r3, r1
 8009b2a:	4640      	mov	r0, r8
 8009b2c:	4649      	mov	r1, r9
 8009b2e:	f7f6 fbab 	bl	8000288 <__aeabi_dsub>
 8009b32:	f805 6b01 	strb.w	r6, [r5], #1
 8009b36:	9b02      	ldr	r3, [sp, #8]
 8009b38:	429d      	cmp	r5, r3
 8009b3a:	4680      	mov	r8, r0
 8009b3c:	4689      	mov	r9, r1
 8009b3e:	f04f 0200 	mov.w	r2, #0
 8009b42:	d124      	bne.n	8009b8e <_dtoa_r+0x62e>
 8009b44:	4b1b      	ldr	r3, [pc, #108]	; (8009bb4 <_dtoa_r+0x654>)
 8009b46:	ec51 0b19 	vmov	r0, r1, d9
 8009b4a:	f7f6 fb9f 	bl	800028c <__adddf3>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	460b      	mov	r3, r1
 8009b52:	4640      	mov	r0, r8
 8009b54:	4649      	mov	r1, r9
 8009b56:	f7f6 ffdf 	bl	8000b18 <__aeabi_dcmpgt>
 8009b5a:	2800      	cmp	r0, #0
 8009b5c:	d173      	bne.n	8009c46 <_dtoa_r+0x6e6>
 8009b5e:	ec53 2b19 	vmov	r2, r3, d9
 8009b62:	4914      	ldr	r1, [pc, #80]	; (8009bb4 <_dtoa_r+0x654>)
 8009b64:	2000      	movs	r0, #0
 8009b66:	f7f6 fb8f 	bl	8000288 <__aeabi_dsub>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	4640      	mov	r0, r8
 8009b70:	4649      	mov	r1, r9
 8009b72:	f7f6 ffb3 	bl	8000adc <__aeabi_dcmplt>
 8009b76:	2800      	cmp	r0, #0
 8009b78:	f43f af2f 	beq.w	80099da <_dtoa_r+0x47a>
 8009b7c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009b7e:	1e6b      	subs	r3, r5, #1
 8009b80:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b86:	2b30      	cmp	r3, #48	; 0x30
 8009b88:	d0f8      	beq.n	8009b7c <_dtoa_r+0x61c>
 8009b8a:	46bb      	mov	fp, r7
 8009b8c:	e04a      	b.n	8009c24 <_dtoa_r+0x6c4>
 8009b8e:	4b06      	ldr	r3, [pc, #24]	; (8009ba8 <_dtoa_r+0x648>)
 8009b90:	f7f6 fd32 	bl	80005f8 <__aeabi_dmul>
 8009b94:	4680      	mov	r8, r0
 8009b96:	4689      	mov	r9, r1
 8009b98:	e7bd      	b.n	8009b16 <_dtoa_r+0x5b6>
 8009b9a:	bf00      	nop
 8009b9c:	0800cca0 	.word	0x0800cca0
 8009ba0:	0800cc78 	.word	0x0800cc78
 8009ba4:	3ff00000 	.word	0x3ff00000
 8009ba8:	40240000 	.word	0x40240000
 8009bac:	401c0000 	.word	0x401c0000
 8009bb0:	40140000 	.word	0x40140000
 8009bb4:	3fe00000 	.word	0x3fe00000
 8009bb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009bbc:	9d00      	ldr	r5, [sp, #0]
 8009bbe:	4642      	mov	r2, r8
 8009bc0:	464b      	mov	r3, r9
 8009bc2:	4630      	mov	r0, r6
 8009bc4:	4639      	mov	r1, r7
 8009bc6:	f7f6 fe41 	bl	800084c <__aeabi_ddiv>
 8009bca:	f7f6 ffc5 	bl	8000b58 <__aeabi_d2iz>
 8009bce:	9001      	str	r0, [sp, #4]
 8009bd0:	f7f6 fca8 	bl	8000524 <__aeabi_i2d>
 8009bd4:	4642      	mov	r2, r8
 8009bd6:	464b      	mov	r3, r9
 8009bd8:	f7f6 fd0e 	bl	80005f8 <__aeabi_dmul>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	4630      	mov	r0, r6
 8009be2:	4639      	mov	r1, r7
 8009be4:	f7f6 fb50 	bl	8000288 <__aeabi_dsub>
 8009be8:	9e01      	ldr	r6, [sp, #4]
 8009bea:	9f04      	ldr	r7, [sp, #16]
 8009bec:	3630      	adds	r6, #48	; 0x30
 8009bee:	f805 6b01 	strb.w	r6, [r5], #1
 8009bf2:	9e00      	ldr	r6, [sp, #0]
 8009bf4:	1bae      	subs	r6, r5, r6
 8009bf6:	42b7      	cmp	r7, r6
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	d134      	bne.n	8009c68 <_dtoa_r+0x708>
 8009bfe:	f7f6 fb45 	bl	800028c <__adddf3>
 8009c02:	4642      	mov	r2, r8
 8009c04:	464b      	mov	r3, r9
 8009c06:	4606      	mov	r6, r0
 8009c08:	460f      	mov	r7, r1
 8009c0a:	f7f6 ff85 	bl	8000b18 <__aeabi_dcmpgt>
 8009c0e:	b9c8      	cbnz	r0, 8009c44 <_dtoa_r+0x6e4>
 8009c10:	4642      	mov	r2, r8
 8009c12:	464b      	mov	r3, r9
 8009c14:	4630      	mov	r0, r6
 8009c16:	4639      	mov	r1, r7
 8009c18:	f7f6 ff56 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c1c:	b110      	cbz	r0, 8009c24 <_dtoa_r+0x6c4>
 8009c1e:	9b01      	ldr	r3, [sp, #4]
 8009c20:	07db      	lsls	r3, r3, #31
 8009c22:	d40f      	bmi.n	8009c44 <_dtoa_r+0x6e4>
 8009c24:	4651      	mov	r1, sl
 8009c26:	4620      	mov	r0, r4
 8009c28:	f000 fbcc 	bl	800a3c4 <_Bfree>
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c30:	702b      	strb	r3, [r5, #0]
 8009c32:	f10b 0301 	add.w	r3, fp, #1
 8009c36:	6013      	str	r3, [r2, #0]
 8009c38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f43f ace2 	beq.w	8009604 <_dtoa_r+0xa4>
 8009c40:	601d      	str	r5, [r3, #0]
 8009c42:	e4df      	b.n	8009604 <_dtoa_r+0xa4>
 8009c44:	465f      	mov	r7, fp
 8009c46:	462b      	mov	r3, r5
 8009c48:	461d      	mov	r5, r3
 8009c4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c4e:	2a39      	cmp	r2, #57	; 0x39
 8009c50:	d106      	bne.n	8009c60 <_dtoa_r+0x700>
 8009c52:	9a00      	ldr	r2, [sp, #0]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d1f7      	bne.n	8009c48 <_dtoa_r+0x6e8>
 8009c58:	9900      	ldr	r1, [sp, #0]
 8009c5a:	2230      	movs	r2, #48	; 0x30
 8009c5c:	3701      	adds	r7, #1
 8009c5e:	700a      	strb	r2, [r1, #0]
 8009c60:	781a      	ldrb	r2, [r3, #0]
 8009c62:	3201      	adds	r2, #1
 8009c64:	701a      	strb	r2, [r3, #0]
 8009c66:	e790      	b.n	8009b8a <_dtoa_r+0x62a>
 8009c68:	4ba3      	ldr	r3, [pc, #652]	; (8009ef8 <_dtoa_r+0x998>)
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f7f6 fcc4 	bl	80005f8 <__aeabi_dmul>
 8009c70:	2200      	movs	r2, #0
 8009c72:	2300      	movs	r3, #0
 8009c74:	4606      	mov	r6, r0
 8009c76:	460f      	mov	r7, r1
 8009c78:	f7f6 ff26 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	d09e      	beq.n	8009bbe <_dtoa_r+0x65e>
 8009c80:	e7d0      	b.n	8009c24 <_dtoa_r+0x6c4>
 8009c82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c84:	2a00      	cmp	r2, #0
 8009c86:	f000 80ca 	beq.w	8009e1e <_dtoa_r+0x8be>
 8009c8a:	9a07      	ldr	r2, [sp, #28]
 8009c8c:	2a01      	cmp	r2, #1
 8009c8e:	f300 80ad 	bgt.w	8009dec <_dtoa_r+0x88c>
 8009c92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c94:	2a00      	cmp	r2, #0
 8009c96:	f000 80a5 	beq.w	8009de4 <_dtoa_r+0x884>
 8009c9a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009c9e:	9e08      	ldr	r6, [sp, #32]
 8009ca0:	9d05      	ldr	r5, [sp, #20]
 8009ca2:	9a05      	ldr	r2, [sp, #20]
 8009ca4:	441a      	add	r2, r3
 8009ca6:	9205      	str	r2, [sp, #20]
 8009ca8:	9a06      	ldr	r2, [sp, #24]
 8009caa:	2101      	movs	r1, #1
 8009cac:	441a      	add	r2, r3
 8009cae:	4620      	mov	r0, r4
 8009cb0:	9206      	str	r2, [sp, #24]
 8009cb2:	f000 fc87 	bl	800a5c4 <__i2b>
 8009cb6:	4607      	mov	r7, r0
 8009cb8:	b165      	cbz	r5, 8009cd4 <_dtoa_r+0x774>
 8009cba:	9b06      	ldr	r3, [sp, #24]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	dd09      	ble.n	8009cd4 <_dtoa_r+0x774>
 8009cc0:	42ab      	cmp	r3, r5
 8009cc2:	9a05      	ldr	r2, [sp, #20]
 8009cc4:	bfa8      	it	ge
 8009cc6:	462b      	movge	r3, r5
 8009cc8:	1ad2      	subs	r2, r2, r3
 8009cca:	9205      	str	r2, [sp, #20]
 8009ccc:	9a06      	ldr	r2, [sp, #24]
 8009cce:	1aed      	subs	r5, r5, r3
 8009cd0:	1ad3      	subs	r3, r2, r3
 8009cd2:	9306      	str	r3, [sp, #24]
 8009cd4:	9b08      	ldr	r3, [sp, #32]
 8009cd6:	b1f3      	cbz	r3, 8009d16 <_dtoa_r+0x7b6>
 8009cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f000 80a3 	beq.w	8009e26 <_dtoa_r+0x8c6>
 8009ce0:	2e00      	cmp	r6, #0
 8009ce2:	dd10      	ble.n	8009d06 <_dtoa_r+0x7a6>
 8009ce4:	4639      	mov	r1, r7
 8009ce6:	4632      	mov	r2, r6
 8009ce8:	4620      	mov	r0, r4
 8009cea:	f000 fd2b 	bl	800a744 <__pow5mult>
 8009cee:	4652      	mov	r2, sl
 8009cf0:	4601      	mov	r1, r0
 8009cf2:	4607      	mov	r7, r0
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	f000 fc7b 	bl	800a5f0 <__multiply>
 8009cfa:	4651      	mov	r1, sl
 8009cfc:	4680      	mov	r8, r0
 8009cfe:	4620      	mov	r0, r4
 8009d00:	f000 fb60 	bl	800a3c4 <_Bfree>
 8009d04:	46c2      	mov	sl, r8
 8009d06:	9b08      	ldr	r3, [sp, #32]
 8009d08:	1b9a      	subs	r2, r3, r6
 8009d0a:	d004      	beq.n	8009d16 <_dtoa_r+0x7b6>
 8009d0c:	4651      	mov	r1, sl
 8009d0e:	4620      	mov	r0, r4
 8009d10:	f000 fd18 	bl	800a744 <__pow5mult>
 8009d14:	4682      	mov	sl, r0
 8009d16:	2101      	movs	r1, #1
 8009d18:	4620      	mov	r0, r4
 8009d1a:	f000 fc53 	bl	800a5c4 <__i2b>
 8009d1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	4606      	mov	r6, r0
 8009d24:	f340 8081 	ble.w	8009e2a <_dtoa_r+0x8ca>
 8009d28:	461a      	mov	r2, r3
 8009d2a:	4601      	mov	r1, r0
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	f000 fd09 	bl	800a744 <__pow5mult>
 8009d32:	9b07      	ldr	r3, [sp, #28]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	4606      	mov	r6, r0
 8009d38:	dd7a      	ble.n	8009e30 <_dtoa_r+0x8d0>
 8009d3a:	f04f 0800 	mov.w	r8, #0
 8009d3e:	6933      	ldr	r3, [r6, #16]
 8009d40:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009d44:	6918      	ldr	r0, [r3, #16]
 8009d46:	f000 fbef 	bl	800a528 <__hi0bits>
 8009d4a:	f1c0 0020 	rsb	r0, r0, #32
 8009d4e:	9b06      	ldr	r3, [sp, #24]
 8009d50:	4418      	add	r0, r3
 8009d52:	f010 001f 	ands.w	r0, r0, #31
 8009d56:	f000 8094 	beq.w	8009e82 <_dtoa_r+0x922>
 8009d5a:	f1c0 0320 	rsb	r3, r0, #32
 8009d5e:	2b04      	cmp	r3, #4
 8009d60:	f340 8085 	ble.w	8009e6e <_dtoa_r+0x90e>
 8009d64:	9b05      	ldr	r3, [sp, #20]
 8009d66:	f1c0 001c 	rsb	r0, r0, #28
 8009d6a:	4403      	add	r3, r0
 8009d6c:	9305      	str	r3, [sp, #20]
 8009d6e:	9b06      	ldr	r3, [sp, #24]
 8009d70:	4403      	add	r3, r0
 8009d72:	4405      	add	r5, r0
 8009d74:	9306      	str	r3, [sp, #24]
 8009d76:	9b05      	ldr	r3, [sp, #20]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	dd05      	ble.n	8009d88 <_dtoa_r+0x828>
 8009d7c:	4651      	mov	r1, sl
 8009d7e:	461a      	mov	r2, r3
 8009d80:	4620      	mov	r0, r4
 8009d82:	f000 fd39 	bl	800a7f8 <__lshift>
 8009d86:	4682      	mov	sl, r0
 8009d88:	9b06      	ldr	r3, [sp, #24]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	dd05      	ble.n	8009d9a <_dtoa_r+0x83a>
 8009d8e:	4631      	mov	r1, r6
 8009d90:	461a      	mov	r2, r3
 8009d92:	4620      	mov	r0, r4
 8009d94:	f000 fd30 	bl	800a7f8 <__lshift>
 8009d98:	4606      	mov	r6, r0
 8009d9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d072      	beq.n	8009e86 <_dtoa_r+0x926>
 8009da0:	4631      	mov	r1, r6
 8009da2:	4650      	mov	r0, sl
 8009da4:	f000 fd94 	bl	800a8d0 <__mcmp>
 8009da8:	2800      	cmp	r0, #0
 8009daa:	da6c      	bge.n	8009e86 <_dtoa_r+0x926>
 8009dac:	2300      	movs	r3, #0
 8009dae:	4651      	mov	r1, sl
 8009db0:	220a      	movs	r2, #10
 8009db2:	4620      	mov	r0, r4
 8009db4:	f000 fb28 	bl	800a408 <__multadd>
 8009db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009dbe:	4682      	mov	sl, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	f000 81b0 	beq.w	800a126 <_dtoa_r+0xbc6>
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	4639      	mov	r1, r7
 8009dca:	220a      	movs	r2, #10
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f000 fb1b 	bl	800a408 <__multadd>
 8009dd2:	9b01      	ldr	r3, [sp, #4]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	4607      	mov	r7, r0
 8009dd8:	f300 8096 	bgt.w	8009f08 <_dtoa_r+0x9a8>
 8009ddc:	9b07      	ldr	r3, [sp, #28]
 8009dde:	2b02      	cmp	r3, #2
 8009de0:	dc59      	bgt.n	8009e96 <_dtoa_r+0x936>
 8009de2:	e091      	b.n	8009f08 <_dtoa_r+0x9a8>
 8009de4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009de6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009dea:	e758      	b.n	8009c9e <_dtoa_r+0x73e>
 8009dec:	9b04      	ldr	r3, [sp, #16]
 8009dee:	1e5e      	subs	r6, r3, #1
 8009df0:	9b08      	ldr	r3, [sp, #32]
 8009df2:	42b3      	cmp	r3, r6
 8009df4:	bfbf      	itttt	lt
 8009df6:	9b08      	ldrlt	r3, [sp, #32]
 8009df8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009dfa:	9608      	strlt	r6, [sp, #32]
 8009dfc:	1af3      	sublt	r3, r6, r3
 8009dfe:	bfb4      	ite	lt
 8009e00:	18d2      	addlt	r2, r2, r3
 8009e02:	1b9e      	subge	r6, r3, r6
 8009e04:	9b04      	ldr	r3, [sp, #16]
 8009e06:	bfbc      	itt	lt
 8009e08:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009e0a:	2600      	movlt	r6, #0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	bfb7      	itett	lt
 8009e10:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009e14:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009e18:	1a9d      	sublt	r5, r3, r2
 8009e1a:	2300      	movlt	r3, #0
 8009e1c:	e741      	b.n	8009ca2 <_dtoa_r+0x742>
 8009e1e:	9e08      	ldr	r6, [sp, #32]
 8009e20:	9d05      	ldr	r5, [sp, #20]
 8009e22:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009e24:	e748      	b.n	8009cb8 <_dtoa_r+0x758>
 8009e26:	9a08      	ldr	r2, [sp, #32]
 8009e28:	e770      	b.n	8009d0c <_dtoa_r+0x7ac>
 8009e2a:	9b07      	ldr	r3, [sp, #28]
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	dc19      	bgt.n	8009e64 <_dtoa_r+0x904>
 8009e30:	9b02      	ldr	r3, [sp, #8]
 8009e32:	b9bb      	cbnz	r3, 8009e64 <_dtoa_r+0x904>
 8009e34:	9b03      	ldr	r3, [sp, #12]
 8009e36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e3a:	b99b      	cbnz	r3, 8009e64 <_dtoa_r+0x904>
 8009e3c:	9b03      	ldr	r3, [sp, #12]
 8009e3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e42:	0d1b      	lsrs	r3, r3, #20
 8009e44:	051b      	lsls	r3, r3, #20
 8009e46:	b183      	cbz	r3, 8009e6a <_dtoa_r+0x90a>
 8009e48:	9b05      	ldr	r3, [sp, #20]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	9305      	str	r3, [sp, #20]
 8009e4e:	9b06      	ldr	r3, [sp, #24]
 8009e50:	3301      	adds	r3, #1
 8009e52:	9306      	str	r3, [sp, #24]
 8009e54:	f04f 0801 	mov.w	r8, #1
 8009e58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	f47f af6f 	bne.w	8009d3e <_dtoa_r+0x7de>
 8009e60:	2001      	movs	r0, #1
 8009e62:	e774      	b.n	8009d4e <_dtoa_r+0x7ee>
 8009e64:	f04f 0800 	mov.w	r8, #0
 8009e68:	e7f6      	b.n	8009e58 <_dtoa_r+0x8f8>
 8009e6a:	4698      	mov	r8, r3
 8009e6c:	e7f4      	b.n	8009e58 <_dtoa_r+0x8f8>
 8009e6e:	d082      	beq.n	8009d76 <_dtoa_r+0x816>
 8009e70:	9a05      	ldr	r2, [sp, #20]
 8009e72:	331c      	adds	r3, #28
 8009e74:	441a      	add	r2, r3
 8009e76:	9205      	str	r2, [sp, #20]
 8009e78:	9a06      	ldr	r2, [sp, #24]
 8009e7a:	441a      	add	r2, r3
 8009e7c:	441d      	add	r5, r3
 8009e7e:	9206      	str	r2, [sp, #24]
 8009e80:	e779      	b.n	8009d76 <_dtoa_r+0x816>
 8009e82:	4603      	mov	r3, r0
 8009e84:	e7f4      	b.n	8009e70 <_dtoa_r+0x910>
 8009e86:	9b04      	ldr	r3, [sp, #16]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	dc37      	bgt.n	8009efc <_dtoa_r+0x99c>
 8009e8c:	9b07      	ldr	r3, [sp, #28]
 8009e8e:	2b02      	cmp	r3, #2
 8009e90:	dd34      	ble.n	8009efc <_dtoa_r+0x99c>
 8009e92:	9b04      	ldr	r3, [sp, #16]
 8009e94:	9301      	str	r3, [sp, #4]
 8009e96:	9b01      	ldr	r3, [sp, #4]
 8009e98:	b963      	cbnz	r3, 8009eb4 <_dtoa_r+0x954>
 8009e9a:	4631      	mov	r1, r6
 8009e9c:	2205      	movs	r2, #5
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	f000 fab2 	bl	800a408 <__multadd>
 8009ea4:	4601      	mov	r1, r0
 8009ea6:	4606      	mov	r6, r0
 8009ea8:	4650      	mov	r0, sl
 8009eaa:	f000 fd11 	bl	800a8d0 <__mcmp>
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	f73f adbb 	bgt.w	8009a2a <_dtoa_r+0x4ca>
 8009eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eb6:	9d00      	ldr	r5, [sp, #0]
 8009eb8:	ea6f 0b03 	mvn.w	fp, r3
 8009ebc:	f04f 0800 	mov.w	r8, #0
 8009ec0:	4631      	mov	r1, r6
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	f000 fa7e 	bl	800a3c4 <_Bfree>
 8009ec8:	2f00      	cmp	r7, #0
 8009eca:	f43f aeab 	beq.w	8009c24 <_dtoa_r+0x6c4>
 8009ece:	f1b8 0f00 	cmp.w	r8, #0
 8009ed2:	d005      	beq.n	8009ee0 <_dtoa_r+0x980>
 8009ed4:	45b8      	cmp	r8, r7
 8009ed6:	d003      	beq.n	8009ee0 <_dtoa_r+0x980>
 8009ed8:	4641      	mov	r1, r8
 8009eda:	4620      	mov	r0, r4
 8009edc:	f000 fa72 	bl	800a3c4 <_Bfree>
 8009ee0:	4639      	mov	r1, r7
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	f000 fa6e 	bl	800a3c4 <_Bfree>
 8009ee8:	e69c      	b.n	8009c24 <_dtoa_r+0x6c4>
 8009eea:	2600      	movs	r6, #0
 8009eec:	4637      	mov	r7, r6
 8009eee:	e7e1      	b.n	8009eb4 <_dtoa_r+0x954>
 8009ef0:	46bb      	mov	fp, r7
 8009ef2:	4637      	mov	r7, r6
 8009ef4:	e599      	b.n	8009a2a <_dtoa_r+0x4ca>
 8009ef6:	bf00      	nop
 8009ef8:	40240000 	.word	0x40240000
 8009efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	f000 80c8 	beq.w	800a094 <_dtoa_r+0xb34>
 8009f04:	9b04      	ldr	r3, [sp, #16]
 8009f06:	9301      	str	r3, [sp, #4]
 8009f08:	2d00      	cmp	r5, #0
 8009f0a:	dd05      	ble.n	8009f18 <_dtoa_r+0x9b8>
 8009f0c:	4639      	mov	r1, r7
 8009f0e:	462a      	mov	r2, r5
 8009f10:	4620      	mov	r0, r4
 8009f12:	f000 fc71 	bl	800a7f8 <__lshift>
 8009f16:	4607      	mov	r7, r0
 8009f18:	f1b8 0f00 	cmp.w	r8, #0
 8009f1c:	d05b      	beq.n	8009fd6 <_dtoa_r+0xa76>
 8009f1e:	6879      	ldr	r1, [r7, #4]
 8009f20:	4620      	mov	r0, r4
 8009f22:	f000 fa0f 	bl	800a344 <_Balloc>
 8009f26:	4605      	mov	r5, r0
 8009f28:	b928      	cbnz	r0, 8009f36 <_dtoa_r+0x9d6>
 8009f2a:	4b83      	ldr	r3, [pc, #524]	; (800a138 <_dtoa_r+0xbd8>)
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009f32:	f7ff bb2e 	b.w	8009592 <_dtoa_r+0x32>
 8009f36:	693a      	ldr	r2, [r7, #16]
 8009f38:	3202      	adds	r2, #2
 8009f3a:	0092      	lsls	r2, r2, #2
 8009f3c:	f107 010c 	add.w	r1, r7, #12
 8009f40:	300c      	adds	r0, #12
 8009f42:	f002 f809 	bl	800bf58 <memcpy>
 8009f46:	2201      	movs	r2, #1
 8009f48:	4629      	mov	r1, r5
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	f000 fc54 	bl	800a7f8 <__lshift>
 8009f50:	9b00      	ldr	r3, [sp, #0]
 8009f52:	3301      	adds	r3, #1
 8009f54:	9304      	str	r3, [sp, #16]
 8009f56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	9308      	str	r3, [sp, #32]
 8009f5e:	9b02      	ldr	r3, [sp, #8]
 8009f60:	f003 0301 	and.w	r3, r3, #1
 8009f64:	46b8      	mov	r8, r7
 8009f66:	9306      	str	r3, [sp, #24]
 8009f68:	4607      	mov	r7, r0
 8009f6a:	9b04      	ldr	r3, [sp, #16]
 8009f6c:	4631      	mov	r1, r6
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	4650      	mov	r0, sl
 8009f72:	9301      	str	r3, [sp, #4]
 8009f74:	f7ff fa6c 	bl	8009450 <quorem>
 8009f78:	4641      	mov	r1, r8
 8009f7a:	9002      	str	r0, [sp, #8]
 8009f7c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009f80:	4650      	mov	r0, sl
 8009f82:	f000 fca5 	bl	800a8d0 <__mcmp>
 8009f86:	463a      	mov	r2, r7
 8009f88:	9005      	str	r0, [sp, #20]
 8009f8a:	4631      	mov	r1, r6
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	f000 fcbb 	bl	800a908 <__mdiff>
 8009f92:	68c2      	ldr	r2, [r0, #12]
 8009f94:	4605      	mov	r5, r0
 8009f96:	bb02      	cbnz	r2, 8009fda <_dtoa_r+0xa7a>
 8009f98:	4601      	mov	r1, r0
 8009f9a:	4650      	mov	r0, sl
 8009f9c:	f000 fc98 	bl	800a8d0 <__mcmp>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	4629      	mov	r1, r5
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	9209      	str	r2, [sp, #36]	; 0x24
 8009fa8:	f000 fa0c 	bl	800a3c4 <_Bfree>
 8009fac:	9b07      	ldr	r3, [sp, #28]
 8009fae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fb0:	9d04      	ldr	r5, [sp, #16]
 8009fb2:	ea43 0102 	orr.w	r1, r3, r2
 8009fb6:	9b06      	ldr	r3, [sp, #24]
 8009fb8:	4319      	orrs	r1, r3
 8009fba:	d110      	bne.n	8009fde <_dtoa_r+0xa7e>
 8009fbc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009fc0:	d029      	beq.n	800a016 <_dtoa_r+0xab6>
 8009fc2:	9b05      	ldr	r3, [sp, #20]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	dd02      	ble.n	8009fce <_dtoa_r+0xa6e>
 8009fc8:	9b02      	ldr	r3, [sp, #8]
 8009fca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009fce:	9b01      	ldr	r3, [sp, #4]
 8009fd0:	f883 9000 	strb.w	r9, [r3]
 8009fd4:	e774      	b.n	8009ec0 <_dtoa_r+0x960>
 8009fd6:	4638      	mov	r0, r7
 8009fd8:	e7ba      	b.n	8009f50 <_dtoa_r+0x9f0>
 8009fda:	2201      	movs	r2, #1
 8009fdc:	e7e1      	b.n	8009fa2 <_dtoa_r+0xa42>
 8009fde:	9b05      	ldr	r3, [sp, #20]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	db04      	blt.n	8009fee <_dtoa_r+0xa8e>
 8009fe4:	9907      	ldr	r1, [sp, #28]
 8009fe6:	430b      	orrs	r3, r1
 8009fe8:	9906      	ldr	r1, [sp, #24]
 8009fea:	430b      	orrs	r3, r1
 8009fec:	d120      	bne.n	800a030 <_dtoa_r+0xad0>
 8009fee:	2a00      	cmp	r2, #0
 8009ff0:	dded      	ble.n	8009fce <_dtoa_r+0xa6e>
 8009ff2:	4651      	mov	r1, sl
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	f000 fbfe 	bl	800a7f8 <__lshift>
 8009ffc:	4631      	mov	r1, r6
 8009ffe:	4682      	mov	sl, r0
 800a000:	f000 fc66 	bl	800a8d0 <__mcmp>
 800a004:	2800      	cmp	r0, #0
 800a006:	dc03      	bgt.n	800a010 <_dtoa_r+0xab0>
 800a008:	d1e1      	bne.n	8009fce <_dtoa_r+0xa6e>
 800a00a:	f019 0f01 	tst.w	r9, #1
 800a00e:	d0de      	beq.n	8009fce <_dtoa_r+0xa6e>
 800a010:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a014:	d1d8      	bne.n	8009fc8 <_dtoa_r+0xa68>
 800a016:	9a01      	ldr	r2, [sp, #4]
 800a018:	2339      	movs	r3, #57	; 0x39
 800a01a:	7013      	strb	r3, [r2, #0]
 800a01c:	462b      	mov	r3, r5
 800a01e:	461d      	mov	r5, r3
 800a020:	3b01      	subs	r3, #1
 800a022:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a026:	2a39      	cmp	r2, #57	; 0x39
 800a028:	d06c      	beq.n	800a104 <_dtoa_r+0xba4>
 800a02a:	3201      	adds	r2, #1
 800a02c:	701a      	strb	r2, [r3, #0]
 800a02e:	e747      	b.n	8009ec0 <_dtoa_r+0x960>
 800a030:	2a00      	cmp	r2, #0
 800a032:	dd07      	ble.n	800a044 <_dtoa_r+0xae4>
 800a034:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a038:	d0ed      	beq.n	800a016 <_dtoa_r+0xab6>
 800a03a:	9a01      	ldr	r2, [sp, #4]
 800a03c:	f109 0301 	add.w	r3, r9, #1
 800a040:	7013      	strb	r3, [r2, #0]
 800a042:	e73d      	b.n	8009ec0 <_dtoa_r+0x960>
 800a044:	9b04      	ldr	r3, [sp, #16]
 800a046:	9a08      	ldr	r2, [sp, #32]
 800a048:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d043      	beq.n	800a0d8 <_dtoa_r+0xb78>
 800a050:	4651      	mov	r1, sl
 800a052:	2300      	movs	r3, #0
 800a054:	220a      	movs	r2, #10
 800a056:	4620      	mov	r0, r4
 800a058:	f000 f9d6 	bl	800a408 <__multadd>
 800a05c:	45b8      	cmp	r8, r7
 800a05e:	4682      	mov	sl, r0
 800a060:	f04f 0300 	mov.w	r3, #0
 800a064:	f04f 020a 	mov.w	r2, #10
 800a068:	4641      	mov	r1, r8
 800a06a:	4620      	mov	r0, r4
 800a06c:	d107      	bne.n	800a07e <_dtoa_r+0xb1e>
 800a06e:	f000 f9cb 	bl	800a408 <__multadd>
 800a072:	4680      	mov	r8, r0
 800a074:	4607      	mov	r7, r0
 800a076:	9b04      	ldr	r3, [sp, #16]
 800a078:	3301      	adds	r3, #1
 800a07a:	9304      	str	r3, [sp, #16]
 800a07c:	e775      	b.n	8009f6a <_dtoa_r+0xa0a>
 800a07e:	f000 f9c3 	bl	800a408 <__multadd>
 800a082:	4639      	mov	r1, r7
 800a084:	4680      	mov	r8, r0
 800a086:	2300      	movs	r3, #0
 800a088:	220a      	movs	r2, #10
 800a08a:	4620      	mov	r0, r4
 800a08c:	f000 f9bc 	bl	800a408 <__multadd>
 800a090:	4607      	mov	r7, r0
 800a092:	e7f0      	b.n	800a076 <_dtoa_r+0xb16>
 800a094:	9b04      	ldr	r3, [sp, #16]
 800a096:	9301      	str	r3, [sp, #4]
 800a098:	9d00      	ldr	r5, [sp, #0]
 800a09a:	4631      	mov	r1, r6
 800a09c:	4650      	mov	r0, sl
 800a09e:	f7ff f9d7 	bl	8009450 <quorem>
 800a0a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a0a6:	9b00      	ldr	r3, [sp, #0]
 800a0a8:	f805 9b01 	strb.w	r9, [r5], #1
 800a0ac:	1aea      	subs	r2, r5, r3
 800a0ae:	9b01      	ldr	r3, [sp, #4]
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	dd07      	ble.n	800a0c4 <_dtoa_r+0xb64>
 800a0b4:	4651      	mov	r1, sl
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	220a      	movs	r2, #10
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	f000 f9a4 	bl	800a408 <__multadd>
 800a0c0:	4682      	mov	sl, r0
 800a0c2:	e7ea      	b.n	800a09a <_dtoa_r+0xb3a>
 800a0c4:	9b01      	ldr	r3, [sp, #4]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	bfc8      	it	gt
 800a0ca:	461d      	movgt	r5, r3
 800a0cc:	9b00      	ldr	r3, [sp, #0]
 800a0ce:	bfd8      	it	le
 800a0d0:	2501      	movle	r5, #1
 800a0d2:	441d      	add	r5, r3
 800a0d4:	f04f 0800 	mov.w	r8, #0
 800a0d8:	4651      	mov	r1, sl
 800a0da:	2201      	movs	r2, #1
 800a0dc:	4620      	mov	r0, r4
 800a0de:	f000 fb8b 	bl	800a7f8 <__lshift>
 800a0e2:	4631      	mov	r1, r6
 800a0e4:	4682      	mov	sl, r0
 800a0e6:	f000 fbf3 	bl	800a8d0 <__mcmp>
 800a0ea:	2800      	cmp	r0, #0
 800a0ec:	dc96      	bgt.n	800a01c <_dtoa_r+0xabc>
 800a0ee:	d102      	bne.n	800a0f6 <_dtoa_r+0xb96>
 800a0f0:	f019 0f01 	tst.w	r9, #1
 800a0f4:	d192      	bne.n	800a01c <_dtoa_r+0xabc>
 800a0f6:	462b      	mov	r3, r5
 800a0f8:	461d      	mov	r5, r3
 800a0fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0fe:	2a30      	cmp	r2, #48	; 0x30
 800a100:	d0fa      	beq.n	800a0f8 <_dtoa_r+0xb98>
 800a102:	e6dd      	b.n	8009ec0 <_dtoa_r+0x960>
 800a104:	9a00      	ldr	r2, [sp, #0]
 800a106:	429a      	cmp	r2, r3
 800a108:	d189      	bne.n	800a01e <_dtoa_r+0xabe>
 800a10a:	f10b 0b01 	add.w	fp, fp, #1
 800a10e:	2331      	movs	r3, #49	; 0x31
 800a110:	e796      	b.n	800a040 <_dtoa_r+0xae0>
 800a112:	4b0a      	ldr	r3, [pc, #40]	; (800a13c <_dtoa_r+0xbdc>)
 800a114:	f7ff ba99 	b.w	800964a <_dtoa_r+0xea>
 800a118:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	f47f aa6d 	bne.w	80095fa <_dtoa_r+0x9a>
 800a120:	4b07      	ldr	r3, [pc, #28]	; (800a140 <_dtoa_r+0xbe0>)
 800a122:	f7ff ba92 	b.w	800964a <_dtoa_r+0xea>
 800a126:	9b01      	ldr	r3, [sp, #4]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	dcb5      	bgt.n	800a098 <_dtoa_r+0xb38>
 800a12c:	9b07      	ldr	r3, [sp, #28]
 800a12e:	2b02      	cmp	r3, #2
 800a130:	f73f aeb1 	bgt.w	8009e96 <_dtoa_r+0x936>
 800a134:	e7b0      	b.n	800a098 <_dtoa_r+0xb38>
 800a136:	bf00      	nop
 800a138:	0800cc0d 	.word	0x0800cc0d
 800a13c:	0800cb68 	.word	0x0800cb68
 800a140:	0800cb91 	.word	0x0800cb91

0800a144 <_free_r>:
 800a144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a146:	2900      	cmp	r1, #0
 800a148:	d044      	beq.n	800a1d4 <_free_r+0x90>
 800a14a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a14e:	9001      	str	r0, [sp, #4]
 800a150:	2b00      	cmp	r3, #0
 800a152:	f1a1 0404 	sub.w	r4, r1, #4
 800a156:	bfb8      	it	lt
 800a158:	18e4      	addlt	r4, r4, r3
 800a15a:	f000 f8e7 	bl	800a32c <__malloc_lock>
 800a15e:	4a1e      	ldr	r2, [pc, #120]	; (800a1d8 <_free_r+0x94>)
 800a160:	9801      	ldr	r0, [sp, #4]
 800a162:	6813      	ldr	r3, [r2, #0]
 800a164:	b933      	cbnz	r3, 800a174 <_free_r+0x30>
 800a166:	6063      	str	r3, [r4, #4]
 800a168:	6014      	str	r4, [r2, #0]
 800a16a:	b003      	add	sp, #12
 800a16c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a170:	f000 b8e2 	b.w	800a338 <__malloc_unlock>
 800a174:	42a3      	cmp	r3, r4
 800a176:	d908      	bls.n	800a18a <_free_r+0x46>
 800a178:	6825      	ldr	r5, [r4, #0]
 800a17a:	1961      	adds	r1, r4, r5
 800a17c:	428b      	cmp	r3, r1
 800a17e:	bf01      	itttt	eq
 800a180:	6819      	ldreq	r1, [r3, #0]
 800a182:	685b      	ldreq	r3, [r3, #4]
 800a184:	1949      	addeq	r1, r1, r5
 800a186:	6021      	streq	r1, [r4, #0]
 800a188:	e7ed      	b.n	800a166 <_free_r+0x22>
 800a18a:	461a      	mov	r2, r3
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	b10b      	cbz	r3, 800a194 <_free_r+0x50>
 800a190:	42a3      	cmp	r3, r4
 800a192:	d9fa      	bls.n	800a18a <_free_r+0x46>
 800a194:	6811      	ldr	r1, [r2, #0]
 800a196:	1855      	adds	r5, r2, r1
 800a198:	42a5      	cmp	r5, r4
 800a19a:	d10b      	bne.n	800a1b4 <_free_r+0x70>
 800a19c:	6824      	ldr	r4, [r4, #0]
 800a19e:	4421      	add	r1, r4
 800a1a0:	1854      	adds	r4, r2, r1
 800a1a2:	42a3      	cmp	r3, r4
 800a1a4:	6011      	str	r1, [r2, #0]
 800a1a6:	d1e0      	bne.n	800a16a <_free_r+0x26>
 800a1a8:	681c      	ldr	r4, [r3, #0]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	6053      	str	r3, [r2, #4]
 800a1ae:	440c      	add	r4, r1
 800a1b0:	6014      	str	r4, [r2, #0]
 800a1b2:	e7da      	b.n	800a16a <_free_r+0x26>
 800a1b4:	d902      	bls.n	800a1bc <_free_r+0x78>
 800a1b6:	230c      	movs	r3, #12
 800a1b8:	6003      	str	r3, [r0, #0]
 800a1ba:	e7d6      	b.n	800a16a <_free_r+0x26>
 800a1bc:	6825      	ldr	r5, [r4, #0]
 800a1be:	1961      	adds	r1, r4, r5
 800a1c0:	428b      	cmp	r3, r1
 800a1c2:	bf04      	itt	eq
 800a1c4:	6819      	ldreq	r1, [r3, #0]
 800a1c6:	685b      	ldreq	r3, [r3, #4]
 800a1c8:	6063      	str	r3, [r4, #4]
 800a1ca:	bf04      	itt	eq
 800a1cc:	1949      	addeq	r1, r1, r5
 800a1ce:	6021      	streq	r1, [r4, #0]
 800a1d0:	6054      	str	r4, [r2, #4]
 800a1d2:	e7ca      	b.n	800a16a <_free_r+0x26>
 800a1d4:	b003      	add	sp, #12
 800a1d6:	bd30      	pop	{r4, r5, pc}
 800a1d8:	200005d8 	.word	0x200005d8

0800a1dc <malloc>:
 800a1dc:	4b02      	ldr	r3, [pc, #8]	; (800a1e8 <malloc+0xc>)
 800a1de:	4601      	mov	r1, r0
 800a1e0:	6818      	ldr	r0, [r3, #0]
 800a1e2:	f000 b823 	b.w	800a22c <_malloc_r>
 800a1e6:	bf00      	nop
 800a1e8:	20000064 	.word	0x20000064

0800a1ec <sbrk_aligned>:
 800a1ec:	b570      	push	{r4, r5, r6, lr}
 800a1ee:	4e0e      	ldr	r6, [pc, #56]	; (800a228 <sbrk_aligned+0x3c>)
 800a1f0:	460c      	mov	r4, r1
 800a1f2:	6831      	ldr	r1, [r6, #0]
 800a1f4:	4605      	mov	r5, r0
 800a1f6:	b911      	cbnz	r1, 800a1fe <sbrk_aligned+0x12>
 800a1f8:	f001 fe9e 	bl	800bf38 <_sbrk_r>
 800a1fc:	6030      	str	r0, [r6, #0]
 800a1fe:	4621      	mov	r1, r4
 800a200:	4628      	mov	r0, r5
 800a202:	f001 fe99 	bl	800bf38 <_sbrk_r>
 800a206:	1c43      	adds	r3, r0, #1
 800a208:	d00a      	beq.n	800a220 <sbrk_aligned+0x34>
 800a20a:	1cc4      	adds	r4, r0, #3
 800a20c:	f024 0403 	bic.w	r4, r4, #3
 800a210:	42a0      	cmp	r0, r4
 800a212:	d007      	beq.n	800a224 <sbrk_aligned+0x38>
 800a214:	1a21      	subs	r1, r4, r0
 800a216:	4628      	mov	r0, r5
 800a218:	f001 fe8e 	bl	800bf38 <_sbrk_r>
 800a21c:	3001      	adds	r0, #1
 800a21e:	d101      	bne.n	800a224 <sbrk_aligned+0x38>
 800a220:	f04f 34ff 	mov.w	r4, #4294967295
 800a224:	4620      	mov	r0, r4
 800a226:	bd70      	pop	{r4, r5, r6, pc}
 800a228:	200005dc 	.word	0x200005dc

0800a22c <_malloc_r>:
 800a22c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a230:	1ccd      	adds	r5, r1, #3
 800a232:	f025 0503 	bic.w	r5, r5, #3
 800a236:	3508      	adds	r5, #8
 800a238:	2d0c      	cmp	r5, #12
 800a23a:	bf38      	it	cc
 800a23c:	250c      	movcc	r5, #12
 800a23e:	2d00      	cmp	r5, #0
 800a240:	4607      	mov	r7, r0
 800a242:	db01      	blt.n	800a248 <_malloc_r+0x1c>
 800a244:	42a9      	cmp	r1, r5
 800a246:	d905      	bls.n	800a254 <_malloc_r+0x28>
 800a248:	230c      	movs	r3, #12
 800a24a:	603b      	str	r3, [r7, #0]
 800a24c:	2600      	movs	r6, #0
 800a24e:	4630      	mov	r0, r6
 800a250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a254:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a328 <_malloc_r+0xfc>
 800a258:	f000 f868 	bl	800a32c <__malloc_lock>
 800a25c:	f8d8 3000 	ldr.w	r3, [r8]
 800a260:	461c      	mov	r4, r3
 800a262:	bb5c      	cbnz	r4, 800a2bc <_malloc_r+0x90>
 800a264:	4629      	mov	r1, r5
 800a266:	4638      	mov	r0, r7
 800a268:	f7ff ffc0 	bl	800a1ec <sbrk_aligned>
 800a26c:	1c43      	adds	r3, r0, #1
 800a26e:	4604      	mov	r4, r0
 800a270:	d155      	bne.n	800a31e <_malloc_r+0xf2>
 800a272:	f8d8 4000 	ldr.w	r4, [r8]
 800a276:	4626      	mov	r6, r4
 800a278:	2e00      	cmp	r6, #0
 800a27a:	d145      	bne.n	800a308 <_malloc_r+0xdc>
 800a27c:	2c00      	cmp	r4, #0
 800a27e:	d048      	beq.n	800a312 <_malloc_r+0xe6>
 800a280:	6823      	ldr	r3, [r4, #0]
 800a282:	4631      	mov	r1, r6
 800a284:	4638      	mov	r0, r7
 800a286:	eb04 0903 	add.w	r9, r4, r3
 800a28a:	f001 fe55 	bl	800bf38 <_sbrk_r>
 800a28e:	4581      	cmp	r9, r0
 800a290:	d13f      	bne.n	800a312 <_malloc_r+0xe6>
 800a292:	6821      	ldr	r1, [r4, #0]
 800a294:	1a6d      	subs	r5, r5, r1
 800a296:	4629      	mov	r1, r5
 800a298:	4638      	mov	r0, r7
 800a29a:	f7ff ffa7 	bl	800a1ec <sbrk_aligned>
 800a29e:	3001      	adds	r0, #1
 800a2a0:	d037      	beq.n	800a312 <_malloc_r+0xe6>
 800a2a2:	6823      	ldr	r3, [r4, #0]
 800a2a4:	442b      	add	r3, r5
 800a2a6:	6023      	str	r3, [r4, #0]
 800a2a8:	f8d8 3000 	ldr.w	r3, [r8]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d038      	beq.n	800a322 <_malloc_r+0xf6>
 800a2b0:	685a      	ldr	r2, [r3, #4]
 800a2b2:	42a2      	cmp	r2, r4
 800a2b4:	d12b      	bne.n	800a30e <_malloc_r+0xe2>
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	605a      	str	r2, [r3, #4]
 800a2ba:	e00f      	b.n	800a2dc <_malloc_r+0xb0>
 800a2bc:	6822      	ldr	r2, [r4, #0]
 800a2be:	1b52      	subs	r2, r2, r5
 800a2c0:	d41f      	bmi.n	800a302 <_malloc_r+0xd6>
 800a2c2:	2a0b      	cmp	r2, #11
 800a2c4:	d917      	bls.n	800a2f6 <_malloc_r+0xca>
 800a2c6:	1961      	adds	r1, r4, r5
 800a2c8:	42a3      	cmp	r3, r4
 800a2ca:	6025      	str	r5, [r4, #0]
 800a2cc:	bf18      	it	ne
 800a2ce:	6059      	strne	r1, [r3, #4]
 800a2d0:	6863      	ldr	r3, [r4, #4]
 800a2d2:	bf08      	it	eq
 800a2d4:	f8c8 1000 	streq.w	r1, [r8]
 800a2d8:	5162      	str	r2, [r4, r5]
 800a2da:	604b      	str	r3, [r1, #4]
 800a2dc:	4638      	mov	r0, r7
 800a2de:	f104 060b 	add.w	r6, r4, #11
 800a2e2:	f000 f829 	bl	800a338 <__malloc_unlock>
 800a2e6:	f026 0607 	bic.w	r6, r6, #7
 800a2ea:	1d23      	adds	r3, r4, #4
 800a2ec:	1af2      	subs	r2, r6, r3
 800a2ee:	d0ae      	beq.n	800a24e <_malloc_r+0x22>
 800a2f0:	1b9b      	subs	r3, r3, r6
 800a2f2:	50a3      	str	r3, [r4, r2]
 800a2f4:	e7ab      	b.n	800a24e <_malloc_r+0x22>
 800a2f6:	42a3      	cmp	r3, r4
 800a2f8:	6862      	ldr	r2, [r4, #4]
 800a2fa:	d1dd      	bne.n	800a2b8 <_malloc_r+0x8c>
 800a2fc:	f8c8 2000 	str.w	r2, [r8]
 800a300:	e7ec      	b.n	800a2dc <_malloc_r+0xb0>
 800a302:	4623      	mov	r3, r4
 800a304:	6864      	ldr	r4, [r4, #4]
 800a306:	e7ac      	b.n	800a262 <_malloc_r+0x36>
 800a308:	4634      	mov	r4, r6
 800a30a:	6876      	ldr	r6, [r6, #4]
 800a30c:	e7b4      	b.n	800a278 <_malloc_r+0x4c>
 800a30e:	4613      	mov	r3, r2
 800a310:	e7cc      	b.n	800a2ac <_malloc_r+0x80>
 800a312:	230c      	movs	r3, #12
 800a314:	603b      	str	r3, [r7, #0]
 800a316:	4638      	mov	r0, r7
 800a318:	f000 f80e 	bl	800a338 <__malloc_unlock>
 800a31c:	e797      	b.n	800a24e <_malloc_r+0x22>
 800a31e:	6025      	str	r5, [r4, #0]
 800a320:	e7dc      	b.n	800a2dc <_malloc_r+0xb0>
 800a322:	605b      	str	r3, [r3, #4]
 800a324:	deff      	udf	#255	; 0xff
 800a326:	bf00      	nop
 800a328:	200005d8 	.word	0x200005d8

0800a32c <__malloc_lock>:
 800a32c:	4801      	ldr	r0, [pc, #4]	; (800a334 <__malloc_lock+0x8>)
 800a32e:	f7ff b887 	b.w	8009440 <__retarget_lock_acquire_recursive>
 800a332:	bf00      	nop
 800a334:	200005d4 	.word	0x200005d4

0800a338 <__malloc_unlock>:
 800a338:	4801      	ldr	r0, [pc, #4]	; (800a340 <__malloc_unlock+0x8>)
 800a33a:	f7ff b882 	b.w	8009442 <__retarget_lock_release_recursive>
 800a33e:	bf00      	nop
 800a340:	200005d4 	.word	0x200005d4

0800a344 <_Balloc>:
 800a344:	b570      	push	{r4, r5, r6, lr}
 800a346:	69c6      	ldr	r6, [r0, #28]
 800a348:	4604      	mov	r4, r0
 800a34a:	460d      	mov	r5, r1
 800a34c:	b976      	cbnz	r6, 800a36c <_Balloc+0x28>
 800a34e:	2010      	movs	r0, #16
 800a350:	f7ff ff44 	bl	800a1dc <malloc>
 800a354:	4602      	mov	r2, r0
 800a356:	61e0      	str	r0, [r4, #28]
 800a358:	b920      	cbnz	r0, 800a364 <_Balloc+0x20>
 800a35a:	4b18      	ldr	r3, [pc, #96]	; (800a3bc <_Balloc+0x78>)
 800a35c:	4818      	ldr	r0, [pc, #96]	; (800a3c0 <_Balloc+0x7c>)
 800a35e:	216b      	movs	r1, #107	; 0x6b
 800a360:	f001 fe12 	bl	800bf88 <__assert_func>
 800a364:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a368:	6006      	str	r6, [r0, #0]
 800a36a:	60c6      	str	r6, [r0, #12]
 800a36c:	69e6      	ldr	r6, [r4, #28]
 800a36e:	68f3      	ldr	r3, [r6, #12]
 800a370:	b183      	cbz	r3, 800a394 <_Balloc+0x50>
 800a372:	69e3      	ldr	r3, [r4, #28]
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a37a:	b9b8      	cbnz	r0, 800a3ac <_Balloc+0x68>
 800a37c:	2101      	movs	r1, #1
 800a37e:	fa01 f605 	lsl.w	r6, r1, r5
 800a382:	1d72      	adds	r2, r6, #5
 800a384:	0092      	lsls	r2, r2, #2
 800a386:	4620      	mov	r0, r4
 800a388:	f001 fe1c 	bl	800bfc4 <_calloc_r>
 800a38c:	b160      	cbz	r0, 800a3a8 <_Balloc+0x64>
 800a38e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a392:	e00e      	b.n	800a3b2 <_Balloc+0x6e>
 800a394:	2221      	movs	r2, #33	; 0x21
 800a396:	2104      	movs	r1, #4
 800a398:	4620      	mov	r0, r4
 800a39a:	f001 fe13 	bl	800bfc4 <_calloc_r>
 800a39e:	69e3      	ldr	r3, [r4, #28]
 800a3a0:	60f0      	str	r0, [r6, #12]
 800a3a2:	68db      	ldr	r3, [r3, #12]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d1e4      	bne.n	800a372 <_Balloc+0x2e>
 800a3a8:	2000      	movs	r0, #0
 800a3aa:	bd70      	pop	{r4, r5, r6, pc}
 800a3ac:	6802      	ldr	r2, [r0, #0]
 800a3ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a3b8:	e7f7      	b.n	800a3aa <_Balloc+0x66>
 800a3ba:	bf00      	nop
 800a3bc:	0800cb9e 	.word	0x0800cb9e
 800a3c0:	0800cc1e 	.word	0x0800cc1e

0800a3c4 <_Bfree>:
 800a3c4:	b570      	push	{r4, r5, r6, lr}
 800a3c6:	69c6      	ldr	r6, [r0, #28]
 800a3c8:	4605      	mov	r5, r0
 800a3ca:	460c      	mov	r4, r1
 800a3cc:	b976      	cbnz	r6, 800a3ec <_Bfree+0x28>
 800a3ce:	2010      	movs	r0, #16
 800a3d0:	f7ff ff04 	bl	800a1dc <malloc>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	61e8      	str	r0, [r5, #28]
 800a3d8:	b920      	cbnz	r0, 800a3e4 <_Bfree+0x20>
 800a3da:	4b09      	ldr	r3, [pc, #36]	; (800a400 <_Bfree+0x3c>)
 800a3dc:	4809      	ldr	r0, [pc, #36]	; (800a404 <_Bfree+0x40>)
 800a3de:	218f      	movs	r1, #143	; 0x8f
 800a3e0:	f001 fdd2 	bl	800bf88 <__assert_func>
 800a3e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3e8:	6006      	str	r6, [r0, #0]
 800a3ea:	60c6      	str	r6, [r0, #12]
 800a3ec:	b13c      	cbz	r4, 800a3fe <_Bfree+0x3a>
 800a3ee:	69eb      	ldr	r3, [r5, #28]
 800a3f0:	6862      	ldr	r2, [r4, #4]
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a3f8:	6021      	str	r1, [r4, #0]
 800a3fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a3fe:	bd70      	pop	{r4, r5, r6, pc}
 800a400:	0800cb9e 	.word	0x0800cb9e
 800a404:	0800cc1e 	.word	0x0800cc1e

0800a408 <__multadd>:
 800a408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a40c:	690d      	ldr	r5, [r1, #16]
 800a40e:	4607      	mov	r7, r0
 800a410:	460c      	mov	r4, r1
 800a412:	461e      	mov	r6, r3
 800a414:	f101 0c14 	add.w	ip, r1, #20
 800a418:	2000      	movs	r0, #0
 800a41a:	f8dc 3000 	ldr.w	r3, [ip]
 800a41e:	b299      	uxth	r1, r3
 800a420:	fb02 6101 	mla	r1, r2, r1, r6
 800a424:	0c1e      	lsrs	r6, r3, #16
 800a426:	0c0b      	lsrs	r3, r1, #16
 800a428:	fb02 3306 	mla	r3, r2, r6, r3
 800a42c:	b289      	uxth	r1, r1
 800a42e:	3001      	adds	r0, #1
 800a430:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a434:	4285      	cmp	r5, r0
 800a436:	f84c 1b04 	str.w	r1, [ip], #4
 800a43a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a43e:	dcec      	bgt.n	800a41a <__multadd+0x12>
 800a440:	b30e      	cbz	r6, 800a486 <__multadd+0x7e>
 800a442:	68a3      	ldr	r3, [r4, #8]
 800a444:	42ab      	cmp	r3, r5
 800a446:	dc19      	bgt.n	800a47c <__multadd+0x74>
 800a448:	6861      	ldr	r1, [r4, #4]
 800a44a:	4638      	mov	r0, r7
 800a44c:	3101      	adds	r1, #1
 800a44e:	f7ff ff79 	bl	800a344 <_Balloc>
 800a452:	4680      	mov	r8, r0
 800a454:	b928      	cbnz	r0, 800a462 <__multadd+0x5a>
 800a456:	4602      	mov	r2, r0
 800a458:	4b0c      	ldr	r3, [pc, #48]	; (800a48c <__multadd+0x84>)
 800a45a:	480d      	ldr	r0, [pc, #52]	; (800a490 <__multadd+0x88>)
 800a45c:	21ba      	movs	r1, #186	; 0xba
 800a45e:	f001 fd93 	bl	800bf88 <__assert_func>
 800a462:	6922      	ldr	r2, [r4, #16]
 800a464:	3202      	adds	r2, #2
 800a466:	f104 010c 	add.w	r1, r4, #12
 800a46a:	0092      	lsls	r2, r2, #2
 800a46c:	300c      	adds	r0, #12
 800a46e:	f001 fd73 	bl	800bf58 <memcpy>
 800a472:	4621      	mov	r1, r4
 800a474:	4638      	mov	r0, r7
 800a476:	f7ff ffa5 	bl	800a3c4 <_Bfree>
 800a47a:	4644      	mov	r4, r8
 800a47c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a480:	3501      	adds	r5, #1
 800a482:	615e      	str	r6, [r3, #20]
 800a484:	6125      	str	r5, [r4, #16]
 800a486:	4620      	mov	r0, r4
 800a488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a48c:	0800cc0d 	.word	0x0800cc0d
 800a490:	0800cc1e 	.word	0x0800cc1e

0800a494 <__s2b>:
 800a494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a498:	460c      	mov	r4, r1
 800a49a:	4615      	mov	r5, r2
 800a49c:	461f      	mov	r7, r3
 800a49e:	2209      	movs	r2, #9
 800a4a0:	3308      	adds	r3, #8
 800a4a2:	4606      	mov	r6, r0
 800a4a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	db09      	blt.n	800a4c4 <__s2b+0x30>
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	f7ff ff47 	bl	800a344 <_Balloc>
 800a4b6:	b940      	cbnz	r0, 800a4ca <__s2b+0x36>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	4b19      	ldr	r3, [pc, #100]	; (800a520 <__s2b+0x8c>)
 800a4bc:	4819      	ldr	r0, [pc, #100]	; (800a524 <__s2b+0x90>)
 800a4be:	21d3      	movs	r1, #211	; 0xd3
 800a4c0:	f001 fd62 	bl	800bf88 <__assert_func>
 800a4c4:	0052      	lsls	r2, r2, #1
 800a4c6:	3101      	adds	r1, #1
 800a4c8:	e7f0      	b.n	800a4ac <__s2b+0x18>
 800a4ca:	9b08      	ldr	r3, [sp, #32]
 800a4cc:	6143      	str	r3, [r0, #20]
 800a4ce:	2d09      	cmp	r5, #9
 800a4d0:	f04f 0301 	mov.w	r3, #1
 800a4d4:	6103      	str	r3, [r0, #16]
 800a4d6:	dd16      	ble.n	800a506 <__s2b+0x72>
 800a4d8:	f104 0909 	add.w	r9, r4, #9
 800a4dc:	46c8      	mov	r8, r9
 800a4de:	442c      	add	r4, r5
 800a4e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a4e4:	4601      	mov	r1, r0
 800a4e6:	3b30      	subs	r3, #48	; 0x30
 800a4e8:	220a      	movs	r2, #10
 800a4ea:	4630      	mov	r0, r6
 800a4ec:	f7ff ff8c 	bl	800a408 <__multadd>
 800a4f0:	45a0      	cmp	r8, r4
 800a4f2:	d1f5      	bne.n	800a4e0 <__s2b+0x4c>
 800a4f4:	f1a5 0408 	sub.w	r4, r5, #8
 800a4f8:	444c      	add	r4, r9
 800a4fa:	1b2d      	subs	r5, r5, r4
 800a4fc:	1963      	adds	r3, r4, r5
 800a4fe:	42bb      	cmp	r3, r7
 800a500:	db04      	blt.n	800a50c <__s2b+0x78>
 800a502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a506:	340a      	adds	r4, #10
 800a508:	2509      	movs	r5, #9
 800a50a:	e7f6      	b.n	800a4fa <__s2b+0x66>
 800a50c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a510:	4601      	mov	r1, r0
 800a512:	3b30      	subs	r3, #48	; 0x30
 800a514:	220a      	movs	r2, #10
 800a516:	4630      	mov	r0, r6
 800a518:	f7ff ff76 	bl	800a408 <__multadd>
 800a51c:	e7ee      	b.n	800a4fc <__s2b+0x68>
 800a51e:	bf00      	nop
 800a520:	0800cc0d 	.word	0x0800cc0d
 800a524:	0800cc1e 	.word	0x0800cc1e

0800a528 <__hi0bits>:
 800a528:	0c03      	lsrs	r3, r0, #16
 800a52a:	041b      	lsls	r3, r3, #16
 800a52c:	b9d3      	cbnz	r3, 800a564 <__hi0bits+0x3c>
 800a52e:	0400      	lsls	r0, r0, #16
 800a530:	2310      	movs	r3, #16
 800a532:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a536:	bf04      	itt	eq
 800a538:	0200      	lsleq	r0, r0, #8
 800a53a:	3308      	addeq	r3, #8
 800a53c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a540:	bf04      	itt	eq
 800a542:	0100      	lsleq	r0, r0, #4
 800a544:	3304      	addeq	r3, #4
 800a546:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a54a:	bf04      	itt	eq
 800a54c:	0080      	lsleq	r0, r0, #2
 800a54e:	3302      	addeq	r3, #2
 800a550:	2800      	cmp	r0, #0
 800a552:	db05      	blt.n	800a560 <__hi0bits+0x38>
 800a554:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a558:	f103 0301 	add.w	r3, r3, #1
 800a55c:	bf08      	it	eq
 800a55e:	2320      	moveq	r3, #32
 800a560:	4618      	mov	r0, r3
 800a562:	4770      	bx	lr
 800a564:	2300      	movs	r3, #0
 800a566:	e7e4      	b.n	800a532 <__hi0bits+0xa>

0800a568 <__lo0bits>:
 800a568:	6803      	ldr	r3, [r0, #0]
 800a56a:	f013 0207 	ands.w	r2, r3, #7
 800a56e:	d00c      	beq.n	800a58a <__lo0bits+0x22>
 800a570:	07d9      	lsls	r1, r3, #31
 800a572:	d422      	bmi.n	800a5ba <__lo0bits+0x52>
 800a574:	079a      	lsls	r2, r3, #30
 800a576:	bf49      	itett	mi
 800a578:	085b      	lsrmi	r3, r3, #1
 800a57a:	089b      	lsrpl	r3, r3, #2
 800a57c:	6003      	strmi	r3, [r0, #0]
 800a57e:	2201      	movmi	r2, #1
 800a580:	bf5c      	itt	pl
 800a582:	6003      	strpl	r3, [r0, #0]
 800a584:	2202      	movpl	r2, #2
 800a586:	4610      	mov	r0, r2
 800a588:	4770      	bx	lr
 800a58a:	b299      	uxth	r1, r3
 800a58c:	b909      	cbnz	r1, 800a592 <__lo0bits+0x2a>
 800a58e:	0c1b      	lsrs	r3, r3, #16
 800a590:	2210      	movs	r2, #16
 800a592:	b2d9      	uxtb	r1, r3
 800a594:	b909      	cbnz	r1, 800a59a <__lo0bits+0x32>
 800a596:	3208      	adds	r2, #8
 800a598:	0a1b      	lsrs	r3, r3, #8
 800a59a:	0719      	lsls	r1, r3, #28
 800a59c:	bf04      	itt	eq
 800a59e:	091b      	lsreq	r3, r3, #4
 800a5a0:	3204      	addeq	r2, #4
 800a5a2:	0799      	lsls	r1, r3, #30
 800a5a4:	bf04      	itt	eq
 800a5a6:	089b      	lsreq	r3, r3, #2
 800a5a8:	3202      	addeq	r2, #2
 800a5aa:	07d9      	lsls	r1, r3, #31
 800a5ac:	d403      	bmi.n	800a5b6 <__lo0bits+0x4e>
 800a5ae:	085b      	lsrs	r3, r3, #1
 800a5b0:	f102 0201 	add.w	r2, r2, #1
 800a5b4:	d003      	beq.n	800a5be <__lo0bits+0x56>
 800a5b6:	6003      	str	r3, [r0, #0]
 800a5b8:	e7e5      	b.n	800a586 <__lo0bits+0x1e>
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	e7e3      	b.n	800a586 <__lo0bits+0x1e>
 800a5be:	2220      	movs	r2, #32
 800a5c0:	e7e1      	b.n	800a586 <__lo0bits+0x1e>
	...

0800a5c4 <__i2b>:
 800a5c4:	b510      	push	{r4, lr}
 800a5c6:	460c      	mov	r4, r1
 800a5c8:	2101      	movs	r1, #1
 800a5ca:	f7ff febb 	bl	800a344 <_Balloc>
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	b928      	cbnz	r0, 800a5de <__i2b+0x1a>
 800a5d2:	4b05      	ldr	r3, [pc, #20]	; (800a5e8 <__i2b+0x24>)
 800a5d4:	4805      	ldr	r0, [pc, #20]	; (800a5ec <__i2b+0x28>)
 800a5d6:	f240 1145 	movw	r1, #325	; 0x145
 800a5da:	f001 fcd5 	bl	800bf88 <__assert_func>
 800a5de:	2301      	movs	r3, #1
 800a5e0:	6144      	str	r4, [r0, #20]
 800a5e2:	6103      	str	r3, [r0, #16]
 800a5e4:	bd10      	pop	{r4, pc}
 800a5e6:	bf00      	nop
 800a5e8:	0800cc0d 	.word	0x0800cc0d
 800a5ec:	0800cc1e 	.word	0x0800cc1e

0800a5f0 <__multiply>:
 800a5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f4:	4691      	mov	r9, r2
 800a5f6:	690a      	ldr	r2, [r1, #16]
 800a5f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	bfb8      	it	lt
 800a600:	460b      	movlt	r3, r1
 800a602:	460c      	mov	r4, r1
 800a604:	bfbc      	itt	lt
 800a606:	464c      	movlt	r4, r9
 800a608:	4699      	movlt	r9, r3
 800a60a:	6927      	ldr	r7, [r4, #16]
 800a60c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a610:	68a3      	ldr	r3, [r4, #8]
 800a612:	6861      	ldr	r1, [r4, #4]
 800a614:	eb07 060a 	add.w	r6, r7, sl
 800a618:	42b3      	cmp	r3, r6
 800a61a:	b085      	sub	sp, #20
 800a61c:	bfb8      	it	lt
 800a61e:	3101      	addlt	r1, #1
 800a620:	f7ff fe90 	bl	800a344 <_Balloc>
 800a624:	b930      	cbnz	r0, 800a634 <__multiply+0x44>
 800a626:	4602      	mov	r2, r0
 800a628:	4b44      	ldr	r3, [pc, #272]	; (800a73c <__multiply+0x14c>)
 800a62a:	4845      	ldr	r0, [pc, #276]	; (800a740 <__multiply+0x150>)
 800a62c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a630:	f001 fcaa 	bl	800bf88 <__assert_func>
 800a634:	f100 0514 	add.w	r5, r0, #20
 800a638:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a63c:	462b      	mov	r3, r5
 800a63e:	2200      	movs	r2, #0
 800a640:	4543      	cmp	r3, r8
 800a642:	d321      	bcc.n	800a688 <__multiply+0x98>
 800a644:	f104 0314 	add.w	r3, r4, #20
 800a648:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a64c:	f109 0314 	add.w	r3, r9, #20
 800a650:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a654:	9202      	str	r2, [sp, #8]
 800a656:	1b3a      	subs	r2, r7, r4
 800a658:	3a15      	subs	r2, #21
 800a65a:	f022 0203 	bic.w	r2, r2, #3
 800a65e:	3204      	adds	r2, #4
 800a660:	f104 0115 	add.w	r1, r4, #21
 800a664:	428f      	cmp	r7, r1
 800a666:	bf38      	it	cc
 800a668:	2204      	movcc	r2, #4
 800a66a:	9201      	str	r2, [sp, #4]
 800a66c:	9a02      	ldr	r2, [sp, #8]
 800a66e:	9303      	str	r3, [sp, #12]
 800a670:	429a      	cmp	r2, r3
 800a672:	d80c      	bhi.n	800a68e <__multiply+0x9e>
 800a674:	2e00      	cmp	r6, #0
 800a676:	dd03      	ble.n	800a680 <__multiply+0x90>
 800a678:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d05b      	beq.n	800a738 <__multiply+0x148>
 800a680:	6106      	str	r6, [r0, #16]
 800a682:	b005      	add	sp, #20
 800a684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a688:	f843 2b04 	str.w	r2, [r3], #4
 800a68c:	e7d8      	b.n	800a640 <__multiply+0x50>
 800a68e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a692:	f1ba 0f00 	cmp.w	sl, #0
 800a696:	d024      	beq.n	800a6e2 <__multiply+0xf2>
 800a698:	f104 0e14 	add.w	lr, r4, #20
 800a69c:	46a9      	mov	r9, r5
 800a69e:	f04f 0c00 	mov.w	ip, #0
 800a6a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a6a6:	f8d9 1000 	ldr.w	r1, [r9]
 800a6aa:	fa1f fb82 	uxth.w	fp, r2
 800a6ae:	b289      	uxth	r1, r1
 800a6b0:	fb0a 110b 	mla	r1, sl, fp, r1
 800a6b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a6b8:	f8d9 2000 	ldr.w	r2, [r9]
 800a6bc:	4461      	add	r1, ip
 800a6be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a6c2:	fb0a c20b 	mla	r2, sl, fp, ip
 800a6c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a6ca:	b289      	uxth	r1, r1
 800a6cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a6d0:	4577      	cmp	r7, lr
 800a6d2:	f849 1b04 	str.w	r1, [r9], #4
 800a6d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a6da:	d8e2      	bhi.n	800a6a2 <__multiply+0xb2>
 800a6dc:	9a01      	ldr	r2, [sp, #4]
 800a6de:	f845 c002 	str.w	ip, [r5, r2]
 800a6e2:	9a03      	ldr	r2, [sp, #12]
 800a6e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a6e8:	3304      	adds	r3, #4
 800a6ea:	f1b9 0f00 	cmp.w	r9, #0
 800a6ee:	d021      	beq.n	800a734 <__multiply+0x144>
 800a6f0:	6829      	ldr	r1, [r5, #0]
 800a6f2:	f104 0c14 	add.w	ip, r4, #20
 800a6f6:	46ae      	mov	lr, r5
 800a6f8:	f04f 0a00 	mov.w	sl, #0
 800a6fc:	f8bc b000 	ldrh.w	fp, [ip]
 800a700:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a704:	fb09 220b 	mla	r2, r9, fp, r2
 800a708:	4452      	add	r2, sl
 800a70a:	b289      	uxth	r1, r1
 800a70c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a710:	f84e 1b04 	str.w	r1, [lr], #4
 800a714:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a718:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a71c:	f8be 1000 	ldrh.w	r1, [lr]
 800a720:	fb09 110a 	mla	r1, r9, sl, r1
 800a724:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a728:	4567      	cmp	r7, ip
 800a72a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a72e:	d8e5      	bhi.n	800a6fc <__multiply+0x10c>
 800a730:	9a01      	ldr	r2, [sp, #4]
 800a732:	50a9      	str	r1, [r5, r2]
 800a734:	3504      	adds	r5, #4
 800a736:	e799      	b.n	800a66c <__multiply+0x7c>
 800a738:	3e01      	subs	r6, #1
 800a73a:	e79b      	b.n	800a674 <__multiply+0x84>
 800a73c:	0800cc0d 	.word	0x0800cc0d
 800a740:	0800cc1e 	.word	0x0800cc1e

0800a744 <__pow5mult>:
 800a744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a748:	4615      	mov	r5, r2
 800a74a:	f012 0203 	ands.w	r2, r2, #3
 800a74e:	4606      	mov	r6, r0
 800a750:	460f      	mov	r7, r1
 800a752:	d007      	beq.n	800a764 <__pow5mult+0x20>
 800a754:	4c25      	ldr	r4, [pc, #148]	; (800a7ec <__pow5mult+0xa8>)
 800a756:	3a01      	subs	r2, #1
 800a758:	2300      	movs	r3, #0
 800a75a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a75e:	f7ff fe53 	bl	800a408 <__multadd>
 800a762:	4607      	mov	r7, r0
 800a764:	10ad      	asrs	r5, r5, #2
 800a766:	d03d      	beq.n	800a7e4 <__pow5mult+0xa0>
 800a768:	69f4      	ldr	r4, [r6, #28]
 800a76a:	b97c      	cbnz	r4, 800a78c <__pow5mult+0x48>
 800a76c:	2010      	movs	r0, #16
 800a76e:	f7ff fd35 	bl	800a1dc <malloc>
 800a772:	4602      	mov	r2, r0
 800a774:	61f0      	str	r0, [r6, #28]
 800a776:	b928      	cbnz	r0, 800a784 <__pow5mult+0x40>
 800a778:	4b1d      	ldr	r3, [pc, #116]	; (800a7f0 <__pow5mult+0xac>)
 800a77a:	481e      	ldr	r0, [pc, #120]	; (800a7f4 <__pow5mult+0xb0>)
 800a77c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a780:	f001 fc02 	bl	800bf88 <__assert_func>
 800a784:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a788:	6004      	str	r4, [r0, #0]
 800a78a:	60c4      	str	r4, [r0, #12]
 800a78c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a790:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a794:	b94c      	cbnz	r4, 800a7aa <__pow5mult+0x66>
 800a796:	f240 2171 	movw	r1, #625	; 0x271
 800a79a:	4630      	mov	r0, r6
 800a79c:	f7ff ff12 	bl	800a5c4 <__i2b>
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7a6:	4604      	mov	r4, r0
 800a7a8:	6003      	str	r3, [r0, #0]
 800a7aa:	f04f 0900 	mov.w	r9, #0
 800a7ae:	07eb      	lsls	r3, r5, #31
 800a7b0:	d50a      	bpl.n	800a7c8 <__pow5mult+0x84>
 800a7b2:	4639      	mov	r1, r7
 800a7b4:	4622      	mov	r2, r4
 800a7b6:	4630      	mov	r0, r6
 800a7b8:	f7ff ff1a 	bl	800a5f0 <__multiply>
 800a7bc:	4639      	mov	r1, r7
 800a7be:	4680      	mov	r8, r0
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	f7ff fdff 	bl	800a3c4 <_Bfree>
 800a7c6:	4647      	mov	r7, r8
 800a7c8:	106d      	asrs	r5, r5, #1
 800a7ca:	d00b      	beq.n	800a7e4 <__pow5mult+0xa0>
 800a7cc:	6820      	ldr	r0, [r4, #0]
 800a7ce:	b938      	cbnz	r0, 800a7e0 <__pow5mult+0x9c>
 800a7d0:	4622      	mov	r2, r4
 800a7d2:	4621      	mov	r1, r4
 800a7d4:	4630      	mov	r0, r6
 800a7d6:	f7ff ff0b 	bl	800a5f0 <__multiply>
 800a7da:	6020      	str	r0, [r4, #0]
 800a7dc:	f8c0 9000 	str.w	r9, [r0]
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	e7e4      	b.n	800a7ae <__pow5mult+0x6a>
 800a7e4:	4638      	mov	r0, r7
 800a7e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7ea:	bf00      	nop
 800a7ec:	0800cd68 	.word	0x0800cd68
 800a7f0:	0800cb9e 	.word	0x0800cb9e
 800a7f4:	0800cc1e 	.word	0x0800cc1e

0800a7f8 <__lshift>:
 800a7f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7fc:	460c      	mov	r4, r1
 800a7fe:	6849      	ldr	r1, [r1, #4]
 800a800:	6923      	ldr	r3, [r4, #16]
 800a802:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a806:	68a3      	ldr	r3, [r4, #8]
 800a808:	4607      	mov	r7, r0
 800a80a:	4691      	mov	r9, r2
 800a80c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a810:	f108 0601 	add.w	r6, r8, #1
 800a814:	42b3      	cmp	r3, r6
 800a816:	db0b      	blt.n	800a830 <__lshift+0x38>
 800a818:	4638      	mov	r0, r7
 800a81a:	f7ff fd93 	bl	800a344 <_Balloc>
 800a81e:	4605      	mov	r5, r0
 800a820:	b948      	cbnz	r0, 800a836 <__lshift+0x3e>
 800a822:	4602      	mov	r2, r0
 800a824:	4b28      	ldr	r3, [pc, #160]	; (800a8c8 <__lshift+0xd0>)
 800a826:	4829      	ldr	r0, [pc, #164]	; (800a8cc <__lshift+0xd4>)
 800a828:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a82c:	f001 fbac 	bl	800bf88 <__assert_func>
 800a830:	3101      	adds	r1, #1
 800a832:	005b      	lsls	r3, r3, #1
 800a834:	e7ee      	b.n	800a814 <__lshift+0x1c>
 800a836:	2300      	movs	r3, #0
 800a838:	f100 0114 	add.w	r1, r0, #20
 800a83c:	f100 0210 	add.w	r2, r0, #16
 800a840:	4618      	mov	r0, r3
 800a842:	4553      	cmp	r3, sl
 800a844:	db33      	blt.n	800a8ae <__lshift+0xb6>
 800a846:	6920      	ldr	r0, [r4, #16]
 800a848:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a84c:	f104 0314 	add.w	r3, r4, #20
 800a850:	f019 091f 	ands.w	r9, r9, #31
 800a854:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a858:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a85c:	d02b      	beq.n	800a8b6 <__lshift+0xbe>
 800a85e:	f1c9 0e20 	rsb	lr, r9, #32
 800a862:	468a      	mov	sl, r1
 800a864:	2200      	movs	r2, #0
 800a866:	6818      	ldr	r0, [r3, #0]
 800a868:	fa00 f009 	lsl.w	r0, r0, r9
 800a86c:	4310      	orrs	r0, r2
 800a86e:	f84a 0b04 	str.w	r0, [sl], #4
 800a872:	f853 2b04 	ldr.w	r2, [r3], #4
 800a876:	459c      	cmp	ip, r3
 800a878:	fa22 f20e 	lsr.w	r2, r2, lr
 800a87c:	d8f3      	bhi.n	800a866 <__lshift+0x6e>
 800a87e:	ebac 0304 	sub.w	r3, ip, r4
 800a882:	3b15      	subs	r3, #21
 800a884:	f023 0303 	bic.w	r3, r3, #3
 800a888:	3304      	adds	r3, #4
 800a88a:	f104 0015 	add.w	r0, r4, #21
 800a88e:	4584      	cmp	ip, r0
 800a890:	bf38      	it	cc
 800a892:	2304      	movcc	r3, #4
 800a894:	50ca      	str	r2, [r1, r3]
 800a896:	b10a      	cbz	r2, 800a89c <__lshift+0xa4>
 800a898:	f108 0602 	add.w	r6, r8, #2
 800a89c:	3e01      	subs	r6, #1
 800a89e:	4638      	mov	r0, r7
 800a8a0:	612e      	str	r6, [r5, #16]
 800a8a2:	4621      	mov	r1, r4
 800a8a4:	f7ff fd8e 	bl	800a3c4 <_Bfree>
 800a8a8:	4628      	mov	r0, r5
 800a8aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ae:	f842 0f04 	str.w	r0, [r2, #4]!
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	e7c5      	b.n	800a842 <__lshift+0x4a>
 800a8b6:	3904      	subs	r1, #4
 800a8b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8bc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a8c0:	459c      	cmp	ip, r3
 800a8c2:	d8f9      	bhi.n	800a8b8 <__lshift+0xc0>
 800a8c4:	e7ea      	b.n	800a89c <__lshift+0xa4>
 800a8c6:	bf00      	nop
 800a8c8:	0800cc0d 	.word	0x0800cc0d
 800a8cc:	0800cc1e 	.word	0x0800cc1e

0800a8d0 <__mcmp>:
 800a8d0:	b530      	push	{r4, r5, lr}
 800a8d2:	6902      	ldr	r2, [r0, #16]
 800a8d4:	690c      	ldr	r4, [r1, #16]
 800a8d6:	1b12      	subs	r2, r2, r4
 800a8d8:	d10e      	bne.n	800a8f8 <__mcmp+0x28>
 800a8da:	f100 0314 	add.w	r3, r0, #20
 800a8de:	3114      	adds	r1, #20
 800a8e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a8e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a8e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a8ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a8f0:	42a5      	cmp	r5, r4
 800a8f2:	d003      	beq.n	800a8fc <__mcmp+0x2c>
 800a8f4:	d305      	bcc.n	800a902 <__mcmp+0x32>
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	4610      	mov	r0, r2
 800a8fa:	bd30      	pop	{r4, r5, pc}
 800a8fc:	4283      	cmp	r3, r0
 800a8fe:	d3f3      	bcc.n	800a8e8 <__mcmp+0x18>
 800a900:	e7fa      	b.n	800a8f8 <__mcmp+0x28>
 800a902:	f04f 32ff 	mov.w	r2, #4294967295
 800a906:	e7f7      	b.n	800a8f8 <__mcmp+0x28>

0800a908 <__mdiff>:
 800a908:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a90c:	460c      	mov	r4, r1
 800a90e:	4606      	mov	r6, r0
 800a910:	4611      	mov	r1, r2
 800a912:	4620      	mov	r0, r4
 800a914:	4690      	mov	r8, r2
 800a916:	f7ff ffdb 	bl	800a8d0 <__mcmp>
 800a91a:	1e05      	subs	r5, r0, #0
 800a91c:	d110      	bne.n	800a940 <__mdiff+0x38>
 800a91e:	4629      	mov	r1, r5
 800a920:	4630      	mov	r0, r6
 800a922:	f7ff fd0f 	bl	800a344 <_Balloc>
 800a926:	b930      	cbnz	r0, 800a936 <__mdiff+0x2e>
 800a928:	4b3a      	ldr	r3, [pc, #232]	; (800aa14 <__mdiff+0x10c>)
 800a92a:	4602      	mov	r2, r0
 800a92c:	f240 2137 	movw	r1, #567	; 0x237
 800a930:	4839      	ldr	r0, [pc, #228]	; (800aa18 <__mdiff+0x110>)
 800a932:	f001 fb29 	bl	800bf88 <__assert_func>
 800a936:	2301      	movs	r3, #1
 800a938:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a93c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a940:	bfa4      	itt	ge
 800a942:	4643      	movge	r3, r8
 800a944:	46a0      	movge	r8, r4
 800a946:	4630      	mov	r0, r6
 800a948:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a94c:	bfa6      	itte	ge
 800a94e:	461c      	movge	r4, r3
 800a950:	2500      	movge	r5, #0
 800a952:	2501      	movlt	r5, #1
 800a954:	f7ff fcf6 	bl	800a344 <_Balloc>
 800a958:	b920      	cbnz	r0, 800a964 <__mdiff+0x5c>
 800a95a:	4b2e      	ldr	r3, [pc, #184]	; (800aa14 <__mdiff+0x10c>)
 800a95c:	4602      	mov	r2, r0
 800a95e:	f240 2145 	movw	r1, #581	; 0x245
 800a962:	e7e5      	b.n	800a930 <__mdiff+0x28>
 800a964:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a968:	6926      	ldr	r6, [r4, #16]
 800a96a:	60c5      	str	r5, [r0, #12]
 800a96c:	f104 0914 	add.w	r9, r4, #20
 800a970:	f108 0514 	add.w	r5, r8, #20
 800a974:	f100 0e14 	add.w	lr, r0, #20
 800a978:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a97c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a980:	f108 0210 	add.w	r2, r8, #16
 800a984:	46f2      	mov	sl, lr
 800a986:	2100      	movs	r1, #0
 800a988:	f859 3b04 	ldr.w	r3, [r9], #4
 800a98c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a990:	fa11 f88b 	uxtah	r8, r1, fp
 800a994:	b299      	uxth	r1, r3
 800a996:	0c1b      	lsrs	r3, r3, #16
 800a998:	eba8 0801 	sub.w	r8, r8, r1
 800a99c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a9a0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a9a4:	fa1f f888 	uxth.w	r8, r8
 800a9a8:	1419      	asrs	r1, r3, #16
 800a9aa:	454e      	cmp	r6, r9
 800a9ac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a9b0:	f84a 3b04 	str.w	r3, [sl], #4
 800a9b4:	d8e8      	bhi.n	800a988 <__mdiff+0x80>
 800a9b6:	1b33      	subs	r3, r6, r4
 800a9b8:	3b15      	subs	r3, #21
 800a9ba:	f023 0303 	bic.w	r3, r3, #3
 800a9be:	3304      	adds	r3, #4
 800a9c0:	3415      	adds	r4, #21
 800a9c2:	42a6      	cmp	r6, r4
 800a9c4:	bf38      	it	cc
 800a9c6:	2304      	movcc	r3, #4
 800a9c8:	441d      	add	r5, r3
 800a9ca:	4473      	add	r3, lr
 800a9cc:	469e      	mov	lr, r3
 800a9ce:	462e      	mov	r6, r5
 800a9d0:	4566      	cmp	r6, ip
 800a9d2:	d30e      	bcc.n	800a9f2 <__mdiff+0xea>
 800a9d4:	f10c 0203 	add.w	r2, ip, #3
 800a9d8:	1b52      	subs	r2, r2, r5
 800a9da:	f022 0203 	bic.w	r2, r2, #3
 800a9de:	3d03      	subs	r5, #3
 800a9e0:	45ac      	cmp	ip, r5
 800a9e2:	bf38      	it	cc
 800a9e4:	2200      	movcc	r2, #0
 800a9e6:	4413      	add	r3, r2
 800a9e8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a9ec:	b17a      	cbz	r2, 800aa0e <__mdiff+0x106>
 800a9ee:	6107      	str	r7, [r0, #16]
 800a9f0:	e7a4      	b.n	800a93c <__mdiff+0x34>
 800a9f2:	f856 8b04 	ldr.w	r8, [r6], #4
 800a9f6:	fa11 f288 	uxtah	r2, r1, r8
 800a9fa:	1414      	asrs	r4, r2, #16
 800a9fc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aa00:	b292      	uxth	r2, r2
 800aa02:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aa06:	f84e 2b04 	str.w	r2, [lr], #4
 800aa0a:	1421      	asrs	r1, r4, #16
 800aa0c:	e7e0      	b.n	800a9d0 <__mdiff+0xc8>
 800aa0e:	3f01      	subs	r7, #1
 800aa10:	e7ea      	b.n	800a9e8 <__mdiff+0xe0>
 800aa12:	bf00      	nop
 800aa14:	0800cc0d 	.word	0x0800cc0d
 800aa18:	0800cc1e 	.word	0x0800cc1e

0800aa1c <__ulp>:
 800aa1c:	b082      	sub	sp, #8
 800aa1e:	ed8d 0b00 	vstr	d0, [sp]
 800aa22:	9a01      	ldr	r2, [sp, #4]
 800aa24:	4b0f      	ldr	r3, [pc, #60]	; (800aa64 <__ulp+0x48>)
 800aa26:	4013      	ands	r3, r2
 800aa28:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	dc08      	bgt.n	800aa42 <__ulp+0x26>
 800aa30:	425b      	negs	r3, r3
 800aa32:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800aa36:	ea4f 5223 	mov.w	r2, r3, asr #20
 800aa3a:	da04      	bge.n	800aa46 <__ulp+0x2a>
 800aa3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aa40:	4113      	asrs	r3, r2
 800aa42:	2200      	movs	r2, #0
 800aa44:	e008      	b.n	800aa58 <__ulp+0x3c>
 800aa46:	f1a2 0314 	sub.w	r3, r2, #20
 800aa4a:	2b1e      	cmp	r3, #30
 800aa4c:	bfda      	itte	le
 800aa4e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800aa52:	40da      	lsrle	r2, r3
 800aa54:	2201      	movgt	r2, #1
 800aa56:	2300      	movs	r3, #0
 800aa58:	4619      	mov	r1, r3
 800aa5a:	4610      	mov	r0, r2
 800aa5c:	ec41 0b10 	vmov	d0, r0, r1
 800aa60:	b002      	add	sp, #8
 800aa62:	4770      	bx	lr
 800aa64:	7ff00000 	.word	0x7ff00000

0800aa68 <__b2d>:
 800aa68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa6c:	6906      	ldr	r6, [r0, #16]
 800aa6e:	f100 0814 	add.w	r8, r0, #20
 800aa72:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800aa76:	1f37      	subs	r7, r6, #4
 800aa78:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aa7c:	4610      	mov	r0, r2
 800aa7e:	f7ff fd53 	bl	800a528 <__hi0bits>
 800aa82:	f1c0 0320 	rsb	r3, r0, #32
 800aa86:	280a      	cmp	r0, #10
 800aa88:	600b      	str	r3, [r1, #0]
 800aa8a:	491b      	ldr	r1, [pc, #108]	; (800aaf8 <__b2d+0x90>)
 800aa8c:	dc15      	bgt.n	800aaba <__b2d+0x52>
 800aa8e:	f1c0 0c0b 	rsb	ip, r0, #11
 800aa92:	fa22 f30c 	lsr.w	r3, r2, ip
 800aa96:	45b8      	cmp	r8, r7
 800aa98:	ea43 0501 	orr.w	r5, r3, r1
 800aa9c:	bf34      	ite	cc
 800aa9e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aaa2:	2300      	movcs	r3, #0
 800aaa4:	3015      	adds	r0, #21
 800aaa6:	fa02 f000 	lsl.w	r0, r2, r0
 800aaaa:	fa23 f30c 	lsr.w	r3, r3, ip
 800aaae:	4303      	orrs	r3, r0
 800aab0:	461c      	mov	r4, r3
 800aab2:	ec45 4b10 	vmov	d0, r4, r5
 800aab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaba:	45b8      	cmp	r8, r7
 800aabc:	bf3a      	itte	cc
 800aabe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aac2:	f1a6 0708 	subcc.w	r7, r6, #8
 800aac6:	2300      	movcs	r3, #0
 800aac8:	380b      	subs	r0, #11
 800aaca:	d012      	beq.n	800aaf2 <__b2d+0x8a>
 800aacc:	f1c0 0120 	rsb	r1, r0, #32
 800aad0:	fa23 f401 	lsr.w	r4, r3, r1
 800aad4:	4082      	lsls	r2, r0
 800aad6:	4322      	orrs	r2, r4
 800aad8:	4547      	cmp	r7, r8
 800aada:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800aade:	bf8c      	ite	hi
 800aae0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800aae4:	2200      	movls	r2, #0
 800aae6:	4083      	lsls	r3, r0
 800aae8:	40ca      	lsrs	r2, r1
 800aaea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	e7de      	b.n	800aab0 <__b2d+0x48>
 800aaf2:	ea42 0501 	orr.w	r5, r2, r1
 800aaf6:	e7db      	b.n	800aab0 <__b2d+0x48>
 800aaf8:	3ff00000 	.word	0x3ff00000

0800aafc <__d2b>:
 800aafc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab00:	460f      	mov	r7, r1
 800ab02:	2101      	movs	r1, #1
 800ab04:	ec59 8b10 	vmov	r8, r9, d0
 800ab08:	4616      	mov	r6, r2
 800ab0a:	f7ff fc1b 	bl	800a344 <_Balloc>
 800ab0e:	4604      	mov	r4, r0
 800ab10:	b930      	cbnz	r0, 800ab20 <__d2b+0x24>
 800ab12:	4602      	mov	r2, r0
 800ab14:	4b24      	ldr	r3, [pc, #144]	; (800aba8 <__d2b+0xac>)
 800ab16:	4825      	ldr	r0, [pc, #148]	; (800abac <__d2b+0xb0>)
 800ab18:	f240 310f 	movw	r1, #783	; 0x30f
 800ab1c:	f001 fa34 	bl	800bf88 <__assert_func>
 800ab20:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ab24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab28:	bb2d      	cbnz	r5, 800ab76 <__d2b+0x7a>
 800ab2a:	9301      	str	r3, [sp, #4]
 800ab2c:	f1b8 0300 	subs.w	r3, r8, #0
 800ab30:	d026      	beq.n	800ab80 <__d2b+0x84>
 800ab32:	4668      	mov	r0, sp
 800ab34:	9300      	str	r3, [sp, #0]
 800ab36:	f7ff fd17 	bl	800a568 <__lo0bits>
 800ab3a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ab3e:	b1e8      	cbz	r0, 800ab7c <__d2b+0x80>
 800ab40:	f1c0 0320 	rsb	r3, r0, #32
 800ab44:	fa02 f303 	lsl.w	r3, r2, r3
 800ab48:	430b      	orrs	r3, r1
 800ab4a:	40c2      	lsrs	r2, r0
 800ab4c:	6163      	str	r3, [r4, #20]
 800ab4e:	9201      	str	r2, [sp, #4]
 800ab50:	9b01      	ldr	r3, [sp, #4]
 800ab52:	61a3      	str	r3, [r4, #24]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	bf14      	ite	ne
 800ab58:	2202      	movne	r2, #2
 800ab5a:	2201      	moveq	r2, #1
 800ab5c:	6122      	str	r2, [r4, #16]
 800ab5e:	b1bd      	cbz	r5, 800ab90 <__d2b+0x94>
 800ab60:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ab64:	4405      	add	r5, r0
 800ab66:	603d      	str	r5, [r7, #0]
 800ab68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab6c:	6030      	str	r0, [r6, #0]
 800ab6e:	4620      	mov	r0, r4
 800ab70:	b003      	add	sp, #12
 800ab72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab7a:	e7d6      	b.n	800ab2a <__d2b+0x2e>
 800ab7c:	6161      	str	r1, [r4, #20]
 800ab7e:	e7e7      	b.n	800ab50 <__d2b+0x54>
 800ab80:	a801      	add	r0, sp, #4
 800ab82:	f7ff fcf1 	bl	800a568 <__lo0bits>
 800ab86:	9b01      	ldr	r3, [sp, #4]
 800ab88:	6163      	str	r3, [r4, #20]
 800ab8a:	3020      	adds	r0, #32
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	e7e5      	b.n	800ab5c <__d2b+0x60>
 800ab90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab98:	6038      	str	r0, [r7, #0]
 800ab9a:	6918      	ldr	r0, [r3, #16]
 800ab9c:	f7ff fcc4 	bl	800a528 <__hi0bits>
 800aba0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aba4:	e7e2      	b.n	800ab6c <__d2b+0x70>
 800aba6:	bf00      	nop
 800aba8:	0800cc0d 	.word	0x0800cc0d
 800abac:	0800cc1e 	.word	0x0800cc1e

0800abb0 <__ratio>:
 800abb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb4:	4688      	mov	r8, r1
 800abb6:	4669      	mov	r1, sp
 800abb8:	4681      	mov	r9, r0
 800abba:	f7ff ff55 	bl	800aa68 <__b2d>
 800abbe:	a901      	add	r1, sp, #4
 800abc0:	4640      	mov	r0, r8
 800abc2:	ec55 4b10 	vmov	r4, r5, d0
 800abc6:	f7ff ff4f 	bl	800aa68 <__b2d>
 800abca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800abce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800abd2:	eba3 0c02 	sub.w	ip, r3, r2
 800abd6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800abda:	1a9b      	subs	r3, r3, r2
 800abdc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800abe0:	ec51 0b10 	vmov	r0, r1, d0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	bfd6      	itet	le
 800abe8:	460a      	movle	r2, r1
 800abea:	462a      	movgt	r2, r5
 800abec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800abf0:	468b      	mov	fp, r1
 800abf2:	462f      	mov	r7, r5
 800abf4:	bfd4      	ite	le
 800abf6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800abfa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800abfe:	4620      	mov	r0, r4
 800ac00:	ee10 2a10 	vmov	r2, s0
 800ac04:	465b      	mov	r3, fp
 800ac06:	4639      	mov	r1, r7
 800ac08:	f7f5 fe20 	bl	800084c <__aeabi_ddiv>
 800ac0c:	ec41 0b10 	vmov	d0, r0, r1
 800ac10:	b003      	add	sp, #12
 800ac12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ac16 <__copybits>:
 800ac16:	3901      	subs	r1, #1
 800ac18:	b570      	push	{r4, r5, r6, lr}
 800ac1a:	1149      	asrs	r1, r1, #5
 800ac1c:	6914      	ldr	r4, [r2, #16]
 800ac1e:	3101      	adds	r1, #1
 800ac20:	f102 0314 	add.w	r3, r2, #20
 800ac24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ac28:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ac2c:	1f05      	subs	r5, r0, #4
 800ac2e:	42a3      	cmp	r3, r4
 800ac30:	d30c      	bcc.n	800ac4c <__copybits+0x36>
 800ac32:	1aa3      	subs	r3, r4, r2
 800ac34:	3b11      	subs	r3, #17
 800ac36:	f023 0303 	bic.w	r3, r3, #3
 800ac3a:	3211      	adds	r2, #17
 800ac3c:	42a2      	cmp	r2, r4
 800ac3e:	bf88      	it	hi
 800ac40:	2300      	movhi	r3, #0
 800ac42:	4418      	add	r0, r3
 800ac44:	2300      	movs	r3, #0
 800ac46:	4288      	cmp	r0, r1
 800ac48:	d305      	bcc.n	800ac56 <__copybits+0x40>
 800ac4a:	bd70      	pop	{r4, r5, r6, pc}
 800ac4c:	f853 6b04 	ldr.w	r6, [r3], #4
 800ac50:	f845 6f04 	str.w	r6, [r5, #4]!
 800ac54:	e7eb      	b.n	800ac2e <__copybits+0x18>
 800ac56:	f840 3b04 	str.w	r3, [r0], #4
 800ac5a:	e7f4      	b.n	800ac46 <__copybits+0x30>

0800ac5c <__any_on>:
 800ac5c:	f100 0214 	add.w	r2, r0, #20
 800ac60:	6900      	ldr	r0, [r0, #16]
 800ac62:	114b      	asrs	r3, r1, #5
 800ac64:	4298      	cmp	r0, r3
 800ac66:	b510      	push	{r4, lr}
 800ac68:	db11      	blt.n	800ac8e <__any_on+0x32>
 800ac6a:	dd0a      	ble.n	800ac82 <__any_on+0x26>
 800ac6c:	f011 011f 	ands.w	r1, r1, #31
 800ac70:	d007      	beq.n	800ac82 <__any_on+0x26>
 800ac72:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ac76:	fa24 f001 	lsr.w	r0, r4, r1
 800ac7a:	fa00 f101 	lsl.w	r1, r0, r1
 800ac7e:	428c      	cmp	r4, r1
 800ac80:	d10b      	bne.n	800ac9a <__any_on+0x3e>
 800ac82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d803      	bhi.n	800ac92 <__any_on+0x36>
 800ac8a:	2000      	movs	r0, #0
 800ac8c:	bd10      	pop	{r4, pc}
 800ac8e:	4603      	mov	r3, r0
 800ac90:	e7f7      	b.n	800ac82 <__any_on+0x26>
 800ac92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac96:	2900      	cmp	r1, #0
 800ac98:	d0f5      	beq.n	800ac86 <__any_on+0x2a>
 800ac9a:	2001      	movs	r0, #1
 800ac9c:	e7f6      	b.n	800ac8c <__any_on+0x30>

0800ac9e <sulp>:
 800ac9e:	b570      	push	{r4, r5, r6, lr}
 800aca0:	4604      	mov	r4, r0
 800aca2:	460d      	mov	r5, r1
 800aca4:	ec45 4b10 	vmov	d0, r4, r5
 800aca8:	4616      	mov	r6, r2
 800acaa:	f7ff feb7 	bl	800aa1c <__ulp>
 800acae:	ec51 0b10 	vmov	r0, r1, d0
 800acb2:	b17e      	cbz	r6, 800acd4 <sulp+0x36>
 800acb4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800acb8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	dd09      	ble.n	800acd4 <sulp+0x36>
 800acc0:	051b      	lsls	r3, r3, #20
 800acc2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800acc6:	2400      	movs	r4, #0
 800acc8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800accc:	4622      	mov	r2, r4
 800acce:	462b      	mov	r3, r5
 800acd0:	f7f5 fc92 	bl	80005f8 <__aeabi_dmul>
 800acd4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800acd8 <_strtod_l>:
 800acd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acdc:	ed2d 8b02 	vpush	{d8}
 800ace0:	b09b      	sub	sp, #108	; 0x6c
 800ace2:	4604      	mov	r4, r0
 800ace4:	9213      	str	r2, [sp, #76]	; 0x4c
 800ace6:	2200      	movs	r2, #0
 800ace8:	9216      	str	r2, [sp, #88]	; 0x58
 800acea:	460d      	mov	r5, r1
 800acec:	f04f 0800 	mov.w	r8, #0
 800acf0:	f04f 0900 	mov.w	r9, #0
 800acf4:	460a      	mov	r2, r1
 800acf6:	9215      	str	r2, [sp, #84]	; 0x54
 800acf8:	7811      	ldrb	r1, [r2, #0]
 800acfa:	292b      	cmp	r1, #43	; 0x2b
 800acfc:	d04c      	beq.n	800ad98 <_strtod_l+0xc0>
 800acfe:	d83a      	bhi.n	800ad76 <_strtod_l+0x9e>
 800ad00:	290d      	cmp	r1, #13
 800ad02:	d834      	bhi.n	800ad6e <_strtod_l+0x96>
 800ad04:	2908      	cmp	r1, #8
 800ad06:	d834      	bhi.n	800ad72 <_strtod_l+0x9a>
 800ad08:	2900      	cmp	r1, #0
 800ad0a:	d03d      	beq.n	800ad88 <_strtod_l+0xb0>
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	920a      	str	r2, [sp, #40]	; 0x28
 800ad10:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800ad12:	7832      	ldrb	r2, [r6, #0]
 800ad14:	2a30      	cmp	r2, #48	; 0x30
 800ad16:	f040 80b4 	bne.w	800ae82 <_strtod_l+0x1aa>
 800ad1a:	7872      	ldrb	r2, [r6, #1]
 800ad1c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ad20:	2a58      	cmp	r2, #88	; 0x58
 800ad22:	d170      	bne.n	800ae06 <_strtod_l+0x12e>
 800ad24:	9302      	str	r3, [sp, #8]
 800ad26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad28:	9301      	str	r3, [sp, #4]
 800ad2a:	ab16      	add	r3, sp, #88	; 0x58
 800ad2c:	9300      	str	r3, [sp, #0]
 800ad2e:	4a8e      	ldr	r2, [pc, #568]	; (800af68 <_strtod_l+0x290>)
 800ad30:	ab17      	add	r3, sp, #92	; 0x5c
 800ad32:	a915      	add	r1, sp, #84	; 0x54
 800ad34:	4620      	mov	r0, r4
 800ad36:	f001 f9c3 	bl	800c0c0 <__gethex>
 800ad3a:	f010 070f 	ands.w	r7, r0, #15
 800ad3e:	4605      	mov	r5, r0
 800ad40:	d005      	beq.n	800ad4e <_strtod_l+0x76>
 800ad42:	2f06      	cmp	r7, #6
 800ad44:	d12a      	bne.n	800ad9c <_strtod_l+0xc4>
 800ad46:	3601      	adds	r6, #1
 800ad48:	2300      	movs	r3, #0
 800ad4a:	9615      	str	r6, [sp, #84]	; 0x54
 800ad4c:	930a      	str	r3, [sp, #40]	; 0x28
 800ad4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	f040 857f 	bne.w	800b854 <_strtod_l+0xb7c>
 800ad56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad58:	b1db      	cbz	r3, 800ad92 <_strtod_l+0xba>
 800ad5a:	4642      	mov	r2, r8
 800ad5c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ad60:	ec43 2b10 	vmov	d0, r2, r3
 800ad64:	b01b      	add	sp, #108	; 0x6c
 800ad66:	ecbd 8b02 	vpop	{d8}
 800ad6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad6e:	2920      	cmp	r1, #32
 800ad70:	d1cc      	bne.n	800ad0c <_strtod_l+0x34>
 800ad72:	3201      	adds	r2, #1
 800ad74:	e7bf      	b.n	800acf6 <_strtod_l+0x1e>
 800ad76:	292d      	cmp	r1, #45	; 0x2d
 800ad78:	d1c8      	bne.n	800ad0c <_strtod_l+0x34>
 800ad7a:	2101      	movs	r1, #1
 800ad7c:	910a      	str	r1, [sp, #40]	; 0x28
 800ad7e:	1c51      	adds	r1, r2, #1
 800ad80:	9115      	str	r1, [sp, #84]	; 0x54
 800ad82:	7852      	ldrb	r2, [r2, #1]
 800ad84:	2a00      	cmp	r2, #0
 800ad86:	d1c3      	bne.n	800ad10 <_strtod_l+0x38>
 800ad88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad8a:	9515      	str	r5, [sp, #84]	; 0x54
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	f040 855f 	bne.w	800b850 <_strtod_l+0xb78>
 800ad92:	4642      	mov	r2, r8
 800ad94:	464b      	mov	r3, r9
 800ad96:	e7e3      	b.n	800ad60 <_strtod_l+0x88>
 800ad98:	2100      	movs	r1, #0
 800ad9a:	e7ef      	b.n	800ad7c <_strtod_l+0xa4>
 800ad9c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ad9e:	b13a      	cbz	r2, 800adb0 <_strtod_l+0xd8>
 800ada0:	2135      	movs	r1, #53	; 0x35
 800ada2:	a818      	add	r0, sp, #96	; 0x60
 800ada4:	f7ff ff37 	bl	800ac16 <__copybits>
 800ada8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800adaa:	4620      	mov	r0, r4
 800adac:	f7ff fb0a 	bl	800a3c4 <_Bfree>
 800adb0:	3f01      	subs	r7, #1
 800adb2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800adb4:	2f04      	cmp	r7, #4
 800adb6:	d806      	bhi.n	800adc6 <_strtod_l+0xee>
 800adb8:	e8df f007 	tbb	[pc, r7]
 800adbc:	201d0314 	.word	0x201d0314
 800adc0:	14          	.byte	0x14
 800adc1:	00          	.byte	0x00
 800adc2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800adc6:	05e9      	lsls	r1, r5, #23
 800adc8:	bf48      	it	mi
 800adca:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800adce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800add2:	0d1b      	lsrs	r3, r3, #20
 800add4:	051b      	lsls	r3, r3, #20
 800add6:	2b00      	cmp	r3, #0
 800add8:	d1b9      	bne.n	800ad4e <_strtod_l+0x76>
 800adda:	f7fe fb07 	bl	80093ec <__errno>
 800adde:	2322      	movs	r3, #34	; 0x22
 800ade0:	6003      	str	r3, [r0, #0]
 800ade2:	e7b4      	b.n	800ad4e <_strtod_l+0x76>
 800ade4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800ade8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800adec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800adf0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800adf4:	e7e7      	b.n	800adc6 <_strtod_l+0xee>
 800adf6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800af70 <_strtod_l+0x298>
 800adfa:	e7e4      	b.n	800adc6 <_strtod_l+0xee>
 800adfc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ae00:	f04f 38ff 	mov.w	r8, #4294967295
 800ae04:	e7df      	b.n	800adc6 <_strtod_l+0xee>
 800ae06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae08:	1c5a      	adds	r2, r3, #1
 800ae0a:	9215      	str	r2, [sp, #84]	; 0x54
 800ae0c:	785b      	ldrb	r3, [r3, #1]
 800ae0e:	2b30      	cmp	r3, #48	; 0x30
 800ae10:	d0f9      	beq.n	800ae06 <_strtod_l+0x12e>
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d09b      	beq.n	800ad4e <_strtod_l+0x76>
 800ae16:	2301      	movs	r3, #1
 800ae18:	f04f 0a00 	mov.w	sl, #0
 800ae1c:	9304      	str	r3, [sp, #16]
 800ae1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae20:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae22:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ae26:	46d3      	mov	fp, sl
 800ae28:	220a      	movs	r2, #10
 800ae2a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800ae2c:	7806      	ldrb	r6, [r0, #0]
 800ae2e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ae32:	b2d9      	uxtb	r1, r3
 800ae34:	2909      	cmp	r1, #9
 800ae36:	d926      	bls.n	800ae86 <_strtod_l+0x1ae>
 800ae38:	494c      	ldr	r1, [pc, #304]	; (800af6c <_strtod_l+0x294>)
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	f001 f848 	bl	800bed0 <strncmp>
 800ae40:	2800      	cmp	r0, #0
 800ae42:	d030      	beq.n	800aea6 <_strtod_l+0x1ce>
 800ae44:	2000      	movs	r0, #0
 800ae46:	4632      	mov	r2, r6
 800ae48:	9005      	str	r0, [sp, #20]
 800ae4a:	465e      	mov	r6, fp
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2a65      	cmp	r2, #101	; 0x65
 800ae50:	d001      	beq.n	800ae56 <_strtod_l+0x17e>
 800ae52:	2a45      	cmp	r2, #69	; 0x45
 800ae54:	d113      	bne.n	800ae7e <_strtod_l+0x1a6>
 800ae56:	b91e      	cbnz	r6, 800ae60 <_strtod_l+0x188>
 800ae58:	9a04      	ldr	r2, [sp, #16]
 800ae5a:	4302      	orrs	r2, r0
 800ae5c:	d094      	beq.n	800ad88 <_strtod_l+0xb0>
 800ae5e:	2600      	movs	r6, #0
 800ae60:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ae62:	1c6a      	adds	r2, r5, #1
 800ae64:	9215      	str	r2, [sp, #84]	; 0x54
 800ae66:	786a      	ldrb	r2, [r5, #1]
 800ae68:	2a2b      	cmp	r2, #43	; 0x2b
 800ae6a:	d074      	beq.n	800af56 <_strtod_l+0x27e>
 800ae6c:	2a2d      	cmp	r2, #45	; 0x2d
 800ae6e:	d078      	beq.n	800af62 <_strtod_l+0x28a>
 800ae70:	f04f 0c00 	mov.w	ip, #0
 800ae74:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ae78:	2909      	cmp	r1, #9
 800ae7a:	d97f      	bls.n	800af7c <_strtod_l+0x2a4>
 800ae7c:	9515      	str	r5, [sp, #84]	; 0x54
 800ae7e:	2700      	movs	r7, #0
 800ae80:	e09e      	b.n	800afc0 <_strtod_l+0x2e8>
 800ae82:	2300      	movs	r3, #0
 800ae84:	e7c8      	b.n	800ae18 <_strtod_l+0x140>
 800ae86:	f1bb 0f08 	cmp.w	fp, #8
 800ae8a:	bfd8      	it	le
 800ae8c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800ae8e:	f100 0001 	add.w	r0, r0, #1
 800ae92:	bfda      	itte	le
 800ae94:	fb02 3301 	mlale	r3, r2, r1, r3
 800ae98:	9309      	strle	r3, [sp, #36]	; 0x24
 800ae9a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800ae9e:	f10b 0b01 	add.w	fp, fp, #1
 800aea2:	9015      	str	r0, [sp, #84]	; 0x54
 800aea4:	e7c1      	b.n	800ae2a <_strtod_l+0x152>
 800aea6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aea8:	1c5a      	adds	r2, r3, #1
 800aeaa:	9215      	str	r2, [sp, #84]	; 0x54
 800aeac:	785a      	ldrb	r2, [r3, #1]
 800aeae:	f1bb 0f00 	cmp.w	fp, #0
 800aeb2:	d037      	beq.n	800af24 <_strtod_l+0x24c>
 800aeb4:	9005      	str	r0, [sp, #20]
 800aeb6:	465e      	mov	r6, fp
 800aeb8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800aebc:	2b09      	cmp	r3, #9
 800aebe:	d912      	bls.n	800aee6 <_strtod_l+0x20e>
 800aec0:	2301      	movs	r3, #1
 800aec2:	e7c4      	b.n	800ae4e <_strtod_l+0x176>
 800aec4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aec6:	1c5a      	adds	r2, r3, #1
 800aec8:	9215      	str	r2, [sp, #84]	; 0x54
 800aeca:	785a      	ldrb	r2, [r3, #1]
 800aecc:	3001      	adds	r0, #1
 800aece:	2a30      	cmp	r2, #48	; 0x30
 800aed0:	d0f8      	beq.n	800aec4 <_strtod_l+0x1ec>
 800aed2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800aed6:	2b08      	cmp	r3, #8
 800aed8:	f200 84c1 	bhi.w	800b85e <_strtod_l+0xb86>
 800aedc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aede:	9005      	str	r0, [sp, #20]
 800aee0:	2000      	movs	r0, #0
 800aee2:	930b      	str	r3, [sp, #44]	; 0x2c
 800aee4:	4606      	mov	r6, r0
 800aee6:	3a30      	subs	r2, #48	; 0x30
 800aee8:	f100 0301 	add.w	r3, r0, #1
 800aeec:	d014      	beq.n	800af18 <_strtod_l+0x240>
 800aeee:	9905      	ldr	r1, [sp, #20]
 800aef0:	4419      	add	r1, r3
 800aef2:	9105      	str	r1, [sp, #20]
 800aef4:	4633      	mov	r3, r6
 800aef6:	eb00 0c06 	add.w	ip, r0, r6
 800aefa:	210a      	movs	r1, #10
 800aefc:	4563      	cmp	r3, ip
 800aefe:	d113      	bne.n	800af28 <_strtod_l+0x250>
 800af00:	1833      	adds	r3, r6, r0
 800af02:	2b08      	cmp	r3, #8
 800af04:	f106 0601 	add.w	r6, r6, #1
 800af08:	4406      	add	r6, r0
 800af0a:	dc1a      	bgt.n	800af42 <_strtod_l+0x26a>
 800af0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af0e:	230a      	movs	r3, #10
 800af10:	fb03 2301 	mla	r3, r3, r1, r2
 800af14:	9309      	str	r3, [sp, #36]	; 0x24
 800af16:	2300      	movs	r3, #0
 800af18:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800af1a:	1c51      	adds	r1, r2, #1
 800af1c:	9115      	str	r1, [sp, #84]	; 0x54
 800af1e:	7852      	ldrb	r2, [r2, #1]
 800af20:	4618      	mov	r0, r3
 800af22:	e7c9      	b.n	800aeb8 <_strtod_l+0x1e0>
 800af24:	4658      	mov	r0, fp
 800af26:	e7d2      	b.n	800aece <_strtod_l+0x1f6>
 800af28:	2b08      	cmp	r3, #8
 800af2a:	f103 0301 	add.w	r3, r3, #1
 800af2e:	dc03      	bgt.n	800af38 <_strtod_l+0x260>
 800af30:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800af32:	434f      	muls	r7, r1
 800af34:	9709      	str	r7, [sp, #36]	; 0x24
 800af36:	e7e1      	b.n	800aefc <_strtod_l+0x224>
 800af38:	2b10      	cmp	r3, #16
 800af3a:	bfd8      	it	le
 800af3c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800af40:	e7dc      	b.n	800aefc <_strtod_l+0x224>
 800af42:	2e10      	cmp	r6, #16
 800af44:	bfdc      	itt	le
 800af46:	230a      	movle	r3, #10
 800af48:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800af4c:	e7e3      	b.n	800af16 <_strtod_l+0x23e>
 800af4e:	2300      	movs	r3, #0
 800af50:	9305      	str	r3, [sp, #20]
 800af52:	2301      	movs	r3, #1
 800af54:	e780      	b.n	800ae58 <_strtod_l+0x180>
 800af56:	f04f 0c00 	mov.w	ip, #0
 800af5a:	1caa      	adds	r2, r5, #2
 800af5c:	9215      	str	r2, [sp, #84]	; 0x54
 800af5e:	78aa      	ldrb	r2, [r5, #2]
 800af60:	e788      	b.n	800ae74 <_strtod_l+0x19c>
 800af62:	f04f 0c01 	mov.w	ip, #1
 800af66:	e7f8      	b.n	800af5a <_strtod_l+0x282>
 800af68:	0800cd78 	.word	0x0800cd78
 800af6c:	0800cd74 	.word	0x0800cd74
 800af70:	7ff00000 	.word	0x7ff00000
 800af74:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800af76:	1c51      	adds	r1, r2, #1
 800af78:	9115      	str	r1, [sp, #84]	; 0x54
 800af7a:	7852      	ldrb	r2, [r2, #1]
 800af7c:	2a30      	cmp	r2, #48	; 0x30
 800af7e:	d0f9      	beq.n	800af74 <_strtod_l+0x29c>
 800af80:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800af84:	2908      	cmp	r1, #8
 800af86:	f63f af7a 	bhi.w	800ae7e <_strtod_l+0x1a6>
 800af8a:	3a30      	subs	r2, #48	; 0x30
 800af8c:	9208      	str	r2, [sp, #32]
 800af8e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800af90:	920c      	str	r2, [sp, #48]	; 0x30
 800af92:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800af94:	1c57      	adds	r7, r2, #1
 800af96:	9715      	str	r7, [sp, #84]	; 0x54
 800af98:	7852      	ldrb	r2, [r2, #1]
 800af9a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800af9e:	f1be 0f09 	cmp.w	lr, #9
 800afa2:	d938      	bls.n	800b016 <_strtod_l+0x33e>
 800afa4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800afa6:	1a7f      	subs	r7, r7, r1
 800afa8:	2f08      	cmp	r7, #8
 800afaa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800afae:	dc03      	bgt.n	800afb8 <_strtod_l+0x2e0>
 800afb0:	9908      	ldr	r1, [sp, #32]
 800afb2:	428f      	cmp	r7, r1
 800afb4:	bfa8      	it	ge
 800afb6:	460f      	movge	r7, r1
 800afb8:	f1bc 0f00 	cmp.w	ip, #0
 800afbc:	d000      	beq.n	800afc0 <_strtod_l+0x2e8>
 800afbe:	427f      	negs	r7, r7
 800afc0:	2e00      	cmp	r6, #0
 800afc2:	d14f      	bne.n	800b064 <_strtod_l+0x38c>
 800afc4:	9904      	ldr	r1, [sp, #16]
 800afc6:	4301      	orrs	r1, r0
 800afc8:	f47f aec1 	bne.w	800ad4e <_strtod_l+0x76>
 800afcc:	2b00      	cmp	r3, #0
 800afce:	f47f aedb 	bne.w	800ad88 <_strtod_l+0xb0>
 800afd2:	2a69      	cmp	r2, #105	; 0x69
 800afd4:	d029      	beq.n	800b02a <_strtod_l+0x352>
 800afd6:	dc26      	bgt.n	800b026 <_strtod_l+0x34e>
 800afd8:	2a49      	cmp	r2, #73	; 0x49
 800afda:	d026      	beq.n	800b02a <_strtod_l+0x352>
 800afdc:	2a4e      	cmp	r2, #78	; 0x4e
 800afde:	f47f aed3 	bne.w	800ad88 <_strtod_l+0xb0>
 800afe2:	499b      	ldr	r1, [pc, #620]	; (800b250 <_strtod_l+0x578>)
 800afe4:	a815      	add	r0, sp, #84	; 0x54
 800afe6:	f001 faab 	bl	800c540 <__match>
 800afea:	2800      	cmp	r0, #0
 800afec:	f43f aecc 	beq.w	800ad88 <_strtod_l+0xb0>
 800aff0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	2b28      	cmp	r3, #40	; 0x28
 800aff6:	d12f      	bne.n	800b058 <_strtod_l+0x380>
 800aff8:	4996      	ldr	r1, [pc, #600]	; (800b254 <_strtod_l+0x57c>)
 800affa:	aa18      	add	r2, sp, #96	; 0x60
 800affc:	a815      	add	r0, sp, #84	; 0x54
 800affe:	f001 fab3 	bl	800c568 <__hexnan>
 800b002:	2805      	cmp	r0, #5
 800b004:	d128      	bne.n	800b058 <_strtod_l+0x380>
 800b006:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b008:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b00c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b010:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b014:	e69b      	b.n	800ad4e <_strtod_l+0x76>
 800b016:	9f08      	ldr	r7, [sp, #32]
 800b018:	210a      	movs	r1, #10
 800b01a:	fb01 2107 	mla	r1, r1, r7, r2
 800b01e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b022:	9208      	str	r2, [sp, #32]
 800b024:	e7b5      	b.n	800af92 <_strtod_l+0x2ba>
 800b026:	2a6e      	cmp	r2, #110	; 0x6e
 800b028:	e7d9      	b.n	800afde <_strtod_l+0x306>
 800b02a:	498b      	ldr	r1, [pc, #556]	; (800b258 <_strtod_l+0x580>)
 800b02c:	a815      	add	r0, sp, #84	; 0x54
 800b02e:	f001 fa87 	bl	800c540 <__match>
 800b032:	2800      	cmp	r0, #0
 800b034:	f43f aea8 	beq.w	800ad88 <_strtod_l+0xb0>
 800b038:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b03a:	4988      	ldr	r1, [pc, #544]	; (800b25c <_strtod_l+0x584>)
 800b03c:	3b01      	subs	r3, #1
 800b03e:	a815      	add	r0, sp, #84	; 0x54
 800b040:	9315      	str	r3, [sp, #84]	; 0x54
 800b042:	f001 fa7d 	bl	800c540 <__match>
 800b046:	b910      	cbnz	r0, 800b04e <_strtod_l+0x376>
 800b048:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b04a:	3301      	adds	r3, #1
 800b04c:	9315      	str	r3, [sp, #84]	; 0x54
 800b04e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b26c <_strtod_l+0x594>
 800b052:	f04f 0800 	mov.w	r8, #0
 800b056:	e67a      	b.n	800ad4e <_strtod_l+0x76>
 800b058:	4881      	ldr	r0, [pc, #516]	; (800b260 <_strtod_l+0x588>)
 800b05a:	f000 ff8d 	bl	800bf78 <nan>
 800b05e:	ec59 8b10 	vmov	r8, r9, d0
 800b062:	e674      	b.n	800ad4e <_strtod_l+0x76>
 800b064:	9b05      	ldr	r3, [sp, #20]
 800b066:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b068:	1afb      	subs	r3, r7, r3
 800b06a:	f1bb 0f00 	cmp.w	fp, #0
 800b06e:	bf08      	it	eq
 800b070:	46b3      	moveq	fp, r6
 800b072:	2e10      	cmp	r6, #16
 800b074:	9308      	str	r3, [sp, #32]
 800b076:	4635      	mov	r5, r6
 800b078:	bfa8      	it	ge
 800b07a:	2510      	movge	r5, #16
 800b07c:	f7f5 fa42 	bl	8000504 <__aeabi_ui2d>
 800b080:	2e09      	cmp	r6, #9
 800b082:	4680      	mov	r8, r0
 800b084:	4689      	mov	r9, r1
 800b086:	dd13      	ble.n	800b0b0 <_strtod_l+0x3d8>
 800b088:	4b76      	ldr	r3, [pc, #472]	; (800b264 <_strtod_l+0x58c>)
 800b08a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b08e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b092:	f7f5 fab1 	bl	80005f8 <__aeabi_dmul>
 800b096:	4680      	mov	r8, r0
 800b098:	4650      	mov	r0, sl
 800b09a:	4689      	mov	r9, r1
 800b09c:	f7f5 fa32 	bl	8000504 <__aeabi_ui2d>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	460b      	mov	r3, r1
 800b0a4:	4640      	mov	r0, r8
 800b0a6:	4649      	mov	r1, r9
 800b0a8:	f7f5 f8f0 	bl	800028c <__adddf3>
 800b0ac:	4680      	mov	r8, r0
 800b0ae:	4689      	mov	r9, r1
 800b0b0:	2e0f      	cmp	r6, #15
 800b0b2:	dc38      	bgt.n	800b126 <_strtod_l+0x44e>
 800b0b4:	9b08      	ldr	r3, [sp, #32]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	f43f ae49 	beq.w	800ad4e <_strtod_l+0x76>
 800b0bc:	dd24      	ble.n	800b108 <_strtod_l+0x430>
 800b0be:	2b16      	cmp	r3, #22
 800b0c0:	dc0b      	bgt.n	800b0da <_strtod_l+0x402>
 800b0c2:	4968      	ldr	r1, [pc, #416]	; (800b264 <_strtod_l+0x58c>)
 800b0c4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b0c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0cc:	4642      	mov	r2, r8
 800b0ce:	464b      	mov	r3, r9
 800b0d0:	f7f5 fa92 	bl	80005f8 <__aeabi_dmul>
 800b0d4:	4680      	mov	r8, r0
 800b0d6:	4689      	mov	r9, r1
 800b0d8:	e639      	b.n	800ad4e <_strtod_l+0x76>
 800b0da:	9a08      	ldr	r2, [sp, #32]
 800b0dc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	db20      	blt.n	800b126 <_strtod_l+0x44e>
 800b0e4:	4c5f      	ldr	r4, [pc, #380]	; (800b264 <_strtod_l+0x58c>)
 800b0e6:	f1c6 060f 	rsb	r6, r6, #15
 800b0ea:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b0ee:	4642      	mov	r2, r8
 800b0f0:	464b      	mov	r3, r9
 800b0f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0f6:	f7f5 fa7f 	bl	80005f8 <__aeabi_dmul>
 800b0fa:	9b08      	ldr	r3, [sp, #32]
 800b0fc:	1b9e      	subs	r6, r3, r6
 800b0fe:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b102:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b106:	e7e3      	b.n	800b0d0 <_strtod_l+0x3f8>
 800b108:	9b08      	ldr	r3, [sp, #32]
 800b10a:	3316      	adds	r3, #22
 800b10c:	db0b      	blt.n	800b126 <_strtod_l+0x44e>
 800b10e:	9b05      	ldr	r3, [sp, #20]
 800b110:	1bdf      	subs	r7, r3, r7
 800b112:	4b54      	ldr	r3, [pc, #336]	; (800b264 <_strtod_l+0x58c>)
 800b114:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b118:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b11c:	4640      	mov	r0, r8
 800b11e:	4649      	mov	r1, r9
 800b120:	f7f5 fb94 	bl	800084c <__aeabi_ddiv>
 800b124:	e7d6      	b.n	800b0d4 <_strtod_l+0x3fc>
 800b126:	9b08      	ldr	r3, [sp, #32]
 800b128:	1b75      	subs	r5, r6, r5
 800b12a:	441d      	add	r5, r3
 800b12c:	2d00      	cmp	r5, #0
 800b12e:	dd70      	ble.n	800b212 <_strtod_l+0x53a>
 800b130:	f015 030f 	ands.w	r3, r5, #15
 800b134:	d00a      	beq.n	800b14c <_strtod_l+0x474>
 800b136:	494b      	ldr	r1, [pc, #300]	; (800b264 <_strtod_l+0x58c>)
 800b138:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b13c:	4642      	mov	r2, r8
 800b13e:	464b      	mov	r3, r9
 800b140:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b144:	f7f5 fa58 	bl	80005f8 <__aeabi_dmul>
 800b148:	4680      	mov	r8, r0
 800b14a:	4689      	mov	r9, r1
 800b14c:	f035 050f 	bics.w	r5, r5, #15
 800b150:	d04d      	beq.n	800b1ee <_strtod_l+0x516>
 800b152:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b156:	dd22      	ble.n	800b19e <_strtod_l+0x4c6>
 800b158:	2500      	movs	r5, #0
 800b15a:	46ab      	mov	fp, r5
 800b15c:	9509      	str	r5, [sp, #36]	; 0x24
 800b15e:	9505      	str	r5, [sp, #20]
 800b160:	2322      	movs	r3, #34	; 0x22
 800b162:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b26c <_strtod_l+0x594>
 800b166:	6023      	str	r3, [r4, #0]
 800b168:	f04f 0800 	mov.w	r8, #0
 800b16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b16e:	2b00      	cmp	r3, #0
 800b170:	f43f aded 	beq.w	800ad4e <_strtod_l+0x76>
 800b174:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b176:	4620      	mov	r0, r4
 800b178:	f7ff f924 	bl	800a3c4 <_Bfree>
 800b17c:	9905      	ldr	r1, [sp, #20]
 800b17e:	4620      	mov	r0, r4
 800b180:	f7ff f920 	bl	800a3c4 <_Bfree>
 800b184:	4659      	mov	r1, fp
 800b186:	4620      	mov	r0, r4
 800b188:	f7ff f91c 	bl	800a3c4 <_Bfree>
 800b18c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b18e:	4620      	mov	r0, r4
 800b190:	f7ff f918 	bl	800a3c4 <_Bfree>
 800b194:	4629      	mov	r1, r5
 800b196:	4620      	mov	r0, r4
 800b198:	f7ff f914 	bl	800a3c4 <_Bfree>
 800b19c:	e5d7      	b.n	800ad4e <_strtod_l+0x76>
 800b19e:	4b32      	ldr	r3, [pc, #200]	; (800b268 <_strtod_l+0x590>)
 800b1a0:	9304      	str	r3, [sp, #16]
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	112d      	asrs	r5, r5, #4
 800b1a6:	4640      	mov	r0, r8
 800b1a8:	4649      	mov	r1, r9
 800b1aa:	469a      	mov	sl, r3
 800b1ac:	2d01      	cmp	r5, #1
 800b1ae:	dc21      	bgt.n	800b1f4 <_strtod_l+0x51c>
 800b1b0:	b10b      	cbz	r3, 800b1b6 <_strtod_l+0x4de>
 800b1b2:	4680      	mov	r8, r0
 800b1b4:	4689      	mov	r9, r1
 800b1b6:	492c      	ldr	r1, [pc, #176]	; (800b268 <_strtod_l+0x590>)
 800b1b8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b1bc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b1c0:	4642      	mov	r2, r8
 800b1c2:	464b      	mov	r3, r9
 800b1c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1c8:	f7f5 fa16 	bl	80005f8 <__aeabi_dmul>
 800b1cc:	4b27      	ldr	r3, [pc, #156]	; (800b26c <_strtod_l+0x594>)
 800b1ce:	460a      	mov	r2, r1
 800b1d0:	400b      	ands	r3, r1
 800b1d2:	4927      	ldr	r1, [pc, #156]	; (800b270 <_strtod_l+0x598>)
 800b1d4:	428b      	cmp	r3, r1
 800b1d6:	4680      	mov	r8, r0
 800b1d8:	d8be      	bhi.n	800b158 <_strtod_l+0x480>
 800b1da:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b1de:	428b      	cmp	r3, r1
 800b1e0:	bf86      	itte	hi
 800b1e2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b274 <_strtod_l+0x59c>
 800b1e6:	f04f 38ff 	movhi.w	r8, #4294967295
 800b1ea:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	9304      	str	r3, [sp, #16]
 800b1f2:	e07b      	b.n	800b2ec <_strtod_l+0x614>
 800b1f4:	07ea      	lsls	r2, r5, #31
 800b1f6:	d505      	bpl.n	800b204 <_strtod_l+0x52c>
 800b1f8:	9b04      	ldr	r3, [sp, #16]
 800b1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fe:	f7f5 f9fb 	bl	80005f8 <__aeabi_dmul>
 800b202:	2301      	movs	r3, #1
 800b204:	9a04      	ldr	r2, [sp, #16]
 800b206:	3208      	adds	r2, #8
 800b208:	f10a 0a01 	add.w	sl, sl, #1
 800b20c:	106d      	asrs	r5, r5, #1
 800b20e:	9204      	str	r2, [sp, #16]
 800b210:	e7cc      	b.n	800b1ac <_strtod_l+0x4d4>
 800b212:	d0ec      	beq.n	800b1ee <_strtod_l+0x516>
 800b214:	426d      	negs	r5, r5
 800b216:	f015 020f 	ands.w	r2, r5, #15
 800b21a:	d00a      	beq.n	800b232 <_strtod_l+0x55a>
 800b21c:	4b11      	ldr	r3, [pc, #68]	; (800b264 <_strtod_l+0x58c>)
 800b21e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b222:	4640      	mov	r0, r8
 800b224:	4649      	mov	r1, r9
 800b226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22a:	f7f5 fb0f 	bl	800084c <__aeabi_ddiv>
 800b22e:	4680      	mov	r8, r0
 800b230:	4689      	mov	r9, r1
 800b232:	112d      	asrs	r5, r5, #4
 800b234:	d0db      	beq.n	800b1ee <_strtod_l+0x516>
 800b236:	2d1f      	cmp	r5, #31
 800b238:	dd1e      	ble.n	800b278 <_strtod_l+0x5a0>
 800b23a:	2500      	movs	r5, #0
 800b23c:	46ab      	mov	fp, r5
 800b23e:	9509      	str	r5, [sp, #36]	; 0x24
 800b240:	9505      	str	r5, [sp, #20]
 800b242:	2322      	movs	r3, #34	; 0x22
 800b244:	f04f 0800 	mov.w	r8, #0
 800b248:	f04f 0900 	mov.w	r9, #0
 800b24c:	6023      	str	r3, [r4, #0]
 800b24e:	e78d      	b.n	800b16c <_strtod_l+0x494>
 800b250:	0800cb65 	.word	0x0800cb65
 800b254:	0800cd8c 	.word	0x0800cd8c
 800b258:	0800cb5d 	.word	0x0800cb5d
 800b25c:	0800cb94 	.word	0x0800cb94
 800b260:	0800cf1d 	.word	0x0800cf1d
 800b264:	0800cca0 	.word	0x0800cca0
 800b268:	0800cc78 	.word	0x0800cc78
 800b26c:	7ff00000 	.word	0x7ff00000
 800b270:	7ca00000 	.word	0x7ca00000
 800b274:	7fefffff 	.word	0x7fefffff
 800b278:	f015 0310 	ands.w	r3, r5, #16
 800b27c:	bf18      	it	ne
 800b27e:	236a      	movne	r3, #106	; 0x6a
 800b280:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b624 <_strtod_l+0x94c>
 800b284:	9304      	str	r3, [sp, #16]
 800b286:	4640      	mov	r0, r8
 800b288:	4649      	mov	r1, r9
 800b28a:	2300      	movs	r3, #0
 800b28c:	07ea      	lsls	r2, r5, #31
 800b28e:	d504      	bpl.n	800b29a <_strtod_l+0x5c2>
 800b290:	e9da 2300 	ldrd	r2, r3, [sl]
 800b294:	f7f5 f9b0 	bl	80005f8 <__aeabi_dmul>
 800b298:	2301      	movs	r3, #1
 800b29a:	106d      	asrs	r5, r5, #1
 800b29c:	f10a 0a08 	add.w	sl, sl, #8
 800b2a0:	d1f4      	bne.n	800b28c <_strtod_l+0x5b4>
 800b2a2:	b10b      	cbz	r3, 800b2a8 <_strtod_l+0x5d0>
 800b2a4:	4680      	mov	r8, r0
 800b2a6:	4689      	mov	r9, r1
 800b2a8:	9b04      	ldr	r3, [sp, #16]
 800b2aa:	b1bb      	cbz	r3, 800b2dc <_strtod_l+0x604>
 800b2ac:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b2b0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	4649      	mov	r1, r9
 800b2b8:	dd10      	ble.n	800b2dc <_strtod_l+0x604>
 800b2ba:	2b1f      	cmp	r3, #31
 800b2bc:	f340 811e 	ble.w	800b4fc <_strtod_l+0x824>
 800b2c0:	2b34      	cmp	r3, #52	; 0x34
 800b2c2:	bfde      	ittt	le
 800b2c4:	f04f 33ff 	movle.w	r3, #4294967295
 800b2c8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b2cc:	4093      	lslle	r3, r2
 800b2ce:	f04f 0800 	mov.w	r8, #0
 800b2d2:	bfcc      	ite	gt
 800b2d4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b2d8:	ea03 0901 	andle.w	r9, r3, r1
 800b2dc:	2200      	movs	r2, #0
 800b2de:	2300      	movs	r3, #0
 800b2e0:	4640      	mov	r0, r8
 800b2e2:	4649      	mov	r1, r9
 800b2e4:	f7f5 fbf0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	d1a6      	bne.n	800b23a <_strtod_l+0x562>
 800b2ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2ee:	9300      	str	r3, [sp, #0]
 800b2f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b2f2:	4633      	mov	r3, r6
 800b2f4:	465a      	mov	r2, fp
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	f7ff f8cc 	bl	800a494 <__s2b>
 800b2fc:	9009      	str	r0, [sp, #36]	; 0x24
 800b2fe:	2800      	cmp	r0, #0
 800b300:	f43f af2a 	beq.w	800b158 <_strtod_l+0x480>
 800b304:	9a08      	ldr	r2, [sp, #32]
 800b306:	9b05      	ldr	r3, [sp, #20]
 800b308:	2a00      	cmp	r2, #0
 800b30a:	eba3 0307 	sub.w	r3, r3, r7
 800b30e:	bfa8      	it	ge
 800b310:	2300      	movge	r3, #0
 800b312:	930c      	str	r3, [sp, #48]	; 0x30
 800b314:	2500      	movs	r5, #0
 800b316:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b31a:	9312      	str	r3, [sp, #72]	; 0x48
 800b31c:	46ab      	mov	fp, r5
 800b31e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b320:	4620      	mov	r0, r4
 800b322:	6859      	ldr	r1, [r3, #4]
 800b324:	f7ff f80e 	bl	800a344 <_Balloc>
 800b328:	9005      	str	r0, [sp, #20]
 800b32a:	2800      	cmp	r0, #0
 800b32c:	f43f af18 	beq.w	800b160 <_strtod_l+0x488>
 800b330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b332:	691a      	ldr	r2, [r3, #16]
 800b334:	3202      	adds	r2, #2
 800b336:	f103 010c 	add.w	r1, r3, #12
 800b33a:	0092      	lsls	r2, r2, #2
 800b33c:	300c      	adds	r0, #12
 800b33e:	f000 fe0b 	bl	800bf58 <memcpy>
 800b342:	ec49 8b10 	vmov	d0, r8, r9
 800b346:	aa18      	add	r2, sp, #96	; 0x60
 800b348:	a917      	add	r1, sp, #92	; 0x5c
 800b34a:	4620      	mov	r0, r4
 800b34c:	f7ff fbd6 	bl	800aafc <__d2b>
 800b350:	ec49 8b18 	vmov	d8, r8, r9
 800b354:	9016      	str	r0, [sp, #88]	; 0x58
 800b356:	2800      	cmp	r0, #0
 800b358:	f43f af02 	beq.w	800b160 <_strtod_l+0x488>
 800b35c:	2101      	movs	r1, #1
 800b35e:	4620      	mov	r0, r4
 800b360:	f7ff f930 	bl	800a5c4 <__i2b>
 800b364:	4683      	mov	fp, r0
 800b366:	2800      	cmp	r0, #0
 800b368:	f43f aefa 	beq.w	800b160 <_strtod_l+0x488>
 800b36c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b36e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b370:	2e00      	cmp	r6, #0
 800b372:	bfab      	itete	ge
 800b374:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b376:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b378:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b37a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b37e:	bfac      	ite	ge
 800b380:	eb06 0a03 	addge.w	sl, r6, r3
 800b384:	1b9f      	sublt	r7, r3, r6
 800b386:	9b04      	ldr	r3, [sp, #16]
 800b388:	1af6      	subs	r6, r6, r3
 800b38a:	4416      	add	r6, r2
 800b38c:	4ba0      	ldr	r3, [pc, #640]	; (800b610 <_strtod_l+0x938>)
 800b38e:	3e01      	subs	r6, #1
 800b390:	429e      	cmp	r6, r3
 800b392:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b396:	f280 80c4 	bge.w	800b522 <_strtod_l+0x84a>
 800b39a:	1b9b      	subs	r3, r3, r6
 800b39c:	2b1f      	cmp	r3, #31
 800b39e:	eba2 0203 	sub.w	r2, r2, r3
 800b3a2:	f04f 0101 	mov.w	r1, #1
 800b3a6:	f300 80b0 	bgt.w	800b50a <_strtod_l+0x832>
 800b3aa:	fa01 f303 	lsl.w	r3, r1, r3
 800b3ae:	930e      	str	r3, [sp, #56]	; 0x38
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	930d      	str	r3, [sp, #52]	; 0x34
 800b3b4:	eb0a 0602 	add.w	r6, sl, r2
 800b3b8:	9b04      	ldr	r3, [sp, #16]
 800b3ba:	45b2      	cmp	sl, r6
 800b3bc:	4417      	add	r7, r2
 800b3be:	441f      	add	r7, r3
 800b3c0:	4653      	mov	r3, sl
 800b3c2:	bfa8      	it	ge
 800b3c4:	4633      	movge	r3, r6
 800b3c6:	42bb      	cmp	r3, r7
 800b3c8:	bfa8      	it	ge
 800b3ca:	463b      	movge	r3, r7
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	bfc2      	ittt	gt
 800b3d0:	1af6      	subgt	r6, r6, r3
 800b3d2:	1aff      	subgt	r7, r7, r3
 800b3d4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b3d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	dd17      	ble.n	800b40e <_strtod_l+0x736>
 800b3de:	4659      	mov	r1, fp
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	4620      	mov	r0, r4
 800b3e4:	f7ff f9ae 	bl	800a744 <__pow5mult>
 800b3e8:	4683      	mov	fp, r0
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	f43f aeb8 	beq.w	800b160 <_strtod_l+0x488>
 800b3f0:	4601      	mov	r1, r0
 800b3f2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	f7ff f8fb 	bl	800a5f0 <__multiply>
 800b3fa:	900b      	str	r0, [sp, #44]	; 0x2c
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	f43f aeaf 	beq.w	800b160 <_strtod_l+0x488>
 800b402:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b404:	4620      	mov	r0, r4
 800b406:	f7fe ffdd 	bl	800a3c4 <_Bfree>
 800b40a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b40c:	9316      	str	r3, [sp, #88]	; 0x58
 800b40e:	2e00      	cmp	r6, #0
 800b410:	f300 808c 	bgt.w	800b52c <_strtod_l+0x854>
 800b414:	9b08      	ldr	r3, [sp, #32]
 800b416:	2b00      	cmp	r3, #0
 800b418:	dd08      	ble.n	800b42c <_strtod_l+0x754>
 800b41a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b41c:	9905      	ldr	r1, [sp, #20]
 800b41e:	4620      	mov	r0, r4
 800b420:	f7ff f990 	bl	800a744 <__pow5mult>
 800b424:	9005      	str	r0, [sp, #20]
 800b426:	2800      	cmp	r0, #0
 800b428:	f43f ae9a 	beq.w	800b160 <_strtod_l+0x488>
 800b42c:	2f00      	cmp	r7, #0
 800b42e:	dd08      	ble.n	800b442 <_strtod_l+0x76a>
 800b430:	9905      	ldr	r1, [sp, #20]
 800b432:	463a      	mov	r2, r7
 800b434:	4620      	mov	r0, r4
 800b436:	f7ff f9df 	bl	800a7f8 <__lshift>
 800b43a:	9005      	str	r0, [sp, #20]
 800b43c:	2800      	cmp	r0, #0
 800b43e:	f43f ae8f 	beq.w	800b160 <_strtod_l+0x488>
 800b442:	f1ba 0f00 	cmp.w	sl, #0
 800b446:	dd08      	ble.n	800b45a <_strtod_l+0x782>
 800b448:	4659      	mov	r1, fp
 800b44a:	4652      	mov	r2, sl
 800b44c:	4620      	mov	r0, r4
 800b44e:	f7ff f9d3 	bl	800a7f8 <__lshift>
 800b452:	4683      	mov	fp, r0
 800b454:	2800      	cmp	r0, #0
 800b456:	f43f ae83 	beq.w	800b160 <_strtod_l+0x488>
 800b45a:	9a05      	ldr	r2, [sp, #20]
 800b45c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b45e:	4620      	mov	r0, r4
 800b460:	f7ff fa52 	bl	800a908 <__mdiff>
 800b464:	4605      	mov	r5, r0
 800b466:	2800      	cmp	r0, #0
 800b468:	f43f ae7a 	beq.w	800b160 <_strtod_l+0x488>
 800b46c:	68c3      	ldr	r3, [r0, #12]
 800b46e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b470:	2300      	movs	r3, #0
 800b472:	60c3      	str	r3, [r0, #12]
 800b474:	4659      	mov	r1, fp
 800b476:	f7ff fa2b 	bl	800a8d0 <__mcmp>
 800b47a:	2800      	cmp	r0, #0
 800b47c:	da60      	bge.n	800b540 <_strtod_l+0x868>
 800b47e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b480:	ea53 0308 	orrs.w	r3, r3, r8
 800b484:	f040 8084 	bne.w	800b590 <_strtod_l+0x8b8>
 800b488:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d17f      	bne.n	800b590 <_strtod_l+0x8b8>
 800b490:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b494:	0d1b      	lsrs	r3, r3, #20
 800b496:	051b      	lsls	r3, r3, #20
 800b498:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b49c:	d978      	bls.n	800b590 <_strtod_l+0x8b8>
 800b49e:	696b      	ldr	r3, [r5, #20]
 800b4a0:	b913      	cbnz	r3, 800b4a8 <_strtod_l+0x7d0>
 800b4a2:	692b      	ldr	r3, [r5, #16]
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	dd73      	ble.n	800b590 <_strtod_l+0x8b8>
 800b4a8:	4629      	mov	r1, r5
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	f7ff f9a3 	bl	800a7f8 <__lshift>
 800b4b2:	4659      	mov	r1, fp
 800b4b4:	4605      	mov	r5, r0
 800b4b6:	f7ff fa0b 	bl	800a8d0 <__mcmp>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	dd68      	ble.n	800b590 <_strtod_l+0x8b8>
 800b4be:	9904      	ldr	r1, [sp, #16]
 800b4c0:	4a54      	ldr	r2, [pc, #336]	; (800b614 <_strtod_l+0x93c>)
 800b4c2:	464b      	mov	r3, r9
 800b4c4:	2900      	cmp	r1, #0
 800b4c6:	f000 8084 	beq.w	800b5d2 <_strtod_l+0x8fa>
 800b4ca:	ea02 0109 	and.w	r1, r2, r9
 800b4ce:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b4d2:	dc7e      	bgt.n	800b5d2 <_strtod_l+0x8fa>
 800b4d4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b4d8:	f77f aeb3 	ble.w	800b242 <_strtod_l+0x56a>
 800b4dc:	4b4e      	ldr	r3, [pc, #312]	; (800b618 <_strtod_l+0x940>)
 800b4de:	4640      	mov	r0, r8
 800b4e0:	4649      	mov	r1, r9
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	f7f5 f888 	bl	80005f8 <__aeabi_dmul>
 800b4e8:	4b4a      	ldr	r3, [pc, #296]	; (800b614 <_strtod_l+0x93c>)
 800b4ea:	400b      	ands	r3, r1
 800b4ec:	4680      	mov	r8, r0
 800b4ee:	4689      	mov	r9, r1
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	f47f ae3f 	bne.w	800b174 <_strtod_l+0x49c>
 800b4f6:	2322      	movs	r3, #34	; 0x22
 800b4f8:	6023      	str	r3, [r4, #0]
 800b4fa:	e63b      	b.n	800b174 <_strtod_l+0x49c>
 800b4fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b500:	fa02 f303 	lsl.w	r3, r2, r3
 800b504:	ea03 0808 	and.w	r8, r3, r8
 800b508:	e6e8      	b.n	800b2dc <_strtod_l+0x604>
 800b50a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b50e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b512:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b516:	36e2      	adds	r6, #226	; 0xe2
 800b518:	fa01 f306 	lsl.w	r3, r1, r6
 800b51c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b520:	e748      	b.n	800b3b4 <_strtod_l+0x6dc>
 800b522:	2100      	movs	r1, #0
 800b524:	2301      	movs	r3, #1
 800b526:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b52a:	e743      	b.n	800b3b4 <_strtod_l+0x6dc>
 800b52c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b52e:	4632      	mov	r2, r6
 800b530:	4620      	mov	r0, r4
 800b532:	f7ff f961 	bl	800a7f8 <__lshift>
 800b536:	9016      	str	r0, [sp, #88]	; 0x58
 800b538:	2800      	cmp	r0, #0
 800b53a:	f47f af6b 	bne.w	800b414 <_strtod_l+0x73c>
 800b53e:	e60f      	b.n	800b160 <_strtod_l+0x488>
 800b540:	46ca      	mov	sl, r9
 800b542:	d171      	bne.n	800b628 <_strtod_l+0x950>
 800b544:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b546:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b54a:	b352      	cbz	r2, 800b5a2 <_strtod_l+0x8ca>
 800b54c:	4a33      	ldr	r2, [pc, #204]	; (800b61c <_strtod_l+0x944>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d12a      	bne.n	800b5a8 <_strtod_l+0x8d0>
 800b552:	9b04      	ldr	r3, [sp, #16]
 800b554:	4641      	mov	r1, r8
 800b556:	b1fb      	cbz	r3, 800b598 <_strtod_l+0x8c0>
 800b558:	4b2e      	ldr	r3, [pc, #184]	; (800b614 <_strtod_l+0x93c>)
 800b55a:	ea09 0303 	and.w	r3, r9, r3
 800b55e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b562:	f04f 32ff 	mov.w	r2, #4294967295
 800b566:	d81a      	bhi.n	800b59e <_strtod_l+0x8c6>
 800b568:	0d1b      	lsrs	r3, r3, #20
 800b56a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b56e:	fa02 f303 	lsl.w	r3, r2, r3
 800b572:	4299      	cmp	r1, r3
 800b574:	d118      	bne.n	800b5a8 <_strtod_l+0x8d0>
 800b576:	4b2a      	ldr	r3, [pc, #168]	; (800b620 <_strtod_l+0x948>)
 800b578:	459a      	cmp	sl, r3
 800b57a:	d102      	bne.n	800b582 <_strtod_l+0x8aa>
 800b57c:	3101      	adds	r1, #1
 800b57e:	f43f adef 	beq.w	800b160 <_strtod_l+0x488>
 800b582:	4b24      	ldr	r3, [pc, #144]	; (800b614 <_strtod_l+0x93c>)
 800b584:	ea0a 0303 	and.w	r3, sl, r3
 800b588:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b58c:	f04f 0800 	mov.w	r8, #0
 800b590:	9b04      	ldr	r3, [sp, #16]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d1a2      	bne.n	800b4dc <_strtod_l+0x804>
 800b596:	e5ed      	b.n	800b174 <_strtod_l+0x49c>
 800b598:	f04f 33ff 	mov.w	r3, #4294967295
 800b59c:	e7e9      	b.n	800b572 <_strtod_l+0x89a>
 800b59e:	4613      	mov	r3, r2
 800b5a0:	e7e7      	b.n	800b572 <_strtod_l+0x89a>
 800b5a2:	ea53 0308 	orrs.w	r3, r3, r8
 800b5a6:	d08a      	beq.n	800b4be <_strtod_l+0x7e6>
 800b5a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5aa:	b1e3      	cbz	r3, 800b5e6 <_strtod_l+0x90e>
 800b5ac:	ea13 0f0a 	tst.w	r3, sl
 800b5b0:	d0ee      	beq.n	800b590 <_strtod_l+0x8b8>
 800b5b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5b4:	9a04      	ldr	r2, [sp, #16]
 800b5b6:	4640      	mov	r0, r8
 800b5b8:	4649      	mov	r1, r9
 800b5ba:	b1c3      	cbz	r3, 800b5ee <_strtod_l+0x916>
 800b5bc:	f7ff fb6f 	bl	800ac9e <sulp>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	ec51 0b18 	vmov	r0, r1, d8
 800b5c8:	f7f4 fe60 	bl	800028c <__adddf3>
 800b5cc:	4680      	mov	r8, r0
 800b5ce:	4689      	mov	r9, r1
 800b5d0:	e7de      	b.n	800b590 <_strtod_l+0x8b8>
 800b5d2:	4013      	ands	r3, r2
 800b5d4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b5d8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b5dc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b5e0:	f04f 38ff 	mov.w	r8, #4294967295
 800b5e4:	e7d4      	b.n	800b590 <_strtod_l+0x8b8>
 800b5e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5e8:	ea13 0f08 	tst.w	r3, r8
 800b5ec:	e7e0      	b.n	800b5b0 <_strtod_l+0x8d8>
 800b5ee:	f7ff fb56 	bl	800ac9e <sulp>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	ec51 0b18 	vmov	r0, r1, d8
 800b5fa:	f7f4 fe45 	bl	8000288 <__aeabi_dsub>
 800b5fe:	2200      	movs	r2, #0
 800b600:	2300      	movs	r3, #0
 800b602:	4680      	mov	r8, r0
 800b604:	4689      	mov	r9, r1
 800b606:	f7f5 fa5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b60a:	2800      	cmp	r0, #0
 800b60c:	d0c0      	beq.n	800b590 <_strtod_l+0x8b8>
 800b60e:	e618      	b.n	800b242 <_strtod_l+0x56a>
 800b610:	fffffc02 	.word	0xfffffc02
 800b614:	7ff00000 	.word	0x7ff00000
 800b618:	39500000 	.word	0x39500000
 800b61c:	000fffff 	.word	0x000fffff
 800b620:	7fefffff 	.word	0x7fefffff
 800b624:	0800cda0 	.word	0x0800cda0
 800b628:	4659      	mov	r1, fp
 800b62a:	4628      	mov	r0, r5
 800b62c:	f7ff fac0 	bl	800abb0 <__ratio>
 800b630:	ec57 6b10 	vmov	r6, r7, d0
 800b634:	ee10 0a10 	vmov	r0, s0
 800b638:	2200      	movs	r2, #0
 800b63a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b63e:	4639      	mov	r1, r7
 800b640:	f7f5 fa56 	bl	8000af0 <__aeabi_dcmple>
 800b644:	2800      	cmp	r0, #0
 800b646:	d071      	beq.n	800b72c <_strtod_l+0xa54>
 800b648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d17c      	bne.n	800b748 <_strtod_l+0xa70>
 800b64e:	f1b8 0f00 	cmp.w	r8, #0
 800b652:	d15a      	bne.n	800b70a <_strtod_l+0xa32>
 800b654:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d15d      	bne.n	800b718 <_strtod_l+0xa40>
 800b65c:	4b90      	ldr	r3, [pc, #576]	; (800b8a0 <_strtod_l+0xbc8>)
 800b65e:	2200      	movs	r2, #0
 800b660:	4630      	mov	r0, r6
 800b662:	4639      	mov	r1, r7
 800b664:	f7f5 fa3a 	bl	8000adc <__aeabi_dcmplt>
 800b668:	2800      	cmp	r0, #0
 800b66a:	d15c      	bne.n	800b726 <_strtod_l+0xa4e>
 800b66c:	4630      	mov	r0, r6
 800b66e:	4639      	mov	r1, r7
 800b670:	4b8c      	ldr	r3, [pc, #560]	; (800b8a4 <_strtod_l+0xbcc>)
 800b672:	2200      	movs	r2, #0
 800b674:	f7f4 ffc0 	bl	80005f8 <__aeabi_dmul>
 800b678:	4606      	mov	r6, r0
 800b67a:	460f      	mov	r7, r1
 800b67c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b680:	9606      	str	r6, [sp, #24]
 800b682:	9307      	str	r3, [sp, #28]
 800b684:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b688:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b68c:	4b86      	ldr	r3, [pc, #536]	; (800b8a8 <_strtod_l+0xbd0>)
 800b68e:	ea0a 0303 	and.w	r3, sl, r3
 800b692:	930d      	str	r3, [sp, #52]	; 0x34
 800b694:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b696:	4b85      	ldr	r3, [pc, #532]	; (800b8ac <_strtod_l+0xbd4>)
 800b698:	429a      	cmp	r2, r3
 800b69a:	f040 8090 	bne.w	800b7be <_strtod_l+0xae6>
 800b69e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b6a2:	ec49 8b10 	vmov	d0, r8, r9
 800b6a6:	f7ff f9b9 	bl	800aa1c <__ulp>
 800b6aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6ae:	ec51 0b10 	vmov	r0, r1, d0
 800b6b2:	f7f4 ffa1 	bl	80005f8 <__aeabi_dmul>
 800b6b6:	4642      	mov	r2, r8
 800b6b8:	464b      	mov	r3, r9
 800b6ba:	f7f4 fde7 	bl	800028c <__adddf3>
 800b6be:	460b      	mov	r3, r1
 800b6c0:	4979      	ldr	r1, [pc, #484]	; (800b8a8 <_strtod_l+0xbd0>)
 800b6c2:	4a7b      	ldr	r2, [pc, #492]	; (800b8b0 <_strtod_l+0xbd8>)
 800b6c4:	4019      	ands	r1, r3
 800b6c6:	4291      	cmp	r1, r2
 800b6c8:	4680      	mov	r8, r0
 800b6ca:	d944      	bls.n	800b756 <_strtod_l+0xa7e>
 800b6cc:	ee18 2a90 	vmov	r2, s17
 800b6d0:	4b78      	ldr	r3, [pc, #480]	; (800b8b4 <_strtod_l+0xbdc>)
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d104      	bne.n	800b6e0 <_strtod_l+0xa08>
 800b6d6:	ee18 3a10 	vmov	r3, s16
 800b6da:	3301      	adds	r3, #1
 800b6dc:	f43f ad40 	beq.w	800b160 <_strtod_l+0x488>
 800b6e0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b8b4 <_strtod_l+0xbdc>
 800b6e4:	f04f 38ff 	mov.w	r8, #4294967295
 800b6e8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	f7fe fe6a 	bl	800a3c4 <_Bfree>
 800b6f0:	9905      	ldr	r1, [sp, #20]
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	f7fe fe66 	bl	800a3c4 <_Bfree>
 800b6f8:	4659      	mov	r1, fp
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	f7fe fe62 	bl	800a3c4 <_Bfree>
 800b700:	4629      	mov	r1, r5
 800b702:	4620      	mov	r0, r4
 800b704:	f7fe fe5e 	bl	800a3c4 <_Bfree>
 800b708:	e609      	b.n	800b31e <_strtod_l+0x646>
 800b70a:	f1b8 0f01 	cmp.w	r8, #1
 800b70e:	d103      	bne.n	800b718 <_strtod_l+0xa40>
 800b710:	f1b9 0f00 	cmp.w	r9, #0
 800b714:	f43f ad95 	beq.w	800b242 <_strtod_l+0x56a>
 800b718:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b870 <_strtod_l+0xb98>
 800b71c:	4f60      	ldr	r7, [pc, #384]	; (800b8a0 <_strtod_l+0xbc8>)
 800b71e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b722:	2600      	movs	r6, #0
 800b724:	e7ae      	b.n	800b684 <_strtod_l+0x9ac>
 800b726:	4f5f      	ldr	r7, [pc, #380]	; (800b8a4 <_strtod_l+0xbcc>)
 800b728:	2600      	movs	r6, #0
 800b72a:	e7a7      	b.n	800b67c <_strtod_l+0x9a4>
 800b72c:	4b5d      	ldr	r3, [pc, #372]	; (800b8a4 <_strtod_l+0xbcc>)
 800b72e:	4630      	mov	r0, r6
 800b730:	4639      	mov	r1, r7
 800b732:	2200      	movs	r2, #0
 800b734:	f7f4 ff60 	bl	80005f8 <__aeabi_dmul>
 800b738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b73a:	4606      	mov	r6, r0
 800b73c:	460f      	mov	r7, r1
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d09c      	beq.n	800b67c <_strtod_l+0x9a4>
 800b742:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b746:	e79d      	b.n	800b684 <_strtod_l+0x9ac>
 800b748:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b878 <_strtod_l+0xba0>
 800b74c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b750:	ec57 6b17 	vmov	r6, r7, d7
 800b754:	e796      	b.n	800b684 <_strtod_l+0x9ac>
 800b756:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b75a:	9b04      	ldr	r3, [sp, #16]
 800b75c:	46ca      	mov	sl, r9
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d1c2      	bne.n	800b6e8 <_strtod_l+0xa10>
 800b762:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b766:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b768:	0d1b      	lsrs	r3, r3, #20
 800b76a:	051b      	lsls	r3, r3, #20
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d1bb      	bne.n	800b6e8 <_strtod_l+0xa10>
 800b770:	4630      	mov	r0, r6
 800b772:	4639      	mov	r1, r7
 800b774:	f7f5 faa0 	bl	8000cb8 <__aeabi_d2lz>
 800b778:	f7f4 ff10 	bl	800059c <__aeabi_l2d>
 800b77c:	4602      	mov	r2, r0
 800b77e:	460b      	mov	r3, r1
 800b780:	4630      	mov	r0, r6
 800b782:	4639      	mov	r1, r7
 800b784:	f7f4 fd80 	bl	8000288 <__aeabi_dsub>
 800b788:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b78a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b78e:	ea43 0308 	orr.w	r3, r3, r8
 800b792:	4313      	orrs	r3, r2
 800b794:	4606      	mov	r6, r0
 800b796:	460f      	mov	r7, r1
 800b798:	d054      	beq.n	800b844 <_strtod_l+0xb6c>
 800b79a:	a339      	add	r3, pc, #228	; (adr r3, 800b880 <_strtod_l+0xba8>)
 800b79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a0:	f7f5 f99c 	bl	8000adc <__aeabi_dcmplt>
 800b7a4:	2800      	cmp	r0, #0
 800b7a6:	f47f ace5 	bne.w	800b174 <_strtod_l+0x49c>
 800b7aa:	a337      	add	r3, pc, #220	; (adr r3, 800b888 <_strtod_l+0xbb0>)
 800b7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b0:	4630      	mov	r0, r6
 800b7b2:	4639      	mov	r1, r7
 800b7b4:	f7f5 f9b0 	bl	8000b18 <__aeabi_dcmpgt>
 800b7b8:	2800      	cmp	r0, #0
 800b7ba:	d095      	beq.n	800b6e8 <_strtod_l+0xa10>
 800b7bc:	e4da      	b.n	800b174 <_strtod_l+0x49c>
 800b7be:	9b04      	ldr	r3, [sp, #16]
 800b7c0:	b333      	cbz	r3, 800b810 <_strtod_l+0xb38>
 800b7c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b7c8:	d822      	bhi.n	800b810 <_strtod_l+0xb38>
 800b7ca:	a331      	add	r3, pc, #196	; (adr r3, 800b890 <_strtod_l+0xbb8>)
 800b7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d0:	4630      	mov	r0, r6
 800b7d2:	4639      	mov	r1, r7
 800b7d4:	f7f5 f98c 	bl	8000af0 <__aeabi_dcmple>
 800b7d8:	b1a0      	cbz	r0, 800b804 <_strtod_l+0xb2c>
 800b7da:	4639      	mov	r1, r7
 800b7dc:	4630      	mov	r0, r6
 800b7de:	f7f5 f9e3 	bl	8000ba8 <__aeabi_d2uiz>
 800b7e2:	2801      	cmp	r0, #1
 800b7e4:	bf38      	it	cc
 800b7e6:	2001      	movcc	r0, #1
 800b7e8:	f7f4 fe8c 	bl	8000504 <__aeabi_ui2d>
 800b7ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7ee:	4606      	mov	r6, r0
 800b7f0:	460f      	mov	r7, r1
 800b7f2:	bb23      	cbnz	r3, 800b83e <_strtod_l+0xb66>
 800b7f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7f8:	9010      	str	r0, [sp, #64]	; 0x40
 800b7fa:	9311      	str	r3, [sp, #68]	; 0x44
 800b7fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b800:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b804:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b806:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b808:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b80c:	1a9b      	subs	r3, r3, r2
 800b80e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b810:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b814:	eeb0 0a48 	vmov.f32	s0, s16
 800b818:	eef0 0a68 	vmov.f32	s1, s17
 800b81c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b820:	f7ff f8fc 	bl	800aa1c <__ulp>
 800b824:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b828:	ec53 2b10 	vmov	r2, r3, d0
 800b82c:	f7f4 fee4 	bl	80005f8 <__aeabi_dmul>
 800b830:	ec53 2b18 	vmov	r2, r3, d8
 800b834:	f7f4 fd2a 	bl	800028c <__adddf3>
 800b838:	4680      	mov	r8, r0
 800b83a:	4689      	mov	r9, r1
 800b83c:	e78d      	b.n	800b75a <_strtod_l+0xa82>
 800b83e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b842:	e7db      	b.n	800b7fc <_strtod_l+0xb24>
 800b844:	a314      	add	r3, pc, #80	; (adr r3, 800b898 <_strtod_l+0xbc0>)
 800b846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84a:	f7f5 f947 	bl	8000adc <__aeabi_dcmplt>
 800b84e:	e7b3      	b.n	800b7b8 <_strtod_l+0xae0>
 800b850:	2300      	movs	r3, #0
 800b852:	930a      	str	r3, [sp, #40]	; 0x28
 800b854:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b856:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b858:	6013      	str	r3, [r2, #0]
 800b85a:	f7ff ba7c 	b.w	800ad56 <_strtod_l+0x7e>
 800b85e:	2a65      	cmp	r2, #101	; 0x65
 800b860:	f43f ab75 	beq.w	800af4e <_strtod_l+0x276>
 800b864:	2a45      	cmp	r2, #69	; 0x45
 800b866:	f43f ab72 	beq.w	800af4e <_strtod_l+0x276>
 800b86a:	2301      	movs	r3, #1
 800b86c:	f7ff bbaa 	b.w	800afc4 <_strtod_l+0x2ec>
 800b870:	00000000 	.word	0x00000000
 800b874:	bff00000 	.word	0xbff00000
 800b878:	00000000 	.word	0x00000000
 800b87c:	3ff00000 	.word	0x3ff00000
 800b880:	94a03595 	.word	0x94a03595
 800b884:	3fdfffff 	.word	0x3fdfffff
 800b888:	35afe535 	.word	0x35afe535
 800b88c:	3fe00000 	.word	0x3fe00000
 800b890:	ffc00000 	.word	0xffc00000
 800b894:	41dfffff 	.word	0x41dfffff
 800b898:	94a03595 	.word	0x94a03595
 800b89c:	3fcfffff 	.word	0x3fcfffff
 800b8a0:	3ff00000 	.word	0x3ff00000
 800b8a4:	3fe00000 	.word	0x3fe00000
 800b8a8:	7ff00000 	.word	0x7ff00000
 800b8ac:	7fe00000 	.word	0x7fe00000
 800b8b0:	7c9fffff 	.word	0x7c9fffff
 800b8b4:	7fefffff 	.word	0x7fefffff

0800b8b8 <_strtod_r>:
 800b8b8:	4b01      	ldr	r3, [pc, #4]	; (800b8c0 <_strtod_r+0x8>)
 800b8ba:	f7ff ba0d 	b.w	800acd8 <_strtod_l>
 800b8be:	bf00      	nop
 800b8c0:	20000068 	.word	0x20000068

0800b8c4 <_strtol_l.constprop.0>:
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8ca:	d001      	beq.n	800b8d0 <_strtol_l.constprop.0+0xc>
 800b8cc:	2b24      	cmp	r3, #36	; 0x24
 800b8ce:	d906      	bls.n	800b8de <_strtol_l.constprop.0+0x1a>
 800b8d0:	f7fd fd8c 	bl	80093ec <__errno>
 800b8d4:	2316      	movs	r3, #22
 800b8d6:	6003      	str	r3, [r0, #0]
 800b8d8:	2000      	movs	r0, #0
 800b8da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8de:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b9c4 <_strtol_l.constprop.0+0x100>
 800b8e2:	460d      	mov	r5, r1
 800b8e4:	462e      	mov	r6, r5
 800b8e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b8ea:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b8ee:	f017 0708 	ands.w	r7, r7, #8
 800b8f2:	d1f7      	bne.n	800b8e4 <_strtol_l.constprop.0+0x20>
 800b8f4:	2c2d      	cmp	r4, #45	; 0x2d
 800b8f6:	d132      	bne.n	800b95e <_strtol_l.constprop.0+0x9a>
 800b8f8:	782c      	ldrb	r4, [r5, #0]
 800b8fa:	2701      	movs	r7, #1
 800b8fc:	1cb5      	adds	r5, r6, #2
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d05b      	beq.n	800b9ba <_strtol_l.constprop.0+0xf6>
 800b902:	2b10      	cmp	r3, #16
 800b904:	d109      	bne.n	800b91a <_strtol_l.constprop.0+0x56>
 800b906:	2c30      	cmp	r4, #48	; 0x30
 800b908:	d107      	bne.n	800b91a <_strtol_l.constprop.0+0x56>
 800b90a:	782c      	ldrb	r4, [r5, #0]
 800b90c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b910:	2c58      	cmp	r4, #88	; 0x58
 800b912:	d14d      	bne.n	800b9b0 <_strtol_l.constprop.0+0xec>
 800b914:	786c      	ldrb	r4, [r5, #1]
 800b916:	2310      	movs	r3, #16
 800b918:	3502      	adds	r5, #2
 800b91a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b91e:	f108 38ff 	add.w	r8, r8, #4294967295
 800b922:	f04f 0e00 	mov.w	lr, #0
 800b926:	fbb8 f9f3 	udiv	r9, r8, r3
 800b92a:	4676      	mov	r6, lr
 800b92c:	fb03 8a19 	mls	sl, r3, r9, r8
 800b930:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b934:	f1bc 0f09 	cmp.w	ip, #9
 800b938:	d816      	bhi.n	800b968 <_strtol_l.constprop.0+0xa4>
 800b93a:	4664      	mov	r4, ip
 800b93c:	42a3      	cmp	r3, r4
 800b93e:	dd24      	ble.n	800b98a <_strtol_l.constprop.0+0xc6>
 800b940:	f1be 3fff 	cmp.w	lr, #4294967295
 800b944:	d008      	beq.n	800b958 <_strtol_l.constprop.0+0x94>
 800b946:	45b1      	cmp	r9, r6
 800b948:	d31c      	bcc.n	800b984 <_strtol_l.constprop.0+0xc0>
 800b94a:	d101      	bne.n	800b950 <_strtol_l.constprop.0+0x8c>
 800b94c:	45a2      	cmp	sl, r4
 800b94e:	db19      	blt.n	800b984 <_strtol_l.constprop.0+0xc0>
 800b950:	fb06 4603 	mla	r6, r6, r3, r4
 800b954:	f04f 0e01 	mov.w	lr, #1
 800b958:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b95c:	e7e8      	b.n	800b930 <_strtol_l.constprop.0+0x6c>
 800b95e:	2c2b      	cmp	r4, #43	; 0x2b
 800b960:	bf04      	itt	eq
 800b962:	782c      	ldrbeq	r4, [r5, #0]
 800b964:	1cb5      	addeq	r5, r6, #2
 800b966:	e7ca      	b.n	800b8fe <_strtol_l.constprop.0+0x3a>
 800b968:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b96c:	f1bc 0f19 	cmp.w	ip, #25
 800b970:	d801      	bhi.n	800b976 <_strtol_l.constprop.0+0xb2>
 800b972:	3c37      	subs	r4, #55	; 0x37
 800b974:	e7e2      	b.n	800b93c <_strtol_l.constprop.0+0x78>
 800b976:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b97a:	f1bc 0f19 	cmp.w	ip, #25
 800b97e:	d804      	bhi.n	800b98a <_strtol_l.constprop.0+0xc6>
 800b980:	3c57      	subs	r4, #87	; 0x57
 800b982:	e7db      	b.n	800b93c <_strtol_l.constprop.0+0x78>
 800b984:	f04f 3eff 	mov.w	lr, #4294967295
 800b988:	e7e6      	b.n	800b958 <_strtol_l.constprop.0+0x94>
 800b98a:	f1be 3fff 	cmp.w	lr, #4294967295
 800b98e:	d105      	bne.n	800b99c <_strtol_l.constprop.0+0xd8>
 800b990:	2322      	movs	r3, #34	; 0x22
 800b992:	6003      	str	r3, [r0, #0]
 800b994:	4646      	mov	r6, r8
 800b996:	b942      	cbnz	r2, 800b9aa <_strtol_l.constprop.0+0xe6>
 800b998:	4630      	mov	r0, r6
 800b99a:	e79e      	b.n	800b8da <_strtol_l.constprop.0+0x16>
 800b99c:	b107      	cbz	r7, 800b9a0 <_strtol_l.constprop.0+0xdc>
 800b99e:	4276      	negs	r6, r6
 800b9a0:	2a00      	cmp	r2, #0
 800b9a2:	d0f9      	beq.n	800b998 <_strtol_l.constprop.0+0xd4>
 800b9a4:	f1be 0f00 	cmp.w	lr, #0
 800b9a8:	d000      	beq.n	800b9ac <_strtol_l.constprop.0+0xe8>
 800b9aa:	1e69      	subs	r1, r5, #1
 800b9ac:	6011      	str	r1, [r2, #0]
 800b9ae:	e7f3      	b.n	800b998 <_strtol_l.constprop.0+0xd4>
 800b9b0:	2430      	movs	r4, #48	; 0x30
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d1b1      	bne.n	800b91a <_strtol_l.constprop.0+0x56>
 800b9b6:	2308      	movs	r3, #8
 800b9b8:	e7af      	b.n	800b91a <_strtol_l.constprop.0+0x56>
 800b9ba:	2c30      	cmp	r4, #48	; 0x30
 800b9bc:	d0a5      	beq.n	800b90a <_strtol_l.constprop.0+0x46>
 800b9be:	230a      	movs	r3, #10
 800b9c0:	e7ab      	b.n	800b91a <_strtol_l.constprop.0+0x56>
 800b9c2:	bf00      	nop
 800b9c4:	0800cdc9 	.word	0x0800cdc9

0800b9c8 <_strtol_r>:
 800b9c8:	f7ff bf7c 	b.w	800b8c4 <_strtol_l.constprop.0>

0800b9cc <__ssputs_r>:
 800b9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9d0:	688e      	ldr	r6, [r1, #8]
 800b9d2:	461f      	mov	r7, r3
 800b9d4:	42be      	cmp	r6, r7
 800b9d6:	680b      	ldr	r3, [r1, #0]
 800b9d8:	4682      	mov	sl, r0
 800b9da:	460c      	mov	r4, r1
 800b9dc:	4690      	mov	r8, r2
 800b9de:	d82c      	bhi.n	800ba3a <__ssputs_r+0x6e>
 800b9e0:	898a      	ldrh	r2, [r1, #12]
 800b9e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b9e6:	d026      	beq.n	800ba36 <__ssputs_r+0x6a>
 800b9e8:	6965      	ldr	r5, [r4, #20]
 800b9ea:	6909      	ldr	r1, [r1, #16]
 800b9ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b9f0:	eba3 0901 	sub.w	r9, r3, r1
 800b9f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b9f8:	1c7b      	adds	r3, r7, #1
 800b9fa:	444b      	add	r3, r9
 800b9fc:	106d      	asrs	r5, r5, #1
 800b9fe:	429d      	cmp	r5, r3
 800ba00:	bf38      	it	cc
 800ba02:	461d      	movcc	r5, r3
 800ba04:	0553      	lsls	r3, r2, #21
 800ba06:	d527      	bpl.n	800ba58 <__ssputs_r+0x8c>
 800ba08:	4629      	mov	r1, r5
 800ba0a:	f7fe fc0f 	bl	800a22c <_malloc_r>
 800ba0e:	4606      	mov	r6, r0
 800ba10:	b360      	cbz	r0, 800ba6c <__ssputs_r+0xa0>
 800ba12:	6921      	ldr	r1, [r4, #16]
 800ba14:	464a      	mov	r2, r9
 800ba16:	f000 fa9f 	bl	800bf58 <memcpy>
 800ba1a:	89a3      	ldrh	r3, [r4, #12]
 800ba1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba24:	81a3      	strh	r3, [r4, #12]
 800ba26:	6126      	str	r6, [r4, #16]
 800ba28:	6165      	str	r5, [r4, #20]
 800ba2a:	444e      	add	r6, r9
 800ba2c:	eba5 0509 	sub.w	r5, r5, r9
 800ba30:	6026      	str	r6, [r4, #0]
 800ba32:	60a5      	str	r5, [r4, #8]
 800ba34:	463e      	mov	r6, r7
 800ba36:	42be      	cmp	r6, r7
 800ba38:	d900      	bls.n	800ba3c <__ssputs_r+0x70>
 800ba3a:	463e      	mov	r6, r7
 800ba3c:	6820      	ldr	r0, [r4, #0]
 800ba3e:	4632      	mov	r2, r6
 800ba40:	4641      	mov	r1, r8
 800ba42:	f000 fa2b 	bl	800be9c <memmove>
 800ba46:	68a3      	ldr	r3, [r4, #8]
 800ba48:	1b9b      	subs	r3, r3, r6
 800ba4a:	60a3      	str	r3, [r4, #8]
 800ba4c:	6823      	ldr	r3, [r4, #0]
 800ba4e:	4433      	add	r3, r6
 800ba50:	6023      	str	r3, [r4, #0]
 800ba52:	2000      	movs	r0, #0
 800ba54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba58:	462a      	mov	r2, r5
 800ba5a:	f000 fe32 	bl	800c6c2 <_realloc_r>
 800ba5e:	4606      	mov	r6, r0
 800ba60:	2800      	cmp	r0, #0
 800ba62:	d1e0      	bne.n	800ba26 <__ssputs_r+0x5a>
 800ba64:	6921      	ldr	r1, [r4, #16]
 800ba66:	4650      	mov	r0, sl
 800ba68:	f7fe fb6c 	bl	800a144 <_free_r>
 800ba6c:	230c      	movs	r3, #12
 800ba6e:	f8ca 3000 	str.w	r3, [sl]
 800ba72:	89a3      	ldrh	r3, [r4, #12]
 800ba74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba78:	81a3      	strh	r3, [r4, #12]
 800ba7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba7e:	e7e9      	b.n	800ba54 <__ssputs_r+0x88>

0800ba80 <_svfiprintf_r>:
 800ba80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba84:	4698      	mov	r8, r3
 800ba86:	898b      	ldrh	r3, [r1, #12]
 800ba88:	061b      	lsls	r3, r3, #24
 800ba8a:	b09d      	sub	sp, #116	; 0x74
 800ba8c:	4607      	mov	r7, r0
 800ba8e:	460d      	mov	r5, r1
 800ba90:	4614      	mov	r4, r2
 800ba92:	d50e      	bpl.n	800bab2 <_svfiprintf_r+0x32>
 800ba94:	690b      	ldr	r3, [r1, #16]
 800ba96:	b963      	cbnz	r3, 800bab2 <_svfiprintf_r+0x32>
 800ba98:	2140      	movs	r1, #64	; 0x40
 800ba9a:	f7fe fbc7 	bl	800a22c <_malloc_r>
 800ba9e:	6028      	str	r0, [r5, #0]
 800baa0:	6128      	str	r0, [r5, #16]
 800baa2:	b920      	cbnz	r0, 800baae <_svfiprintf_r+0x2e>
 800baa4:	230c      	movs	r3, #12
 800baa6:	603b      	str	r3, [r7, #0]
 800baa8:	f04f 30ff 	mov.w	r0, #4294967295
 800baac:	e0d0      	b.n	800bc50 <_svfiprintf_r+0x1d0>
 800baae:	2340      	movs	r3, #64	; 0x40
 800bab0:	616b      	str	r3, [r5, #20]
 800bab2:	2300      	movs	r3, #0
 800bab4:	9309      	str	r3, [sp, #36]	; 0x24
 800bab6:	2320      	movs	r3, #32
 800bab8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800babc:	f8cd 800c 	str.w	r8, [sp, #12]
 800bac0:	2330      	movs	r3, #48	; 0x30
 800bac2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bc68 <_svfiprintf_r+0x1e8>
 800bac6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800baca:	f04f 0901 	mov.w	r9, #1
 800bace:	4623      	mov	r3, r4
 800bad0:	469a      	mov	sl, r3
 800bad2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bad6:	b10a      	cbz	r2, 800badc <_svfiprintf_r+0x5c>
 800bad8:	2a25      	cmp	r2, #37	; 0x25
 800bada:	d1f9      	bne.n	800bad0 <_svfiprintf_r+0x50>
 800badc:	ebba 0b04 	subs.w	fp, sl, r4
 800bae0:	d00b      	beq.n	800bafa <_svfiprintf_r+0x7a>
 800bae2:	465b      	mov	r3, fp
 800bae4:	4622      	mov	r2, r4
 800bae6:	4629      	mov	r1, r5
 800bae8:	4638      	mov	r0, r7
 800baea:	f7ff ff6f 	bl	800b9cc <__ssputs_r>
 800baee:	3001      	adds	r0, #1
 800baf0:	f000 80a9 	beq.w	800bc46 <_svfiprintf_r+0x1c6>
 800baf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800baf6:	445a      	add	r2, fp
 800baf8:	9209      	str	r2, [sp, #36]	; 0x24
 800bafa:	f89a 3000 	ldrb.w	r3, [sl]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	f000 80a1 	beq.w	800bc46 <_svfiprintf_r+0x1c6>
 800bb04:	2300      	movs	r3, #0
 800bb06:	f04f 32ff 	mov.w	r2, #4294967295
 800bb0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb0e:	f10a 0a01 	add.w	sl, sl, #1
 800bb12:	9304      	str	r3, [sp, #16]
 800bb14:	9307      	str	r3, [sp, #28]
 800bb16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb1a:	931a      	str	r3, [sp, #104]	; 0x68
 800bb1c:	4654      	mov	r4, sl
 800bb1e:	2205      	movs	r2, #5
 800bb20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb24:	4850      	ldr	r0, [pc, #320]	; (800bc68 <_svfiprintf_r+0x1e8>)
 800bb26:	f7f4 fb53 	bl	80001d0 <memchr>
 800bb2a:	9a04      	ldr	r2, [sp, #16]
 800bb2c:	b9d8      	cbnz	r0, 800bb66 <_svfiprintf_r+0xe6>
 800bb2e:	06d0      	lsls	r0, r2, #27
 800bb30:	bf44      	itt	mi
 800bb32:	2320      	movmi	r3, #32
 800bb34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb38:	0711      	lsls	r1, r2, #28
 800bb3a:	bf44      	itt	mi
 800bb3c:	232b      	movmi	r3, #43	; 0x2b
 800bb3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb42:	f89a 3000 	ldrb.w	r3, [sl]
 800bb46:	2b2a      	cmp	r3, #42	; 0x2a
 800bb48:	d015      	beq.n	800bb76 <_svfiprintf_r+0xf6>
 800bb4a:	9a07      	ldr	r2, [sp, #28]
 800bb4c:	4654      	mov	r4, sl
 800bb4e:	2000      	movs	r0, #0
 800bb50:	f04f 0c0a 	mov.w	ip, #10
 800bb54:	4621      	mov	r1, r4
 800bb56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb5a:	3b30      	subs	r3, #48	; 0x30
 800bb5c:	2b09      	cmp	r3, #9
 800bb5e:	d94d      	bls.n	800bbfc <_svfiprintf_r+0x17c>
 800bb60:	b1b0      	cbz	r0, 800bb90 <_svfiprintf_r+0x110>
 800bb62:	9207      	str	r2, [sp, #28]
 800bb64:	e014      	b.n	800bb90 <_svfiprintf_r+0x110>
 800bb66:	eba0 0308 	sub.w	r3, r0, r8
 800bb6a:	fa09 f303 	lsl.w	r3, r9, r3
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	9304      	str	r3, [sp, #16]
 800bb72:	46a2      	mov	sl, r4
 800bb74:	e7d2      	b.n	800bb1c <_svfiprintf_r+0x9c>
 800bb76:	9b03      	ldr	r3, [sp, #12]
 800bb78:	1d19      	adds	r1, r3, #4
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	9103      	str	r1, [sp, #12]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	bfbb      	ittet	lt
 800bb82:	425b      	neglt	r3, r3
 800bb84:	f042 0202 	orrlt.w	r2, r2, #2
 800bb88:	9307      	strge	r3, [sp, #28]
 800bb8a:	9307      	strlt	r3, [sp, #28]
 800bb8c:	bfb8      	it	lt
 800bb8e:	9204      	strlt	r2, [sp, #16]
 800bb90:	7823      	ldrb	r3, [r4, #0]
 800bb92:	2b2e      	cmp	r3, #46	; 0x2e
 800bb94:	d10c      	bne.n	800bbb0 <_svfiprintf_r+0x130>
 800bb96:	7863      	ldrb	r3, [r4, #1]
 800bb98:	2b2a      	cmp	r3, #42	; 0x2a
 800bb9a:	d134      	bne.n	800bc06 <_svfiprintf_r+0x186>
 800bb9c:	9b03      	ldr	r3, [sp, #12]
 800bb9e:	1d1a      	adds	r2, r3, #4
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	9203      	str	r2, [sp, #12]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	bfb8      	it	lt
 800bba8:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbac:	3402      	adds	r4, #2
 800bbae:	9305      	str	r3, [sp, #20]
 800bbb0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bc78 <_svfiprintf_r+0x1f8>
 800bbb4:	7821      	ldrb	r1, [r4, #0]
 800bbb6:	2203      	movs	r2, #3
 800bbb8:	4650      	mov	r0, sl
 800bbba:	f7f4 fb09 	bl	80001d0 <memchr>
 800bbbe:	b138      	cbz	r0, 800bbd0 <_svfiprintf_r+0x150>
 800bbc0:	9b04      	ldr	r3, [sp, #16]
 800bbc2:	eba0 000a 	sub.w	r0, r0, sl
 800bbc6:	2240      	movs	r2, #64	; 0x40
 800bbc8:	4082      	lsls	r2, r0
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	3401      	adds	r4, #1
 800bbce:	9304      	str	r3, [sp, #16]
 800bbd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbd4:	4825      	ldr	r0, [pc, #148]	; (800bc6c <_svfiprintf_r+0x1ec>)
 800bbd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbda:	2206      	movs	r2, #6
 800bbdc:	f7f4 faf8 	bl	80001d0 <memchr>
 800bbe0:	2800      	cmp	r0, #0
 800bbe2:	d038      	beq.n	800bc56 <_svfiprintf_r+0x1d6>
 800bbe4:	4b22      	ldr	r3, [pc, #136]	; (800bc70 <_svfiprintf_r+0x1f0>)
 800bbe6:	bb1b      	cbnz	r3, 800bc30 <_svfiprintf_r+0x1b0>
 800bbe8:	9b03      	ldr	r3, [sp, #12]
 800bbea:	3307      	adds	r3, #7
 800bbec:	f023 0307 	bic.w	r3, r3, #7
 800bbf0:	3308      	adds	r3, #8
 800bbf2:	9303      	str	r3, [sp, #12]
 800bbf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbf6:	4433      	add	r3, r6
 800bbf8:	9309      	str	r3, [sp, #36]	; 0x24
 800bbfa:	e768      	b.n	800bace <_svfiprintf_r+0x4e>
 800bbfc:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc00:	460c      	mov	r4, r1
 800bc02:	2001      	movs	r0, #1
 800bc04:	e7a6      	b.n	800bb54 <_svfiprintf_r+0xd4>
 800bc06:	2300      	movs	r3, #0
 800bc08:	3401      	adds	r4, #1
 800bc0a:	9305      	str	r3, [sp, #20]
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	f04f 0c0a 	mov.w	ip, #10
 800bc12:	4620      	mov	r0, r4
 800bc14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc18:	3a30      	subs	r2, #48	; 0x30
 800bc1a:	2a09      	cmp	r2, #9
 800bc1c:	d903      	bls.n	800bc26 <_svfiprintf_r+0x1a6>
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d0c6      	beq.n	800bbb0 <_svfiprintf_r+0x130>
 800bc22:	9105      	str	r1, [sp, #20]
 800bc24:	e7c4      	b.n	800bbb0 <_svfiprintf_r+0x130>
 800bc26:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	e7f0      	b.n	800bc12 <_svfiprintf_r+0x192>
 800bc30:	ab03      	add	r3, sp, #12
 800bc32:	9300      	str	r3, [sp, #0]
 800bc34:	462a      	mov	r2, r5
 800bc36:	4b0f      	ldr	r3, [pc, #60]	; (800bc74 <_svfiprintf_r+0x1f4>)
 800bc38:	a904      	add	r1, sp, #16
 800bc3a:	4638      	mov	r0, r7
 800bc3c:	f7fc fbaa 	bl	8008394 <_printf_float>
 800bc40:	1c42      	adds	r2, r0, #1
 800bc42:	4606      	mov	r6, r0
 800bc44:	d1d6      	bne.n	800bbf4 <_svfiprintf_r+0x174>
 800bc46:	89ab      	ldrh	r3, [r5, #12]
 800bc48:	065b      	lsls	r3, r3, #25
 800bc4a:	f53f af2d 	bmi.w	800baa8 <_svfiprintf_r+0x28>
 800bc4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc50:	b01d      	add	sp, #116	; 0x74
 800bc52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc56:	ab03      	add	r3, sp, #12
 800bc58:	9300      	str	r3, [sp, #0]
 800bc5a:	462a      	mov	r2, r5
 800bc5c:	4b05      	ldr	r3, [pc, #20]	; (800bc74 <_svfiprintf_r+0x1f4>)
 800bc5e:	a904      	add	r1, sp, #16
 800bc60:	4638      	mov	r0, r7
 800bc62:	f7fc fe3b 	bl	80088dc <_printf_i>
 800bc66:	e7eb      	b.n	800bc40 <_svfiprintf_r+0x1c0>
 800bc68:	0800cec9 	.word	0x0800cec9
 800bc6c:	0800ced3 	.word	0x0800ced3
 800bc70:	08008395 	.word	0x08008395
 800bc74:	0800b9cd 	.word	0x0800b9cd
 800bc78:	0800cecf 	.word	0x0800cecf

0800bc7c <__sflush_r>:
 800bc7c:	898a      	ldrh	r2, [r1, #12]
 800bc7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc82:	4605      	mov	r5, r0
 800bc84:	0710      	lsls	r0, r2, #28
 800bc86:	460c      	mov	r4, r1
 800bc88:	d458      	bmi.n	800bd3c <__sflush_r+0xc0>
 800bc8a:	684b      	ldr	r3, [r1, #4]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	dc05      	bgt.n	800bc9c <__sflush_r+0x20>
 800bc90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	dc02      	bgt.n	800bc9c <__sflush_r+0x20>
 800bc96:	2000      	movs	r0, #0
 800bc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc9e:	2e00      	cmp	r6, #0
 800bca0:	d0f9      	beq.n	800bc96 <__sflush_r+0x1a>
 800bca2:	2300      	movs	r3, #0
 800bca4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bca8:	682f      	ldr	r7, [r5, #0]
 800bcaa:	6a21      	ldr	r1, [r4, #32]
 800bcac:	602b      	str	r3, [r5, #0]
 800bcae:	d032      	beq.n	800bd16 <__sflush_r+0x9a>
 800bcb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bcb2:	89a3      	ldrh	r3, [r4, #12]
 800bcb4:	075a      	lsls	r2, r3, #29
 800bcb6:	d505      	bpl.n	800bcc4 <__sflush_r+0x48>
 800bcb8:	6863      	ldr	r3, [r4, #4]
 800bcba:	1ac0      	subs	r0, r0, r3
 800bcbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bcbe:	b10b      	cbz	r3, 800bcc4 <__sflush_r+0x48>
 800bcc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bcc2:	1ac0      	subs	r0, r0, r3
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcca:	6a21      	ldr	r1, [r4, #32]
 800bccc:	4628      	mov	r0, r5
 800bcce:	47b0      	blx	r6
 800bcd0:	1c43      	adds	r3, r0, #1
 800bcd2:	89a3      	ldrh	r3, [r4, #12]
 800bcd4:	d106      	bne.n	800bce4 <__sflush_r+0x68>
 800bcd6:	6829      	ldr	r1, [r5, #0]
 800bcd8:	291d      	cmp	r1, #29
 800bcda:	d82b      	bhi.n	800bd34 <__sflush_r+0xb8>
 800bcdc:	4a29      	ldr	r2, [pc, #164]	; (800bd84 <__sflush_r+0x108>)
 800bcde:	410a      	asrs	r2, r1
 800bce0:	07d6      	lsls	r6, r2, #31
 800bce2:	d427      	bmi.n	800bd34 <__sflush_r+0xb8>
 800bce4:	2200      	movs	r2, #0
 800bce6:	6062      	str	r2, [r4, #4]
 800bce8:	04d9      	lsls	r1, r3, #19
 800bcea:	6922      	ldr	r2, [r4, #16]
 800bcec:	6022      	str	r2, [r4, #0]
 800bcee:	d504      	bpl.n	800bcfa <__sflush_r+0x7e>
 800bcf0:	1c42      	adds	r2, r0, #1
 800bcf2:	d101      	bne.n	800bcf8 <__sflush_r+0x7c>
 800bcf4:	682b      	ldr	r3, [r5, #0]
 800bcf6:	b903      	cbnz	r3, 800bcfa <__sflush_r+0x7e>
 800bcf8:	6560      	str	r0, [r4, #84]	; 0x54
 800bcfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcfc:	602f      	str	r7, [r5, #0]
 800bcfe:	2900      	cmp	r1, #0
 800bd00:	d0c9      	beq.n	800bc96 <__sflush_r+0x1a>
 800bd02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd06:	4299      	cmp	r1, r3
 800bd08:	d002      	beq.n	800bd10 <__sflush_r+0x94>
 800bd0a:	4628      	mov	r0, r5
 800bd0c:	f7fe fa1a 	bl	800a144 <_free_r>
 800bd10:	2000      	movs	r0, #0
 800bd12:	6360      	str	r0, [r4, #52]	; 0x34
 800bd14:	e7c0      	b.n	800bc98 <__sflush_r+0x1c>
 800bd16:	2301      	movs	r3, #1
 800bd18:	4628      	mov	r0, r5
 800bd1a:	47b0      	blx	r6
 800bd1c:	1c41      	adds	r1, r0, #1
 800bd1e:	d1c8      	bne.n	800bcb2 <__sflush_r+0x36>
 800bd20:	682b      	ldr	r3, [r5, #0]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d0c5      	beq.n	800bcb2 <__sflush_r+0x36>
 800bd26:	2b1d      	cmp	r3, #29
 800bd28:	d001      	beq.n	800bd2e <__sflush_r+0xb2>
 800bd2a:	2b16      	cmp	r3, #22
 800bd2c:	d101      	bne.n	800bd32 <__sflush_r+0xb6>
 800bd2e:	602f      	str	r7, [r5, #0]
 800bd30:	e7b1      	b.n	800bc96 <__sflush_r+0x1a>
 800bd32:	89a3      	ldrh	r3, [r4, #12]
 800bd34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd38:	81a3      	strh	r3, [r4, #12]
 800bd3a:	e7ad      	b.n	800bc98 <__sflush_r+0x1c>
 800bd3c:	690f      	ldr	r7, [r1, #16]
 800bd3e:	2f00      	cmp	r7, #0
 800bd40:	d0a9      	beq.n	800bc96 <__sflush_r+0x1a>
 800bd42:	0793      	lsls	r3, r2, #30
 800bd44:	680e      	ldr	r6, [r1, #0]
 800bd46:	bf08      	it	eq
 800bd48:	694b      	ldreq	r3, [r1, #20]
 800bd4a:	600f      	str	r7, [r1, #0]
 800bd4c:	bf18      	it	ne
 800bd4e:	2300      	movne	r3, #0
 800bd50:	eba6 0807 	sub.w	r8, r6, r7
 800bd54:	608b      	str	r3, [r1, #8]
 800bd56:	f1b8 0f00 	cmp.w	r8, #0
 800bd5a:	dd9c      	ble.n	800bc96 <__sflush_r+0x1a>
 800bd5c:	6a21      	ldr	r1, [r4, #32]
 800bd5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd60:	4643      	mov	r3, r8
 800bd62:	463a      	mov	r2, r7
 800bd64:	4628      	mov	r0, r5
 800bd66:	47b0      	blx	r6
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	dc06      	bgt.n	800bd7a <__sflush_r+0xfe>
 800bd6c:	89a3      	ldrh	r3, [r4, #12]
 800bd6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd72:	81a3      	strh	r3, [r4, #12]
 800bd74:	f04f 30ff 	mov.w	r0, #4294967295
 800bd78:	e78e      	b.n	800bc98 <__sflush_r+0x1c>
 800bd7a:	4407      	add	r7, r0
 800bd7c:	eba8 0800 	sub.w	r8, r8, r0
 800bd80:	e7e9      	b.n	800bd56 <__sflush_r+0xda>
 800bd82:	bf00      	nop
 800bd84:	dfbffffe 	.word	0xdfbffffe

0800bd88 <_fflush_r>:
 800bd88:	b538      	push	{r3, r4, r5, lr}
 800bd8a:	690b      	ldr	r3, [r1, #16]
 800bd8c:	4605      	mov	r5, r0
 800bd8e:	460c      	mov	r4, r1
 800bd90:	b913      	cbnz	r3, 800bd98 <_fflush_r+0x10>
 800bd92:	2500      	movs	r5, #0
 800bd94:	4628      	mov	r0, r5
 800bd96:	bd38      	pop	{r3, r4, r5, pc}
 800bd98:	b118      	cbz	r0, 800bda2 <_fflush_r+0x1a>
 800bd9a:	6a03      	ldr	r3, [r0, #32]
 800bd9c:	b90b      	cbnz	r3, 800bda2 <_fflush_r+0x1a>
 800bd9e:	f7fd f949 	bl	8009034 <__sinit>
 800bda2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d0f3      	beq.n	800bd92 <_fflush_r+0xa>
 800bdaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bdac:	07d0      	lsls	r0, r2, #31
 800bdae:	d404      	bmi.n	800bdba <_fflush_r+0x32>
 800bdb0:	0599      	lsls	r1, r3, #22
 800bdb2:	d402      	bmi.n	800bdba <_fflush_r+0x32>
 800bdb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdb6:	f7fd fb43 	bl	8009440 <__retarget_lock_acquire_recursive>
 800bdba:	4628      	mov	r0, r5
 800bdbc:	4621      	mov	r1, r4
 800bdbe:	f7ff ff5d 	bl	800bc7c <__sflush_r>
 800bdc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bdc4:	07da      	lsls	r2, r3, #31
 800bdc6:	4605      	mov	r5, r0
 800bdc8:	d4e4      	bmi.n	800bd94 <_fflush_r+0xc>
 800bdca:	89a3      	ldrh	r3, [r4, #12]
 800bdcc:	059b      	lsls	r3, r3, #22
 800bdce:	d4e1      	bmi.n	800bd94 <_fflush_r+0xc>
 800bdd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdd2:	f7fd fb36 	bl	8009442 <__retarget_lock_release_recursive>
 800bdd6:	e7dd      	b.n	800bd94 <_fflush_r+0xc>

0800bdd8 <__swhatbuf_r>:
 800bdd8:	b570      	push	{r4, r5, r6, lr}
 800bdda:	460c      	mov	r4, r1
 800bddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bde0:	2900      	cmp	r1, #0
 800bde2:	b096      	sub	sp, #88	; 0x58
 800bde4:	4615      	mov	r5, r2
 800bde6:	461e      	mov	r6, r3
 800bde8:	da0d      	bge.n	800be06 <__swhatbuf_r+0x2e>
 800bdea:	89a3      	ldrh	r3, [r4, #12]
 800bdec:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bdf0:	f04f 0100 	mov.w	r1, #0
 800bdf4:	bf0c      	ite	eq
 800bdf6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bdfa:	2340      	movne	r3, #64	; 0x40
 800bdfc:	2000      	movs	r0, #0
 800bdfe:	6031      	str	r1, [r6, #0]
 800be00:	602b      	str	r3, [r5, #0]
 800be02:	b016      	add	sp, #88	; 0x58
 800be04:	bd70      	pop	{r4, r5, r6, pc}
 800be06:	466a      	mov	r2, sp
 800be08:	f000 f874 	bl	800bef4 <_fstat_r>
 800be0c:	2800      	cmp	r0, #0
 800be0e:	dbec      	blt.n	800bdea <__swhatbuf_r+0x12>
 800be10:	9901      	ldr	r1, [sp, #4]
 800be12:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800be16:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800be1a:	4259      	negs	r1, r3
 800be1c:	4159      	adcs	r1, r3
 800be1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be22:	e7eb      	b.n	800bdfc <__swhatbuf_r+0x24>

0800be24 <__smakebuf_r>:
 800be24:	898b      	ldrh	r3, [r1, #12]
 800be26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be28:	079d      	lsls	r5, r3, #30
 800be2a:	4606      	mov	r6, r0
 800be2c:	460c      	mov	r4, r1
 800be2e:	d507      	bpl.n	800be40 <__smakebuf_r+0x1c>
 800be30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800be34:	6023      	str	r3, [r4, #0]
 800be36:	6123      	str	r3, [r4, #16]
 800be38:	2301      	movs	r3, #1
 800be3a:	6163      	str	r3, [r4, #20]
 800be3c:	b002      	add	sp, #8
 800be3e:	bd70      	pop	{r4, r5, r6, pc}
 800be40:	ab01      	add	r3, sp, #4
 800be42:	466a      	mov	r2, sp
 800be44:	f7ff ffc8 	bl	800bdd8 <__swhatbuf_r>
 800be48:	9900      	ldr	r1, [sp, #0]
 800be4a:	4605      	mov	r5, r0
 800be4c:	4630      	mov	r0, r6
 800be4e:	f7fe f9ed 	bl	800a22c <_malloc_r>
 800be52:	b948      	cbnz	r0, 800be68 <__smakebuf_r+0x44>
 800be54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be58:	059a      	lsls	r2, r3, #22
 800be5a:	d4ef      	bmi.n	800be3c <__smakebuf_r+0x18>
 800be5c:	f023 0303 	bic.w	r3, r3, #3
 800be60:	f043 0302 	orr.w	r3, r3, #2
 800be64:	81a3      	strh	r3, [r4, #12]
 800be66:	e7e3      	b.n	800be30 <__smakebuf_r+0xc>
 800be68:	89a3      	ldrh	r3, [r4, #12]
 800be6a:	6020      	str	r0, [r4, #0]
 800be6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be70:	81a3      	strh	r3, [r4, #12]
 800be72:	9b00      	ldr	r3, [sp, #0]
 800be74:	6163      	str	r3, [r4, #20]
 800be76:	9b01      	ldr	r3, [sp, #4]
 800be78:	6120      	str	r0, [r4, #16]
 800be7a:	b15b      	cbz	r3, 800be94 <__smakebuf_r+0x70>
 800be7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be80:	4630      	mov	r0, r6
 800be82:	f000 f849 	bl	800bf18 <_isatty_r>
 800be86:	b128      	cbz	r0, 800be94 <__smakebuf_r+0x70>
 800be88:	89a3      	ldrh	r3, [r4, #12]
 800be8a:	f023 0303 	bic.w	r3, r3, #3
 800be8e:	f043 0301 	orr.w	r3, r3, #1
 800be92:	81a3      	strh	r3, [r4, #12]
 800be94:	89a3      	ldrh	r3, [r4, #12]
 800be96:	431d      	orrs	r5, r3
 800be98:	81a5      	strh	r5, [r4, #12]
 800be9a:	e7cf      	b.n	800be3c <__smakebuf_r+0x18>

0800be9c <memmove>:
 800be9c:	4288      	cmp	r0, r1
 800be9e:	b510      	push	{r4, lr}
 800bea0:	eb01 0402 	add.w	r4, r1, r2
 800bea4:	d902      	bls.n	800beac <memmove+0x10>
 800bea6:	4284      	cmp	r4, r0
 800bea8:	4623      	mov	r3, r4
 800beaa:	d807      	bhi.n	800bebc <memmove+0x20>
 800beac:	1e43      	subs	r3, r0, #1
 800beae:	42a1      	cmp	r1, r4
 800beb0:	d008      	beq.n	800bec4 <memmove+0x28>
 800beb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800beb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800beba:	e7f8      	b.n	800beae <memmove+0x12>
 800bebc:	4402      	add	r2, r0
 800bebe:	4601      	mov	r1, r0
 800bec0:	428a      	cmp	r2, r1
 800bec2:	d100      	bne.n	800bec6 <memmove+0x2a>
 800bec4:	bd10      	pop	{r4, pc}
 800bec6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800beca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bece:	e7f7      	b.n	800bec0 <memmove+0x24>

0800bed0 <strncmp>:
 800bed0:	b510      	push	{r4, lr}
 800bed2:	b16a      	cbz	r2, 800bef0 <strncmp+0x20>
 800bed4:	3901      	subs	r1, #1
 800bed6:	1884      	adds	r4, r0, r2
 800bed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bedc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d103      	bne.n	800beec <strncmp+0x1c>
 800bee4:	42a0      	cmp	r0, r4
 800bee6:	d001      	beq.n	800beec <strncmp+0x1c>
 800bee8:	2a00      	cmp	r2, #0
 800beea:	d1f5      	bne.n	800bed8 <strncmp+0x8>
 800beec:	1ad0      	subs	r0, r2, r3
 800beee:	bd10      	pop	{r4, pc}
 800bef0:	4610      	mov	r0, r2
 800bef2:	e7fc      	b.n	800beee <strncmp+0x1e>

0800bef4 <_fstat_r>:
 800bef4:	b538      	push	{r3, r4, r5, lr}
 800bef6:	4d07      	ldr	r5, [pc, #28]	; (800bf14 <_fstat_r+0x20>)
 800bef8:	2300      	movs	r3, #0
 800befa:	4604      	mov	r4, r0
 800befc:	4608      	mov	r0, r1
 800befe:	4611      	mov	r1, r2
 800bf00:	602b      	str	r3, [r5, #0]
 800bf02:	f7f6 f9b0 	bl	8002266 <_fstat>
 800bf06:	1c43      	adds	r3, r0, #1
 800bf08:	d102      	bne.n	800bf10 <_fstat_r+0x1c>
 800bf0a:	682b      	ldr	r3, [r5, #0]
 800bf0c:	b103      	cbz	r3, 800bf10 <_fstat_r+0x1c>
 800bf0e:	6023      	str	r3, [r4, #0]
 800bf10:	bd38      	pop	{r3, r4, r5, pc}
 800bf12:	bf00      	nop
 800bf14:	200005d0 	.word	0x200005d0

0800bf18 <_isatty_r>:
 800bf18:	b538      	push	{r3, r4, r5, lr}
 800bf1a:	4d06      	ldr	r5, [pc, #24]	; (800bf34 <_isatty_r+0x1c>)
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	4604      	mov	r4, r0
 800bf20:	4608      	mov	r0, r1
 800bf22:	602b      	str	r3, [r5, #0]
 800bf24:	f7f6 f9af 	bl	8002286 <_isatty>
 800bf28:	1c43      	adds	r3, r0, #1
 800bf2a:	d102      	bne.n	800bf32 <_isatty_r+0x1a>
 800bf2c:	682b      	ldr	r3, [r5, #0]
 800bf2e:	b103      	cbz	r3, 800bf32 <_isatty_r+0x1a>
 800bf30:	6023      	str	r3, [r4, #0]
 800bf32:	bd38      	pop	{r3, r4, r5, pc}
 800bf34:	200005d0 	.word	0x200005d0

0800bf38 <_sbrk_r>:
 800bf38:	b538      	push	{r3, r4, r5, lr}
 800bf3a:	4d06      	ldr	r5, [pc, #24]	; (800bf54 <_sbrk_r+0x1c>)
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	4604      	mov	r4, r0
 800bf40:	4608      	mov	r0, r1
 800bf42:	602b      	str	r3, [r5, #0]
 800bf44:	f7f6 f9b8 	bl	80022b8 <_sbrk>
 800bf48:	1c43      	adds	r3, r0, #1
 800bf4a:	d102      	bne.n	800bf52 <_sbrk_r+0x1a>
 800bf4c:	682b      	ldr	r3, [r5, #0]
 800bf4e:	b103      	cbz	r3, 800bf52 <_sbrk_r+0x1a>
 800bf50:	6023      	str	r3, [r4, #0]
 800bf52:	bd38      	pop	{r3, r4, r5, pc}
 800bf54:	200005d0 	.word	0x200005d0

0800bf58 <memcpy>:
 800bf58:	440a      	add	r2, r1
 800bf5a:	4291      	cmp	r1, r2
 800bf5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf60:	d100      	bne.n	800bf64 <memcpy+0xc>
 800bf62:	4770      	bx	lr
 800bf64:	b510      	push	{r4, lr}
 800bf66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf6e:	4291      	cmp	r1, r2
 800bf70:	d1f9      	bne.n	800bf66 <memcpy+0xe>
 800bf72:	bd10      	pop	{r4, pc}
 800bf74:	0000      	movs	r0, r0
	...

0800bf78 <nan>:
 800bf78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bf80 <nan+0x8>
 800bf7c:	4770      	bx	lr
 800bf7e:	bf00      	nop
 800bf80:	00000000 	.word	0x00000000
 800bf84:	7ff80000 	.word	0x7ff80000

0800bf88 <__assert_func>:
 800bf88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf8a:	4614      	mov	r4, r2
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	4b09      	ldr	r3, [pc, #36]	; (800bfb4 <__assert_func+0x2c>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	4605      	mov	r5, r0
 800bf94:	68d8      	ldr	r0, [r3, #12]
 800bf96:	b14c      	cbz	r4, 800bfac <__assert_func+0x24>
 800bf98:	4b07      	ldr	r3, [pc, #28]	; (800bfb8 <__assert_func+0x30>)
 800bf9a:	9100      	str	r1, [sp, #0]
 800bf9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bfa0:	4906      	ldr	r1, [pc, #24]	; (800bfbc <__assert_func+0x34>)
 800bfa2:	462b      	mov	r3, r5
 800bfa4:	f000 fbca 	bl	800c73c <fiprintf>
 800bfa8:	f000 fbda 	bl	800c760 <abort>
 800bfac:	4b04      	ldr	r3, [pc, #16]	; (800bfc0 <__assert_func+0x38>)
 800bfae:	461c      	mov	r4, r3
 800bfb0:	e7f3      	b.n	800bf9a <__assert_func+0x12>
 800bfb2:	bf00      	nop
 800bfb4:	20000064 	.word	0x20000064
 800bfb8:	0800cee2 	.word	0x0800cee2
 800bfbc:	0800ceef 	.word	0x0800ceef
 800bfc0:	0800cf1d 	.word	0x0800cf1d

0800bfc4 <_calloc_r>:
 800bfc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfc6:	fba1 2402 	umull	r2, r4, r1, r2
 800bfca:	b94c      	cbnz	r4, 800bfe0 <_calloc_r+0x1c>
 800bfcc:	4611      	mov	r1, r2
 800bfce:	9201      	str	r2, [sp, #4]
 800bfd0:	f7fe f92c 	bl	800a22c <_malloc_r>
 800bfd4:	9a01      	ldr	r2, [sp, #4]
 800bfd6:	4605      	mov	r5, r0
 800bfd8:	b930      	cbnz	r0, 800bfe8 <_calloc_r+0x24>
 800bfda:	4628      	mov	r0, r5
 800bfdc:	b003      	add	sp, #12
 800bfde:	bd30      	pop	{r4, r5, pc}
 800bfe0:	220c      	movs	r2, #12
 800bfe2:	6002      	str	r2, [r0, #0]
 800bfe4:	2500      	movs	r5, #0
 800bfe6:	e7f8      	b.n	800bfda <_calloc_r+0x16>
 800bfe8:	4621      	mov	r1, r4
 800bfea:	f7fd f9ad 	bl	8009348 <memset>
 800bfee:	e7f4      	b.n	800bfda <_calloc_r+0x16>

0800bff0 <rshift>:
 800bff0:	6903      	ldr	r3, [r0, #16]
 800bff2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bff6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bffa:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bffe:	f100 0414 	add.w	r4, r0, #20
 800c002:	dd45      	ble.n	800c090 <rshift+0xa0>
 800c004:	f011 011f 	ands.w	r1, r1, #31
 800c008:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c00c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c010:	d10c      	bne.n	800c02c <rshift+0x3c>
 800c012:	f100 0710 	add.w	r7, r0, #16
 800c016:	4629      	mov	r1, r5
 800c018:	42b1      	cmp	r1, r6
 800c01a:	d334      	bcc.n	800c086 <rshift+0x96>
 800c01c:	1a9b      	subs	r3, r3, r2
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	1eea      	subs	r2, r5, #3
 800c022:	4296      	cmp	r6, r2
 800c024:	bf38      	it	cc
 800c026:	2300      	movcc	r3, #0
 800c028:	4423      	add	r3, r4
 800c02a:	e015      	b.n	800c058 <rshift+0x68>
 800c02c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c030:	f1c1 0820 	rsb	r8, r1, #32
 800c034:	40cf      	lsrs	r7, r1
 800c036:	f105 0e04 	add.w	lr, r5, #4
 800c03a:	46a1      	mov	r9, r4
 800c03c:	4576      	cmp	r6, lr
 800c03e:	46f4      	mov	ip, lr
 800c040:	d815      	bhi.n	800c06e <rshift+0x7e>
 800c042:	1a9a      	subs	r2, r3, r2
 800c044:	0092      	lsls	r2, r2, #2
 800c046:	3a04      	subs	r2, #4
 800c048:	3501      	adds	r5, #1
 800c04a:	42ae      	cmp	r6, r5
 800c04c:	bf38      	it	cc
 800c04e:	2200      	movcc	r2, #0
 800c050:	18a3      	adds	r3, r4, r2
 800c052:	50a7      	str	r7, [r4, r2]
 800c054:	b107      	cbz	r7, 800c058 <rshift+0x68>
 800c056:	3304      	adds	r3, #4
 800c058:	1b1a      	subs	r2, r3, r4
 800c05a:	42a3      	cmp	r3, r4
 800c05c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c060:	bf08      	it	eq
 800c062:	2300      	moveq	r3, #0
 800c064:	6102      	str	r2, [r0, #16]
 800c066:	bf08      	it	eq
 800c068:	6143      	streq	r3, [r0, #20]
 800c06a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c06e:	f8dc c000 	ldr.w	ip, [ip]
 800c072:	fa0c fc08 	lsl.w	ip, ip, r8
 800c076:	ea4c 0707 	orr.w	r7, ip, r7
 800c07a:	f849 7b04 	str.w	r7, [r9], #4
 800c07e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c082:	40cf      	lsrs	r7, r1
 800c084:	e7da      	b.n	800c03c <rshift+0x4c>
 800c086:	f851 cb04 	ldr.w	ip, [r1], #4
 800c08a:	f847 cf04 	str.w	ip, [r7, #4]!
 800c08e:	e7c3      	b.n	800c018 <rshift+0x28>
 800c090:	4623      	mov	r3, r4
 800c092:	e7e1      	b.n	800c058 <rshift+0x68>

0800c094 <__hexdig_fun>:
 800c094:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c098:	2b09      	cmp	r3, #9
 800c09a:	d802      	bhi.n	800c0a2 <__hexdig_fun+0xe>
 800c09c:	3820      	subs	r0, #32
 800c09e:	b2c0      	uxtb	r0, r0
 800c0a0:	4770      	bx	lr
 800c0a2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c0a6:	2b05      	cmp	r3, #5
 800c0a8:	d801      	bhi.n	800c0ae <__hexdig_fun+0x1a>
 800c0aa:	3847      	subs	r0, #71	; 0x47
 800c0ac:	e7f7      	b.n	800c09e <__hexdig_fun+0xa>
 800c0ae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c0b2:	2b05      	cmp	r3, #5
 800c0b4:	d801      	bhi.n	800c0ba <__hexdig_fun+0x26>
 800c0b6:	3827      	subs	r0, #39	; 0x27
 800c0b8:	e7f1      	b.n	800c09e <__hexdig_fun+0xa>
 800c0ba:	2000      	movs	r0, #0
 800c0bc:	4770      	bx	lr
	...

0800c0c0 <__gethex>:
 800c0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0c4:	4617      	mov	r7, r2
 800c0c6:	680a      	ldr	r2, [r1, #0]
 800c0c8:	b085      	sub	sp, #20
 800c0ca:	f102 0b02 	add.w	fp, r2, #2
 800c0ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c0d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c0d6:	4681      	mov	r9, r0
 800c0d8:	468a      	mov	sl, r1
 800c0da:	9302      	str	r3, [sp, #8]
 800c0dc:	32fe      	adds	r2, #254	; 0xfe
 800c0de:	eb02 030b 	add.w	r3, r2, fp
 800c0e2:	46d8      	mov	r8, fp
 800c0e4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c0e8:	9301      	str	r3, [sp, #4]
 800c0ea:	2830      	cmp	r0, #48	; 0x30
 800c0ec:	d0f7      	beq.n	800c0de <__gethex+0x1e>
 800c0ee:	f7ff ffd1 	bl	800c094 <__hexdig_fun>
 800c0f2:	4604      	mov	r4, r0
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	d138      	bne.n	800c16a <__gethex+0xaa>
 800c0f8:	49a7      	ldr	r1, [pc, #668]	; (800c398 <__gethex+0x2d8>)
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	4640      	mov	r0, r8
 800c0fe:	f7ff fee7 	bl	800bed0 <strncmp>
 800c102:	4606      	mov	r6, r0
 800c104:	2800      	cmp	r0, #0
 800c106:	d169      	bne.n	800c1dc <__gethex+0x11c>
 800c108:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c10c:	465d      	mov	r5, fp
 800c10e:	f7ff ffc1 	bl	800c094 <__hexdig_fun>
 800c112:	2800      	cmp	r0, #0
 800c114:	d064      	beq.n	800c1e0 <__gethex+0x120>
 800c116:	465a      	mov	r2, fp
 800c118:	7810      	ldrb	r0, [r2, #0]
 800c11a:	2830      	cmp	r0, #48	; 0x30
 800c11c:	4690      	mov	r8, r2
 800c11e:	f102 0201 	add.w	r2, r2, #1
 800c122:	d0f9      	beq.n	800c118 <__gethex+0x58>
 800c124:	f7ff ffb6 	bl	800c094 <__hexdig_fun>
 800c128:	2301      	movs	r3, #1
 800c12a:	fab0 f480 	clz	r4, r0
 800c12e:	0964      	lsrs	r4, r4, #5
 800c130:	465e      	mov	r6, fp
 800c132:	9301      	str	r3, [sp, #4]
 800c134:	4642      	mov	r2, r8
 800c136:	4615      	mov	r5, r2
 800c138:	3201      	adds	r2, #1
 800c13a:	7828      	ldrb	r0, [r5, #0]
 800c13c:	f7ff ffaa 	bl	800c094 <__hexdig_fun>
 800c140:	2800      	cmp	r0, #0
 800c142:	d1f8      	bne.n	800c136 <__gethex+0x76>
 800c144:	4994      	ldr	r1, [pc, #592]	; (800c398 <__gethex+0x2d8>)
 800c146:	2201      	movs	r2, #1
 800c148:	4628      	mov	r0, r5
 800c14a:	f7ff fec1 	bl	800bed0 <strncmp>
 800c14e:	b978      	cbnz	r0, 800c170 <__gethex+0xb0>
 800c150:	b946      	cbnz	r6, 800c164 <__gethex+0xa4>
 800c152:	1c6e      	adds	r6, r5, #1
 800c154:	4632      	mov	r2, r6
 800c156:	4615      	mov	r5, r2
 800c158:	3201      	adds	r2, #1
 800c15a:	7828      	ldrb	r0, [r5, #0]
 800c15c:	f7ff ff9a 	bl	800c094 <__hexdig_fun>
 800c160:	2800      	cmp	r0, #0
 800c162:	d1f8      	bne.n	800c156 <__gethex+0x96>
 800c164:	1b73      	subs	r3, r6, r5
 800c166:	009e      	lsls	r6, r3, #2
 800c168:	e004      	b.n	800c174 <__gethex+0xb4>
 800c16a:	2400      	movs	r4, #0
 800c16c:	4626      	mov	r6, r4
 800c16e:	e7e1      	b.n	800c134 <__gethex+0x74>
 800c170:	2e00      	cmp	r6, #0
 800c172:	d1f7      	bne.n	800c164 <__gethex+0xa4>
 800c174:	782b      	ldrb	r3, [r5, #0]
 800c176:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c17a:	2b50      	cmp	r3, #80	; 0x50
 800c17c:	d13d      	bne.n	800c1fa <__gethex+0x13a>
 800c17e:	786b      	ldrb	r3, [r5, #1]
 800c180:	2b2b      	cmp	r3, #43	; 0x2b
 800c182:	d02f      	beq.n	800c1e4 <__gethex+0x124>
 800c184:	2b2d      	cmp	r3, #45	; 0x2d
 800c186:	d031      	beq.n	800c1ec <__gethex+0x12c>
 800c188:	1c69      	adds	r1, r5, #1
 800c18a:	f04f 0b00 	mov.w	fp, #0
 800c18e:	7808      	ldrb	r0, [r1, #0]
 800c190:	f7ff ff80 	bl	800c094 <__hexdig_fun>
 800c194:	1e42      	subs	r2, r0, #1
 800c196:	b2d2      	uxtb	r2, r2
 800c198:	2a18      	cmp	r2, #24
 800c19a:	d82e      	bhi.n	800c1fa <__gethex+0x13a>
 800c19c:	f1a0 0210 	sub.w	r2, r0, #16
 800c1a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c1a4:	f7ff ff76 	bl	800c094 <__hexdig_fun>
 800c1a8:	f100 3cff 	add.w	ip, r0, #4294967295
 800c1ac:	fa5f fc8c 	uxtb.w	ip, ip
 800c1b0:	f1bc 0f18 	cmp.w	ip, #24
 800c1b4:	d91d      	bls.n	800c1f2 <__gethex+0x132>
 800c1b6:	f1bb 0f00 	cmp.w	fp, #0
 800c1ba:	d000      	beq.n	800c1be <__gethex+0xfe>
 800c1bc:	4252      	negs	r2, r2
 800c1be:	4416      	add	r6, r2
 800c1c0:	f8ca 1000 	str.w	r1, [sl]
 800c1c4:	b1dc      	cbz	r4, 800c1fe <__gethex+0x13e>
 800c1c6:	9b01      	ldr	r3, [sp, #4]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	bf14      	ite	ne
 800c1cc:	f04f 0800 	movne.w	r8, #0
 800c1d0:	f04f 0806 	moveq.w	r8, #6
 800c1d4:	4640      	mov	r0, r8
 800c1d6:	b005      	add	sp, #20
 800c1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1dc:	4645      	mov	r5, r8
 800c1de:	4626      	mov	r6, r4
 800c1e0:	2401      	movs	r4, #1
 800c1e2:	e7c7      	b.n	800c174 <__gethex+0xb4>
 800c1e4:	f04f 0b00 	mov.w	fp, #0
 800c1e8:	1ca9      	adds	r1, r5, #2
 800c1ea:	e7d0      	b.n	800c18e <__gethex+0xce>
 800c1ec:	f04f 0b01 	mov.w	fp, #1
 800c1f0:	e7fa      	b.n	800c1e8 <__gethex+0x128>
 800c1f2:	230a      	movs	r3, #10
 800c1f4:	fb03 0002 	mla	r0, r3, r2, r0
 800c1f8:	e7d0      	b.n	800c19c <__gethex+0xdc>
 800c1fa:	4629      	mov	r1, r5
 800c1fc:	e7e0      	b.n	800c1c0 <__gethex+0x100>
 800c1fe:	eba5 0308 	sub.w	r3, r5, r8
 800c202:	3b01      	subs	r3, #1
 800c204:	4621      	mov	r1, r4
 800c206:	2b07      	cmp	r3, #7
 800c208:	dc0a      	bgt.n	800c220 <__gethex+0x160>
 800c20a:	4648      	mov	r0, r9
 800c20c:	f7fe f89a 	bl	800a344 <_Balloc>
 800c210:	4604      	mov	r4, r0
 800c212:	b940      	cbnz	r0, 800c226 <__gethex+0x166>
 800c214:	4b61      	ldr	r3, [pc, #388]	; (800c39c <__gethex+0x2dc>)
 800c216:	4602      	mov	r2, r0
 800c218:	21e4      	movs	r1, #228	; 0xe4
 800c21a:	4861      	ldr	r0, [pc, #388]	; (800c3a0 <__gethex+0x2e0>)
 800c21c:	f7ff feb4 	bl	800bf88 <__assert_func>
 800c220:	3101      	adds	r1, #1
 800c222:	105b      	asrs	r3, r3, #1
 800c224:	e7ef      	b.n	800c206 <__gethex+0x146>
 800c226:	f100 0a14 	add.w	sl, r0, #20
 800c22a:	2300      	movs	r3, #0
 800c22c:	495a      	ldr	r1, [pc, #360]	; (800c398 <__gethex+0x2d8>)
 800c22e:	f8cd a004 	str.w	sl, [sp, #4]
 800c232:	469b      	mov	fp, r3
 800c234:	45a8      	cmp	r8, r5
 800c236:	d342      	bcc.n	800c2be <__gethex+0x1fe>
 800c238:	9801      	ldr	r0, [sp, #4]
 800c23a:	f840 bb04 	str.w	fp, [r0], #4
 800c23e:	eba0 000a 	sub.w	r0, r0, sl
 800c242:	1080      	asrs	r0, r0, #2
 800c244:	6120      	str	r0, [r4, #16]
 800c246:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800c24a:	4658      	mov	r0, fp
 800c24c:	f7fe f96c 	bl	800a528 <__hi0bits>
 800c250:	683d      	ldr	r5, [r7, #0]
 800c252:	eba8 0000 	sub.w	r0, r8, r0
 800c256:	42a8      	cmp	r0, r5
 800c258:	dd59      	ble.n	800c30e <__gethex+0x24e>
 800c25a:	eba0 0805 	sub.w	r8, r0, r5
 800c25e:	4641      	mov	r1, r8
 800c260:	4620      	mov	r0, r4
 800c262:	f7fe fcfb 	bl	800ac5c <__any_on>
 800c266:	4683      	mov	fp, r0
 800c268:	b1b8      	cbz	r0, 800c29a <__gethex+0x1da>
 800c26a:	f108 33ff 	add.w	r3, r8, #4294967295
 800c26e:	1159      	asrs	r1, r3, #5
 800c270:	f003 021f 	and.w	r2, r3, #31
 800c274:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c278:	f04f 0b01 	mov.w	fp, #1
 800c27c:	fa0b f202 	lsl.w	r2, fp, r2
 800c280:	420a      	tst	r2, r1
 800c282:	d00a      	beq.n	800c29a <__gethex+0x1da>
 800c284:	455b      	cmp	r3, fp
 800c286:	dd06      	ble.n	800c296 <__gethex+0x1d6>
 800c288:	f1a8 0102 	sub.w	r1, r8, #2
 800c28c:	4620      	mov	r0, r4
 800c28e:	f7fe fce5 	bl	800ac5c <__any_on>
 800c292:	2800      	cmp	r0, #0
 800c294:	d138      	bne.n	800c308 <__gethex+0x248>
 800c296:	f04f 0b02 	mov.w	fp, #2
 800c29a:	4641      	mov	r1, r8
 800c29c:	4620      	mov	r0, r4
 800c29e:	f7ff fea7 	bl	800bff0 <rshift>
 800c2a2:	4446      	add	r6, r8
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	42b3      	cmp	r3, r6
 800c2a8:	da41      	bge.n	800c32e <__gethex+0x26e>
 800c2aa:	4621      	mov	r1, r4
 800c2ac:	4648      	mov	r0, r9
 800c2ae:	f7fe f889 	bl	800a3c4 <_Bfree>
 800c2b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	6013      	str	r3, [r2, #0]
 800c2b8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c2bc:	e78a      	b.n	800c1d4 <__gethex+0x114>
 800c2be:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c2c2:	2a2e      	cmp	r2, #46	; 0x2e
 800c2c4:	d014      	beq.n	800c2f0 <__gethex+0x230>
 800c2c6:	2b20      	cmp	r3, #32
 800c2c8:	d106      	bne.n	800c2d8 <__gethex+0x218>
 800c2ca:	9b01      	ldr	r3, [sp, #4]
 800c2cc:	f843 bb04 	str.w	fp, [r3], #4
 800c2d0:	f04f 0b00 	mov.w	fp, #0
 800c2d4:	9301      	str	r3, [sp, #4]
 800c2d6:	465b      	mov	r3, fp
 800c2d8:	7828      	ldrb	r0, [r5, #0]
 800c2da:	9303      	str	r3, [sp, #12]
 800c2dc:	f7ff feda 	bl	800c094 <__hexdig_fun>
 800c2e0:	9b03      	ldr	r3, [sp, #12]
 800c2e2:	f000 000f 	and.w	r0, r0, #15
 800c2e6:	4098      	lsls	r0, r3
 800c2e8:	ea4b 0b00 	orr.w	fp, fp, r0
 800c2ec:	3304      	adds	r3, #4
 800c2ee:	e7a1      	b.n	800c234 <__gethex+0x174>
 800c2f0:	45a8      	cmp	r8, r5
 800c2f2:	d8e8      	bhi.n	800c2c6 <__gethex+0x206>
 800c2f4:	2201      	movs	r2, #1
 800c2f6:	4628      	mov	r0, r5
 800c2f8:	9303      	str	r3, [sp, #12]
 800c2fa:	f7ff fde9 	bl	800bed0 <strncmp>
 800c2fe:	4926      	ldr	r1, [pc, #152]	; (800c398 <__gethex+0x2d8>)
 800c300:	9b03      	ldr	r3, [sp, #12]
 800c302:	2800      	cmp	r0, #0
 800c304:	d1df      	bne.n	800c2c6 <__gethex+0x206>
 800c306:	e795      	b.n	800c234 <__gethex+0x174>
 800c308:	f04f 0b03 	mov.w	fp, #3
 800c30c:	e7c5      	b.n	800c29a <__gethex+0x1da>
 800c30e:	da0b      	bge.n	800c328 <__gethex+0x268>
 800c310:	eba5 0800 	sub.w	r8, r5, r0
 800c314:	4621      	mov	r1, r4
 800c316:	4642      	mov	r2, r8
 800c318:	4648      	mov	r0, r9
 800c31a:	f7fe fa6d 	bl	800a7f8 <__lshift>
 800c31e:	eba6 0608 	sub.w	r6, r6, r8
 800c322:	4604      	mov	r4, r0
 800c324:	f100 0a14 	add.w	sl, r0, #20
 800c328:	f04f 0b00 	mov.w	fp, #0
 800c32c:	e7ba      	b.n	800c2a4 <__gethex+0x1e4>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	42b3      	cmp	r3, r6
 800c332:	dd73      	ble.n	800c41c <__gethex+0x35c>
 800c334:	1b9e      	subs	r6, r3, r6
 800c336:	42b5      	cmp	r5, r6
 800c338:	dc34      	bgt.n	800c3a4 <__gethex+0x2e4>
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2b02      	cmp	r3, #2
 800c33e:	d023      	beq.n	800c388 <__gethex+0x2c8>
 800c340:	2b03      	cmp	r3, #3
 800c342:	d025      	beq.n	800c390 <__gethex+0x2d0>
 800c344:	2b01      	cmp	r3, #1
 800c346:	d115      	bne.n	800c374 <__gethex+0x2b4>
 800c348:	42b5      	cmp	r5, r6
 800c34a:	d113      	bne.n	800c374 <__gethex+0x2b4>
 800c34c:	2d01      	cmp	r5, #1
 800c34e:	d10b      	bne.n	800c368 <__gethex+0x2a8>
 800c350:	9a02      	ldr	r2, [sp, #8]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6013      	str	r3, [r2, #0]
 800c356:	2301      	movs	r3, #1
 800c358:	6123      	str	r3, [r4, #16]
 800c35a:	f8ca 3000 	str.w	r3, [sl]
 800c35e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c360:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c364:	601c      	str	r4, [r3, #0]
 800c366:	e735      	b.n	800c1d4 <__gethex+0x114>
 800c368:	1e69      	subs	r1, r5, #1
 800c36a:	4620      	mov	r0, r4
 800c36c:	f7fe fc76 	bl	800ac5c <__any_on>
 800c370:	2800      	cmp	r0, #0
 800c372:	d1ed      	bne.n	800c350 <__gethex+0x290>
 800c374:	4621      	mov	r1, r4
 800c376:	4648      	mov	r0, r9
 800c378:	f7fe f824 	bl	800a3c4 <_Bfree>
 800c37c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c37e:	2300      	movs	r3, #0
 800c380:	6013      	str	r3, [r2, #0]
 800c382:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c386:	e725      	b.n	800c1d4 <__gethex+0x114>
 800c388:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d1f2      	bne.n	800c374 <__gethex+0x2b4>
 800c38e:	e7df      	b.n	800c350 <__gethex+0x290>
 800c390:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c392:	2b00      	cmp	r3, #0
 800c394:	d1dc      	bne.n	800c350 <__gethex+0x290>
 800c396:	e7ed      	b.n	800c374 <__gethex+0x2b4>
 800c398:	0800cd74 	.word	0x0800cd74
 800c39c:	0800cc0d 	.word	0x0800cc0d
 800c3a0:	0800cf1e 	.word	0x0800cf1e
 800c3a4:	f106 38ff 	add.w	r8, r6, #4294967295
 800c3a8:	f1bb 0f00 	cmp.w	fp, #0
 800c3ac:	d133      	bne.n	800c416 <__gethex+0x356>
 800c3ae:	f1b8 0f00 	cmp.w	r8, #0
 800c3b2:	d004      	beq.n	800c3be <__gethex+0x2fe>
 800c3b4:	4641      	mov	r1, r8
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	f7fe fc50 	bl	800ac5c <__any_on>
 800c3bc:	4683      	mov	fp, r0
 800c3be:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c3c8:	f008 081f 	and.w	r8, r8, #31
 800c3cc:	fa03 f308 	lsl.w	r3, r3, r8
 800c3d0:	4213      	tst	r3, r2
 800c3d2:	4631      	mov	r1, r6
 800c3d4:	4620      	mov	r0, r4
 800c3d6:	bf18      	it	ne
 800c3d8:	f04b 0b02 	orrne.w	fp, fp, #2
 800c3dc:	1bad      	subs	r5, r5, r6
 800c3de:	f7ff fe07 	bl	800bff0 <rshift>
 800c3e2:	687e      	ldr	r6, [r7, #4]
 800c3e4:	f04f 0802 	mov.w	r8, #2
 800c3e8:	f1bb 0f00 	cmp.w	fp, #0
 800c3ec:	d04a      	beq.n	800c484 <__gethex+0x3c4>
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	2b02      	cmp	r3, #2
 800c3f2:	d016      	beq.n	800c422 <__gethex+0x362>
 800c3f4:	2b03      	cmp	r3, #3
 800c3f6:	d018      	beq.n	800c42a <__gethex+0x36a>
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	d109      	bne.n	800c410 <__gethex+0x350>
 800c3fc:	f01b 0f02 	tst.w	fp, #2
 800c400:	d006      	beq.n	800c410 <__gethex+0x350>
 800c402:	f8da 3000 	ldr.w	r3, [sl]
 800c406:	ea4b 0b03 	orr.w	fp, fp, r3
 800c40a:	f01b 0f01 	tst.w	fp, #1
 800c40e:	d10f      	bne.n	800c430 <__gethex+0x370>
 800c410:	f048 0810 	orr.w	r8, r8, #16
 800c414:	e036      	b.n	800c484 <__gethex+0x3c4>
 800c416:	f04f 0b01 	mov.w	fp, #1
 800c41a:	e7d0      	b.n	800c3be <__gethex+0x2fe>
 800c41c:	f04f 0801 	mov.w	r8, #1
 800c420:	e7e2      	b.n	800c3e8 <__gethex+0x328>
 800c422:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c424:	f1c3 0301 	rsb	r3, r3, #1
 800c428:	930f      	str	r3, [sp, #60]	; 0x3c
 800c42a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d0ef      	beq.n	800c410 <__gethex+0x350>
 800c430:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c434:	f104 0214 	add.w	r2, r4, #20
 800c438:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c43c:	9301      	str	r3, [sp, #4]
 800c43e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c442:	2300      	movs	r3, #0
 800c444:	4694      	mov	ip, r2
 800c446:	f852 1b04 	ldr.w	r1, [r2], #4
 800c44a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c44e:	d01e      	beq.n	800c48e <__gethex+0x3ce>
 800c450:	3101      	adds	r1, #1
 800c452:	f8cc 1000 	str.w	r1, [ip]
 800c456:	f1b8 0f02 	cmp.w	r8, #2
 800c45a:	f104 0214 	add.w	r2, r4, #20
 800c45e:	d13d      	bne.n	800c4dc <__gethex+0x41c>
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	3b01      	subs	r3, #1
 800c464:	42ab      	cmp	r3, r5
 800c466:	d10b      	bne.n	800c480 <__gethex+0x3c0>
 800c468:	1169      	asrs	r1, r5, #5
 800c46a:	2301      	movs	r3, #1
 800c46c:	f005 051f 	and.w	r5, r5, #31
 800c470:	fa03 f505 	lsl.w	r5, r3, r5
 800c474:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c478:	421d      	tst	r5, r3
 800c47a:	bf18      	it	ne
 800c47c:	f04f 0801 	movne.w	r8, #1
 800c480:	f048 0820 	orr.w	r8, r8, #32
 800c484:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c486:	601c      	str	r4, [r3, #0]
 800c488:	9b02      	ldr	r3, [sp, #8]
 800c48a:	601e      	str	r6, [r3, #0]
 800c48c:	e6a2      	b.n	800c1d4 <__gethex+0x114>
 800c48e:	4290      	cmp	r0, r2
 800c490:	f842 3c04 	str.w	r3, [r2, #-4]
 800c494:	d8d6      	bhi.n	800c444 <__gethex+0x384>
 800c496:	68a2      	ldr	r2, [r4, #8]
 800c498:	4593      	cmp	fp, r2
 800c49a:	db17      	blt.n	800c4cc <__gethex+0x40c>
 800c49c:	6861      	ldr	r1, [r4, #4]
 800c49e:	4648      	mov	r0, r9
 800c4a0:	3101      	adds	r1, #1
 800c4a2:	f7fd ff4f 	bl	800a344 <_Balloc>
 800c4a6:	4682      	mov	sl, r0
 800c4a8:	b918      	cbnz	r0, 800c4b2 <__gethex+0x3f2>
 800c4aa:	4b1b      	ldr	r3, [pc, #108]	; (800c518 <__gethex+0x458>)
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	2184      	movs	r1, #132	; 0x84
 800c4b0:	e6b3      	b.n	800c21a <__gethex+0x15a>
 800c4b2:	6922      	ldr	r2, [r4, #16]
 800c4b4:	3202      	adds	r2, #2
 800c4b6:	f104 010c 	add.w	r1, r4, #12
 800c4ba:	0092      	lsls	r2, r2, #2
 800c4bc:	300c      	adds	r0, #12
 800c4be:	f7ff fd4b 	bl	800bf58 <memcpy>
 800c4c2:	4621      	mov	r1, r4
 800c4c4:	4648      	mov	r0, r9
 800c4c6:	f7fd ff7d 	bl	800a3c4 <_Bfree>
 800c4ca:	4654      	mov	r4, sl
 800c4cc:	6922      	ldr	r2, [r4, #16]
 800c4ce:	1c51      	adds	r1, r2, #1
 800c4d0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c4d4:	6121      	str	r1, [r4, #16]
 800c4d6:	2101      	movs	r1, #1
 800c4d8:	6151      	str	r1, [r2, #20]
 800c4da:	e7bc      	b.n	800c456 <__gethex+0x396>
 800c4dc:	6921      	ldr	r1, [r4, #16]
 800c4de:	4559      	cmp	r1, fp
 800c4e0:	dd0b      	ble.n	800c4fa <__gethex+0x43a>
 800c4e2:	2101      	movs	r1, #1
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	f7ff fd83 	bl	800bff0 <rshift>
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	3601      	adds	r6, #1
 800c4ee:	42b3      	cmp	r3, r6
 800c4f0:	f6ff aedb 	blt.w	800c2aa <__gethex+0x1ea>
 800c4f4:	f04f 0801 	mov.w	r8, #1
 800c4f8:	e7c2      	b.n	800c480 <__gethex+0x3c0>
 800c4fa:	f015 051f 	ands.w	r5, r5, #31
 800c4fe:	d0f9      	beq.n	800c4f4 <__gethex+0x434>
 800c500:	9b01      	ldr	r3, [sp, #4]
 800c502:	441a      	add	r2, r3
 800c504:	f1c5 0520 	rsb	r5, r5, #32
 800c508:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c50c:	f7fe f80c 	bl	800a528 <__hi0bits>
 800c510:	42a8      	cmp	r0, r5
 800c512:	dbe6      	blt.n	800c4e2 <__gethex+0x422>
 800c514:	e7ee      	b.n	800c4f4 <__gethex+0x434>
 800c516:	bf00      	nop
 800c518:	0800cc0d 	.word	0x0800cc0d

0800c51c <L_shift>:
 800c51c:	f1c2 0208 	rsb	r2, r2, #8
 800c520:	0092      	lsls	r2, r2, #2
 800c522:	b570      	push	{r4, r5, r6, lr}
 800c524:	f1c2 0620 	rsb	r6, r2, #32
 800c528:	6843      	ldr	r3, [r0, #4]
 800c52a:	6804      	ldr	r4, [r0, #0]
 800c52c:	fa03 f506 	lsl.w	r5, r3, r6
 800c530:	432c      	orrs	r4, r5
 800c532:	40d3      	lsrs	r3, r2
 800c534:	6004      	str	r4, [r0, #0]
 800c536:	f840 3f04 	str.w	r3, [r0, #4]!
 800c53a:	4288      	cmp	r0, r1
 800c53c:	d3f4      	bcc.n	800c528 <L_shift+0xc>
 800c53e:	bd70      	pop	{r4, r5, r6, pc}

0800c540 <__match>:
 800c540:	b530      	push	{r4, r5, lr}
 800c542:	6803      	ldr	r3, [r0, #0]
 800c544:	3301      	adds	r3, #1
 800c546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c54a:	b914      	cbnz	r4, 800c552 <__match+0x12>
 800c54c:	6003      	str	r3, [r0, #0]
 800c54e:	2001      	movs	r0, #1
 800c550:	bd30      	pop	{r4, r5, pc}
 800c552:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c556:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c55a:	2d19      	cmp	r5, #25
 800c55c:	bf98      	it	ls
 800c55e:	3220      	addls	r2, #32
 800c560:	42a2      	cmp	r2, r4
 800c562:	d0f0      	beq.n	800c546 <__match+0x6>
 800c564:	2000      	movs	r0, #0
 800c566:	e7f3      	b.n	800c550 <__match+0x10>

0800c568 <__hexnan>:
 800c568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c56c:	680b      	ldr	r3, [r1, #0]
 800c56e:	6801      	ldr	r1, [r0, #0]
 800c570:	115e      	asrs	r6, r3, #5
 800c572:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c576:	f013 031f 	ands.w	r3, r3, #31
 800c57a:	b087      	sub	sp, #28
 800c57c:	bf18      	it	ne
 800c57e:	3604      	addne	r6, #4
 800c580:	2500      	movs	r5, #0
 800c582:	1f37      	subs	r7, r6, #4
 800c584:	4682      	mov	sl, r0
 800c586:	4690      	mov	r8, r2
 800c588:	9301      	str	r3, [sp, #4]
 800c58a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c58e:	46b9      	mov	r9, r7
 800c590:	463c      	mov	r4, r7
 800c592:	9502      	str	r5, [sp, #8]
 800c594:	46ab      	mov	fp, r5
 800c596:	784a      	ldrb	r2, [r1, #1]
 800c598:	1c4b      	adds	r3, r1, #1
 800c59a:	9303      	str	r3, [sp, #12]
 800c59c:	b342      	cbz	r2, 800c5f0 <__hexnan+0x88>
 800c59e:	4610      	mov	r0, r2
 800c5a0:	9105      	str	r1, [sp, #20]
 800c5a2:	9204      	str	r2, [sp, #16]
 800c5a4:	f7ff fd76 	bl	800c094 <__hexdig_fun>
 800c5a8:	2800      	cmp	r0, #0
 800c5aa:	d14f      	bne.n	800c64c <__hexnan+0xe4>
 800c5ac:	9a04      	ldr	r2, [sp, #16]
 800c5ae:	9905      	ldr	r1, [sp, #20]
 800c5b0:	2a20      	cmp	r2, #32
 800c5b2:	d818      	bhi.n	800c5e6 <__hexnan+0x7e>
 800c5b4:	9b02      	ldr	r3, [sp, #8]
 800c5b6:	459b      	cmp	fp, r3
 800c5b8:	dd13      	ble.n	800c5e2 <__hexnan+0x7a>
 800c5ba:	454c      	cmp	r4, r9
 800c5bc:	d206      	bcs.n	800c5cc <__hexnan+0x64>
 800c5be:	2d07      	cmp	r5, #7
 800c5c0:	dc04      	bgt.n	800c5cc <__hexnan+0x64>
 800c5c2:	462a      	mov	r2, r5
 800c5c4:	4649      	mov	r1, r9
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	f7ff ffa8 	bl	800c51c <L_shift>
 800c5cc:	4544      	cmp	r4, r8
 800c5ce:	d950      	bls.n	800c672 <__hexnan+0x10a>
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	f1a4 0904 	sub.w	r9, r4, #4
 800c5d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800c5da:	f8cd b008 	str.w	fp, [sp, #8]
 800c5de:	464c      	mov	r4, r9
 800c5e0:	461d      	mov	r5, r3
 800c5e2:	9903      	ldr	r1, [sp, #12]
 800c5e4:	e7d7      	b.n	800c596 <__hexnan+0x2e>
 800c5e6:	2a29      	cmp	r2, #41	; 0x29
 800c5e8:	d155      	bne.n	800c696 <__hexnan+0x12e>
 800c5ea:	3102      	adds	r1, #2
 800c5ec:	f8ca 1000 	str.w	r1, [sl]
 800c5f0:	f1bb 0f00 	cmp.w	fp, #0
 800c5f4:	d04f      	beq.n	800c696 <__hexnan+0x12e>
 800c5f6:	454c      	cmp	r4, r9
 800c5f8:	d206      	bcs.n	800c608 <__hexnan+0xa0>
 800c5fa:	2d07      	cmp	r5, #7
 800c5fc:	dc04      	bgt.n	800c608 <__hexnan+0xa0>
 800c5fe:	462a      	mov	r2, r5
 800c600:	4649      	mov	r1, r9
 800c602:	4620      	mov	r0, r4
 800c604:	f7ff ff8a 	bl	800c51c <L_shift>
 800c608:	4544      	cmp	r4, r8
 800c60a:	d934      	bls.n	800c676 <__hexnan+0x10e>
 800c60c:	f1a8 0204 	sub.w	r2, r8, #4
 800c610:	4623      	mov	r3, r4
 800c612:	f853 1b04 	ldr.w	r1, [r3], #4
 800c616:	f842 1f04 	str.w	r1, [r2, #4]!
 800c61a:	429f      	cmp	r7, r3
 800c61c:	d2f9      	bcs.n	800c612 <__hexnan+0xaa>
 800c61e:	1b3b      	subs	r3, r7, r4
 800c620:	f023 0303 	bic.w	r3, r3, #3
 800c624:	3304      	adds	r3, #4
 800c626:	3e03      	subs	r6, #3
 800c628:	3401      	adds	r4, #1
 800c62a:	42a6      	cmp	r6, r4
 800c62c:	bf38      	it	cc
 800c62e:	2304      	movcc	r3, #4
 800c630:	4443      	add	r3, r8
 800c632:	2200      	movs	r2, #0
 800c634:	f843 2b04 	str.w	r2, [r3], #4
 800c638:	429f      	cmp	r7, r3
 800c63a:	d2fb      	bcs.n	800c634 <__hexnan+0xcc>
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	b91b      	cbnz	r3, 800c648 <__hexnan+0xe0>
 800c640:	4547      	cmp	r7, r8
 800c642:	d126      	bne.n	800c692 <__hexnan+0x12a>
 800c644:	2301      	movs	r3, #1
 800c646:	603b      	str	r3, [r7, #0]
 800c648:	2005      	movs	r0, #5
 800c64a:	e025      	b.n	800c698 <__hexnan+0x130>
 800c64c:	3501      	adds	r5, #1
 800c64e:	2d08      	cmp	r5, #8
 800c650:	f10b 0b01 	add.w	fp, fp, #1
 800c654:	dd06      	ble.n	800c664 <__hexnan+0xfc>
 800c656:	4544      	cmp	r4, r8
 800c658:	d9c3      	bls.n	800c5e2 <__hexnan+0x7a>
 800c65a:	2300      	movs	r3, #0
 800c65c:	f844 3c04 	str.w	r3, [r4, #-4]
 800c660:	2501      	movs	r5, #1
 800c662:	3c04      	subs	r4, #4
 800c664:	6822      	ldr	r2, [r4, #0]
 800c666:	f000 000f 	and.w	r0, r0, #15
 800c66a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c66e:	6020      	str	r0, [r4, #0]
 800c670:	e7b7      	b.n	800c5e2 <__hexnan+0x7a>
 800c672:	2508      	movs	r5, #8
 800c674:	e7b5      	b.n	800c5e2 <__hexnan+0x7a>
 800c676:	9b01      	ldr	r3, [sp, #4]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d0df      	beq.n	800c63c <__hexnan+0xd4>
 800c67c:	f1c3 0320 	rsb	r3, r3, #32
 800c680:	f04f 32ff 	mov.w	r2, #4294967295
 800c684:	40da      	lsrs	r2, r3
 800c686:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c68a:	4013      	ands	r3, r2
 800c68c:	f846 3c04 	str.w	r3, [r6, #-4]
 800c690:	e7d4      	b.n	800c63c <__hexnan+0xd4>
 800c692:	3f04      	subs	r7, #4
 800c694:	e7d2      	b.n	800c63c <__hexnan+0xd4>
 800c696:	2004      	movs	r0, #4
 800c698:	b007      	add	sp, #28
 800c69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c69e <__ascii_mbtowc>:
 800c69e:	b082      	sub	sp, #8
 800c6a0:	b901      	cbnz	r1, 800c6a4 <__ascii_mbtowc+0x6>
 800c6a2:	a901      	add	r1, sp, #4
 800c6a4:	b142      	cbz	r2, 800c6b8 <__ascii_mbtowc+0x1a>
 800c6a6:	b14b      	cbz	r3, 800c6bc <__ascii_mbtowc+0x1e>
 800c6a8:	7813      	ldrb	r3, [r2, #0]
 800c6aa:	600b      	str	r3, [r1, #0]
 800c6ac:	7812      	ldrb	r2, [r2, #0]
 800c6ae:	1e10      	subs	r0, r2, #0
 800c6b0:	bf18      	it	ne
 800c6b2:	2001      	movne	r0, #1
 800c6b4:	b002      	add	sp, #8
 800c6b6:	4770      	bx	lr
 800c6b8:	4610      	mov	r0, r2
 800c6ba:	e7fb      	b.n	800c6b4 <__ascii_mbtowc+0x16>
 800c6bc:	f06f 0001 	mvn.w	r0, #1
 800c6c0:	e7f8      	b.n	800c6b4 <__ascii_mbtowc+0x16>

0800c6c2 <_realloc_r>:
 800c6c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6c6:	4680      	mov	r8, r0
 800c6c8:	4614      	mov	r4, r2
 800c6ca:	460e      	mov	r6, r1
 800c6cc:	b921      	cbnz	r1, 800c6d8 <_realloc_r+0x16>
 800c6ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6d2:	4611      	mov	r1, r2
 800c6d4:	f7fd bdaa 	b.w	800a22c <_malloc_r>
 800c6d8:	b92a      	cbnz	r2, 800c6e6 <_realloc_r+0x24>
 800c6da:	f7fd fd33 	bl	800a144 <_free_r>
 800c6de:	4625      	mov	r5, r4
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6e6:	f000 f842 	bl	800c76e <_malloc_usable_size_r>
 800c6ea:	4284      	cmp	r4, r0
 800c6ec:	4607      	mov	r7, r0
 800c6ee:	d802      	bhi.n	800c6f6 <_realloc_r+0x34>
 800c6f0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c6f4:	d812      	bhi.n	800c71c <_realloc_r+0x5a>
 800c6f6:	4621      	mov	r1, r4
 800c6f8:	4640      	mov	r0, r8
 800c6fa:	f7fd fd97 	bl	800a22c <_malloc_r>
 800c6fe:	4605      	mov	r5, r0
 800c700:	2800      	cmp	r0, #0
 800c702:	d0ed      	beq.n	800c6e0 <_realloc_r+0x1e>
 800c704:	42bc      	cmp	r4, r7
 800c706:	4622      	mov	r2, r4
 800c708:	4631      	mov	r1, r6
 800c70a:	bf28      	it	cs
 800c70c:	463a      	movcs	r2, r7
 800c70e:	f7ff fc23 	bl	800bf58 <memcpy>
 800c712:	4631      	mov	r1, r6
 800c714:	4640      	mov	r0, r8
 800c716:	f7fd fd15 	bl	800a144 <_free_r>
 800c71a:	e7e1      	b.n	800c6e0 <_realloc_r+0x1e>
 800c71c:	4635      	mov	r5, r6
 800c71e:	e7df      	b.n	800c6e0 <_realloc_r+0x1e>

0800c720 <__ascii_wctomb>:
 800c720:	b149      	cbz	r1, 800c736 <__ascii_wctomb+0x16>
 800c722:	2aff      	cmp	r2, #255	; 0xff
 800c724:	bf85      	ittet	hi
 800c726:	238a      	movhi	r3, #138	; 0x8a
 800c728:	6003      	strhi	r3, [r0, #0]
 800c72a:	700a      	strbls	r2, [r1, #0]
 800c72c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c730:	bf98      	it	ls
 800c732:	2001      	movls	r0, #1
 800c734:	4770      	bx	lr
 800c736:	4608      	mov	r0, r1
 800c738:	4770      	bx	lr
	...

0800c73c <fiprintf>:
 800c73c:	b40e      	push	{r1, r2, r3}
 800c73e:	b503      	push	{r0, r1, lr}
 800c740:	4601      	mov	r1, r0
 800c742:	ab03      	add	r3, sp, #12
 800c744:	4805      	ldr	r0, [pc, #20]	; (800c75c <fiprintf+0x20>)
 800c746:	f853 2b04 	ldr.w	r2, [r3], #4
 800c74a:	6800      	ldr	r0, [r0, #0]
 800c74c:	9301      	str	r3, [sp, #4]
 800c74e:	f000 f83f 	bl	800c7d0 <_vfiprintf_r>
 800c752:	b002      	add	sp, #8
 800c754:	f85d eb04 	ldr.w	lr, [sp], #4
 800c758:	b003      	add	sp, #12
 800c75a:	4770      	bx	lr
 800c75c:	20000064 	.word	0x20000064

0800c760 <abort>:
 800c760:	b508      	push	{r3, lr}
 800c762:	2006      	movs	r0, #6
 800c764:	f000 f976 	bl	800ca54 <raise>
 800c768:	2001      	movs	r0, #1
 800c76a:	f7f5 fd2d 	bl	80021c8 <_exit>

0800c76e <_malloc_usable_size_r>:
 800c76e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c772:	1f18      	subs	r0, r3, #4
 800c774:	2b00      	cmp	r3, #0
 800c776:	bfbc      	itt	lt
 800c778:	580b      	ldrlt	r3, [r1, r0]
 800c77a:	18c0      	addlt	r0, r0, r3
 800c77c:	4770      	bx	lr

0800c77e <__sfputc_r>:
 800c77e:	6893      	ldr	r3, [r2, #8]
 800c780:	3b01      	subs	r3, #1
 800c782:	2b00      	cmp	r3, #0
 800c784:	b410      	push	{r4}
 800c786:	6093      	str	r3, [r2, #8]
 800c788:	da08      	bge.n	800c79c <__sfputc_r+0x1e>
 800c78a:	6994      	ldr	r4, [r2, #24]
 800c78c:	42a3      	cmp	r3, r4
 800c78e:	db01      	blt.n	800c794 <__sfputc_r+0x16>
 800c790:	290a      	cmp	r1, #10
 800c792:	d103      	bne.n	800c79c <__sfputc_r+0x1e>
 800c794:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c798:	f7fc bd41 	b.w	800921e <__swbuf_r>
 800c79c:	6813      	ldr	r3, [r2, #0]
 800c79e:	1c58      	adds	r0, r3, #1
 800c7a0:	6010      	str	r0, [r2, #0]
 800c7a2:	7019      	strb	r1, [r3, #0]
 800c7a4:	4608      	mov	r0, r1
 800c7a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7aa:	4770      	bx	lr

0800c7ac <__sfputs_r>:
 800c7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ae:	4606      	mov	r6, r0
 800c7b0:	460f      	mov	r7, r1
 800c7b2:	4614      	mov	r4, r2
 800c7b4:	18d5      	adds	r5, r2, r3
 800c7b6:	42ac      	cmp	r4, r5
 800c7b8:	d101      	bne.n	800c7be <__sfputs_r+0x12>
 800c7ba:	2000      	movs	r0, #0
 800c7bc:	e007      	b.n	800c7ce <__sfputs_r+0x22>
 800c7be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7c2:	463a      	mov	r2, r7
 800c7c4:	4630      	mov	r0, r6
 800c7c6:	f7ff ffda 	bl	800c77e <__sfputc_r>
 800c7ca:	1c43      	adds	r3, r0, #1
 800c7cc:	d1f3      	bne.n	800c7b6 <__sfputs_r+0xa>
 800c7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c7d0 <_vfiprintf_r>:
 800c7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d4:	460d      	mov	r5, r1
 800c7d6:	b09d      	sub	sp, #116	; 0x74
 800c7d8:	4614      	mov	r4, r2
 800c7da:	4698      	mov	r8, r3
 800c7dc:	4606      	mov	r6, r0
 800c7de:	b118      	cbz	r0, 800c7e8 <_vfiprintf_r+0x18>
 800c7e0:	6a03      	ldr	r3, [r0, #32]
 800c7e2:	b90b      	cbnz	r3, 800c7e8 <_vfiprintf_r+0x18>
 800c7e4:	f7fc fc26 	bl	8009034 <__sinit>
 800c7e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7ea:	07d9      	lsls	r1, r3, #31
 800c7ec:	d405      	bmi.n	800c7fa <_vfiprintf_r+0x2a>
 800c7ee:	89ab      	ldrh	r3, [r5, #12]
 800c7f0:	059a      	lsls	r2, r3, #22
 800c7f2:	d402      	bmi.n	800c7fa <_vfiprintf_r+0x2a>
 800c7f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7f6:	f7fc fe23 	bl	8009440 <__retarget_lock_acquire_recursive>
 800c7fa:	89ab      	ldrh	r3, [r5, #12]
 800c7fc:	071b      	lsls	r3, r3, #28
 800c7fe:	d501      	bpl.n	800c804 <_vfiprintf_r+0x34>
 800c800:	692b      	ldr	r3, [r5, #16]
 800c802:	b99b      	cbnz	r3, 800c82c <_vfiprintf_r+0x5c>
 800c804:	4629      	mov	r1, r5
 800c806:	4630      	mov	r0, r6
 800c808:	f7fc fd46 	bl	8009298 <__swsetup_r>
 800c80c:	b170      	cbz	r0, 800c82c <_vfiprintf_r+0x5c>
 800c80e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c810:	07dc      	lsls	r4, r3, #31
 800c812:	d504      	bpl.n	800c81e <_vfiprintf_r+0x4e>
 800c814:	f04f 30ff 	mov.w	r0, #4294967295
 800c818:	b01d      	add	sp, #116	; 0x74
 800c81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c81e:	89ab      	ldrh	r3, [r5, #12]
 800c820:	0598      	lsls	r0, r3, #22
 800c822:	d4f7      	bmi.n	800c814 <_vfiprintf_r+0x44>
 800c824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c826:	f7fc fe0c 	bl	8009442 <__retarget_lock_release_recursive>
 800c82a:	e7f3      	b.n	800c814 <_vfiprintf_r+0x44>
 800c82c:	2300      	movs	r3, #0
 800c82e:	9309      	str	r3, [sp, #36]	; 0x24
 800c830:	2320      	movs	r3, #32
 800c832:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c836:	f8cd 800c 	str.w	r8, [sp, #12]
 800c83a:	2330      	movs	r3, #48	; 0x30
 800c83c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c9f0 <_vfiprintf_r+0x220>
 800c840:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c844:	f04f 0901 	mov.w	r9, #1
 800c848:	4623      	mov	r3, r4
 800c84a:	469a      	mov	sl, r3
 800c84c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c850:	b10a      	cbz	r2, 800c856 <_vfiprintf_r+0x86>
 800c852:	2a25      	cmp	r2, #37	; 0x25
 800c854:	d1f9      	bne.n	800c84a <_vfiprintf_r+0x7a>
 800c856:	ebba 0b04 	subs.w	fp, sl, r4
 800c85a:	d00b      	beq.n	800c874 <_vfiprintf_r+0xa4>
 800c85c:	465b      	mov	r3, fp
 800c85e:	4622      	mov	r2, r4
 800c860:	4629      	mov	r1, r5
 800c862:	4630      	mov	r0, r6
 800c864:	f7ff ffa2 	bl	800c7ac <__sfputs_r>
 800c868:	3001      	adds	r0, #1
 800c86a:	f000 80a9 	beq.w	800c9c0 <_vfiprintf_r+0x1f0>
 800c86e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c870:	445a      	add	r2, fp
 800c872:	9209      	str	r2, [sp, #36]	; 0x24
 800c874:	f89a 3000 	ldrb.w	r3, [sl]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	f000 80a1 	beq.w	800c9c0 <_vfiprintf_r+0x1f0>
 800c87e:	2300      	movs	r3, #0
 800c880:	f04f 32ff 	mov.w	r2, #4294967295
 800c884:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c888:	f10a 0a01 	add.w	sl, sl, #1
 800c88c:	9304      	str	r3, [sp, #16]
 800c88e:	9307      	str	r3, [sp, #28]
 800c890:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c894:	931a      	str	r3, [sp, #104]	; 0x68
 800c896:	4654      	mov	r4, sl
 800c898:	2205      	movs	r2, #5
 800c89a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c89e:	4854      	ldr	r0, [pc, #336]	; (800c9f0 <_vfiprintf_r+0x220>)
 800c8a0:	f7f3 fc96 	bl	80001d0 <memchr>
 800c8a4:	9a04      	ldr	r2, [sp, #16]
 800c8a6:	b9d8      	cbnz	r0, 800c8e0 <_vfiprintf_r+0x110>
 800c8a8:	06d1      	lsls	r1, r2, #27
 800c8aa:	bf44      	itt	mi
 800c8ac:	2320      	movmi	r3, #32
 800c8ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8b2:	0713      	lsls	r3, r2, #28
 800c8b4:	bf44      	itt	mi
 800c8b6:	232b      	movmi	r3, #43	; 0x2b
 800c8b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8bc:	f89a 3000 	ldrb.w	r3, [sl]
 800c8c0:	2b2a      	cmp	r3, #42	; 0x2a
 800c8c2:	d015      	beq.n	800c8f0 <_vfiprintf_r+0x120>
 800c8c4:	9a07      	ldr	r2, [sp, #28]
 800c8c6:	4654      	mov	r4, sl
 800c8c8:	2000      	movs	r0, #0
 800c8ca:	f04f 0c0a 	mov.w	ip, #10
 800c8ce:	4621      	mov	r1, r4
 800c8d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8d4:	3b30      	subs	r3, #48	; 0x30
 800c8d6:	2b09      	cmp	r3, #9
 800c8d8:	d94d      	bls.n	800c976 <_vfiprintf_r+0x1a6>
 800c8da:	b1b0      	cbz	r0, 800c90a <_vfiprintf_r+0x13a>
 800c8dc:	9207      	str	r2, [sp, #28]
 800c8de:	e014      	b.n	800c90a <_vfiprintf_r+0x13a>
 800c8e0:	eba0 0308 	sub.w	r3, r0, r8
 800c8e4:	fa09 f303 	lsl.w	r3, r9, r3
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	9304      	str	r3, [sp, #16]
 800c8ec:	46a2      	mov	sl, r4
 800c8ee:	e7d2      	b.n	800c896 <_vfiprintf_r+0xc6>
 800c8f0:	9b03      	ldr	r3, [sp, #12]
 800c8f2:	1d19      	adds	r1, r3, #4
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	9103      	str	r1, [sp, #12]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	bfbb      	ittet	lt
 800c8fc:	425b      	neglt	r3, r3
 800c8fe:	f042 0202 	orrlt.w	r2, r2, #2
 800c902:	9307      	strge	r3, [sp, #28]
 800c904:	9307      	strlt	r3, [sp, #28]
 800c906:	bfb8      	it	lt
 800c908:	9204      	strlt	r2, [sp, #16]
 800c90a:	7823      	ldrb	r3, [r4, #0]
 800c90c:	2b2e      	cmp	r3, #46	; 0x2e
 800c90e:	d10c      	bne.n	800c92a <_vfiprintf_r+0x15a>
 800c910:	7863      	ldrb	r3, [r4, #1]
 800c912:	2b2a      	cmp	r3, #42	; 0x2a
 800c914:	d134      	bne.n	800c980 <_vfiprintf_r+0x1b0>
 800c916:	9b03      	ldr	r3, [sp, #12]
 800c918:	1d1a      	adds	r2, r3, #4
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	9203      	str	r2, [sp, #12]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	bfb8      	it	lt
 800c922:	f04f 33ff 	movlt.w	r3, #4294967295
 800c926:	3402      	adds	r4, #2
 800c928:	9305      	str	r3, [sp, #20]
 800c92a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ca00 <_vfiprintf_r+0x230>
 800c92e:	7821      	ldrb	r1, [r4, #0]
 800c930:	2203      	movs	r2, #3
 800c932:	4650      	mov	r0, sl
 800c934:	f7f3 fc4c 	bl	80001d0 <memchr>
 800c938:	b138      	cbz	r0, 800c94a <_vfiprintf_r+0x17a>
 800c93a:	9b04      	ldr	r3, [sp, #16]
 800c93c:	eba0 000a 	sub.w	r0, r0, sl
 800c940:	2240      	movs	r2, #64	; 0x40
 800c942:	4082      	lsls	r2, r0
 800c944:	4313      	orrs	r3, r2
 800c946:	3401      	adds	r4, #1
 800c948:	9304      	str	r3, [sp, #16]
 800c94a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c94e:	4829      	ldr	r0, [pc, #164]	; (800c9f4 <_vfiprintf_r+0x224>)
 800c950:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c954:	2206      	movs	r2, #6
 800c956:	f7f3 fc3b 	bl	80001d0 <memchr>
 800c95a:	2800      	cmp	r0, #0
 800c95c:	d03f      	beq.n	800c9de <_vfiprintf_r+0x20e>
 800c95e:	4b26      	ldr	r3, [pc, #152]	; (800c9f8 <_vfiprintf_r+0x228>)
 800c960:	bb1b      	cbnz	r3, 800c9aa <_vfiprintf_r+0x1da>
 800c962:	9b03      	ldr	r3, [sp, #12]
 800c964:	3307      	adds	r3, #7
 800c966:	f023 0307 	bic.w	r3, r3, #7
 800c96a:	3308      	adds	r3, #8
 800c96c:	9303      	str	r3, [sp, #12]
 800c96e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c970:	443b      	add	r3, r7
 800c972:	9309      	str	r3, [sp, #36]	; 0x24
 800c974:	e768      	b.n	800c848 <_vfiprintf_r+0x78>
 800c976:	fb0c 3202 	mla	r2, ip, r2, r3
 800c97a:	460c      	mov	r4, r1
 800c97c:	2001      	movs	r0, #1
 800c97e:	e7a6      	b.n	800c8ce <_vfiprintf_r+0xfe>
 800c980:	2300      	movs	r3, #0
 800c982:	3401      	adds	r4, #1
 800c984:	9305      	str	r3, [sp, #20]
 800c986:	4619      	mov	r1, r3
 800c988:	f04f 0c0a 	mov.w	ip, #10
 800c98c:	4620      	mov	r0, r4
 800c98e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c992:	3a30      	subs	r2, #48	; 0x30
 800c994:	2a09      	cmp	r2, #9
 800c996:	d903      	bls.n	800c9a0 <_vfiprintf_r+0x1d0>
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d0c6      	beq.n	800c92a <_vfiprintf_r+0x15a>
 800c99c:	9105      	str	r1, [sp, #20]
 800c99e:	e7c4      	b.n	800c92a <_vfiprintf_r+0x15a>
 800c9a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9a4:	4604      	mov	r4, r0
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	e7f0      	b.n	800c98c <_vfiprintf_r+0x1bc>
 800c9aa:	ab03      	add	r3, sp, #12
 800c9ac:	9300      	str	r3, [sp, #0]
 800c9ae:	462a      	mov	r2, r5
 800c9b0:	4b12      	ldr	r3, [pc, #72]	; (800c9fc <_vfiprintf_r+0x22c>)
 800c9b2:	a904      	add	r1, sp, #16
 800c9b4:	4630      	mov	r0, r6
 800c9b6:	f7fb fced 	bl	8008394 <_printf_float>
 800c9ba:	4607      	mov	r7, r0
 800c9bc:	1c78      	adds	r0, r7, #1
 800c9be:	d1d6      	bne.n	800c96e <_vfiprintf_r+0x19e>
 800c9c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9c2:	07d9      	lsls	r1, r3, #31
 800c9c4:	d405      	bmi.n	800c9d2 <_vfiprintf_r+0x202>
 800c9c6:	89ab      	ldrh	r3, [r5, #12]
 800c9c8:	059a      	lsls	r2, r3, #22
 800c9ca:	d402      	bmi.n	800c9d2 <_vfiprintf_r+0x202>
 800c9cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9ce:	f7fc fd38 	bl	8009442 <__retarget_lock_release_recursive>
 800c9d2:	89ab      	ldrh	r3, [r5, #12]
 800c9d4:	065b      	lsls	r3, r3, #25
 800c9d6:	f53f af1d 	bmi.w	800c814 <_vfiprintf_r+0x44>
 800c9da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9dc:	e71c      	b.n	800c818 <_vfiprintf_r+0x48>
 800c9de:	ab03      	add	r3, sp, #12
 800c9e0:	9300      	str	r3, [sp, #0]
 800c9e2:	462a      	mov	r2, r5
 800c9e4:	4b05      	ldr	r3, [pc, #20]	; (800c9fc <_vfiprintf_r+0x22c>)
 800c9e6:	a904      	add	r1, sp, #16
 800c9e8:	4630      	mov	r0, r6
 800c9ea:	f7fb ff77 	bl	80088dc <_printf_i>
 800c9ee:	e7e4      	b.n	800c9ba <_vfiprintf_r+0x1ea>
 800c9f0:	0800cec9 	.word	0x0800cec9
 800c9f4:	0800ced3 	.word	0x0800ced3
 800c9f8:	08008395 	.word	0x08008395
 800c9fc:	0800c7ad 	.word	0x0800c7ad
 800ca00:	0800cecf 	.word	0x0800cecf

0800ca04 <_raise_r>:
 800ca04:	291f      	cmp	r1, #31
 800ca06:	b538      	push	{r3, r4, r5, lr}
 800ca08:	4604      	mov	r4, r0
 800ca0a:	460d      	mov	r5, r1
 800ca0c:	d904      	bls.n	800ca18 <_raise_r+0x14>
 800ca0e:	2316      	movs	r3, #22
 800ca10:	6003      	str	r3, [r0, #0]
 800ca12:	f04f 30ff 	mov.w	r0, #4294967295
 800ca16:	bd38      	pop	{r3, r4, r5, pc}
 800ca18:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ca1a:	b112      	cbz	r2, 800ca22 <_raise_r+0x1e>
 800ca1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca20:	b94b      	cbnz	r3, 800ca36 <_raise_r+0x32>
 800ca22:	4620      	mov	r0, r4
 800ca24:	f000 f830 	bl	800ca88 <_getpid_r>
 800ca28:	462a      	mov	r2, r5
 800ca2a:	4601      	mov	r1, r0
 800ca2c:	4620      	mov	r0, r4
 800ca2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca32:	f000 b817 	b.w	800ca64 <_kill_r>
 800ca36:	2b01      	cmp	r3, #1
 800ca38:	d00a      	beq.n	800ca50 <_raise_r+0x4c>
 800ca3a:	1c59      	adds	r1, r3, #1
 800ca3c:	d103      	bne.n	800ca46 <_raise_r+0x42>
 800ca3e:	2316      	movs	r3, #22
 800ca40:	6003      	str	r3, [r0, #0]
 800ca42:	2001      	movs	r0, #1
 800ca44:	e7e7      	b.n	800ca16 <_raise_r+0x12>
 800ca46:	2400      	movs	r4, #0
 800ca48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ca4c:	4628      	mov	r0, r5
 800ca4e:	4798      	blx	r3
 800ca50:	2000      	movs	r0, #0
 800ca52:	e7e0      	b.n	800ca16 <_raise_r+0x12>

0800ca54 <raise>:
 800ca54:	4b02      	ldr	r3, [pc, #8]	; (800ca60 <raise+0xc>)
 800ca56:	4601      	mov	r1, r0
 800ca58:	6818      	ldr	r0, [r3, #0]
 800ca5a:	f7ff bfd3 	b.w	800ca04 <_raise_r>
 800ca5e:	bf00      	nop
 800ca60:	20000064 	.word	0x20000064

0800ca64 <_kill_r>:
 800ca64:	b538      	push	{r3, r4, r5, lr}
 800ca66:	4d07      	ldr	r5, [pc, #28]	; (800ca84 <_kill_r+0x20>)
 800ca68:	2300      	movs	r3, #0
 800ca6a:	4604      	mov	r4, r0
 800ca6c:	4608      	mov	r0, r1
 800ca6e:	4611      	mov	r1, r2
 800ca70:	602b      	str	r3, [r5, #0]
 800ca72:	f7f5 fb99 	bl	80021a8 <_kill>
 800ca76:	1c43      	adds	r3, r0, #1
 800ca78:	d102      	bne.n	800ca80 <_kill_r+0x1c>
 800ca7a:	682b      	ldr	r3, [r5, #0]
 800ca7c:	b103      	cbz	r3, 800ca80 <_kill_r+0x1c>
 800ca7e:	6023      	str	r3, [r4, #0]
 800ca80:	bd38      	pop	{r3, r4, r5, pc}
 800ca82:	bf00      	nop
 800ca84:	200005d0 	.word	0x200005d0

0800ca88 <_getpid_r>:
 800ca88:	f7f5 bb86 	b.w	8002198 <_getpid>

0800ca8c <_init>:
 800ca8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca8e:	bf00      	nop
 800ca90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca92:	bc08      	pop	{r3}
 800ca94:	469e      	mov	lr, r3
 800ca96:	4770      	bx	lr

0800ca98 <_fini>:
 800ca98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca9a:	bf00      	nop
 800ca9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca9e:	bc08      	pop	{r3}
 800caa0:	469e      	mov	lr, r3
 800caa2:	4770      	bx	lr
